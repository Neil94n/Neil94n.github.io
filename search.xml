<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shadowsocks入坑不完全指南]]></title>
    <url>%2F2018%2F11%2F07%2Fshadowsocks%E5%85%A5%E5%9D%91%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[​ 国内的网络环境我不说相信大家都懂。虽然墙内的世界很丰富，但是墙外的世界还有着更加精彩的内容。以前上大学时候搜过免费fq教程，体验 Google 搜索、体验 Youtube、查阅学习资料，还有玩的部分游戏，然而大多数免费的不说麻烦而且不稳定，在别人的介绍下跳入了 Shadowsocks 的坑。已经用了快一年，最近又续了1年，访问速度也很快，强烈推荐给大家使用！！！（当然有的大神说，我就用免费的，你自己辣鸡不会搞，还好意思瞎bb，对对对，你说的都对，我辣鸡我只能用付费版的。）不多BB直接进入正题。 购买服务 点击进入 Shadowsocks，进入首页后选择 订购服务。 之后选择你想要购买的服务，点击现在订购。我选择的是 Shadowsocks.com 入门版。需要注意的是，虽然显示的价格是美元，但是在后面支付的时候会自动转化为人民币。 界面上选择你想要购买的类型，然后点击订购。 在结账页面，你需要填写各种信息，需要认真填写，这也是在创建账号。 Shadowsocks 支持 Alipay 支付宝国际版。之后付款就可以了，前两天续费的时候是99.25人民币，平均8块多一个月，还是可以接受的（每个月少喝两瓶肥宅快乐水少抽包烟就是了）。 之后进入 客户中心，用第4步创建的账号登陆。 点击产品服务，可以看到你刚刚购买的服务，状态为有效。 点击刚刚购买的服务，会看到产品详情。下面有配置文件下载，选择 Windows 版下载。下载下来是 gui-config.json。 ​ 客户端安装使用支持的客户端：OS X， Windows， Linux， iOS， Android， OpenWRT 路由器等。详情请参考：客户端 - Shadowsocks，客户端都在 Github 上。 Windows 客户端 直接去 Github - Shadowsocks Windows 上下载吧，我的版本有点旧了也没更新。 解压后有一个 Shadowsocks.exe 文件。最好把这个文件放到一个目录下，比如新建一个 Shadowsocks 文件夹。 把刚刚下载的 gui-config.json 文件放到与 Shadowsocks.exe 相同的目录下。 双击 Shadowsocks.exe，会出现一个 GUI 界面，自动读取了 gui-config.json 文件中的内容。 在右下角托盘图标上会有一个好像纸飞机的 Shadowsocks 图标，右键-&gt;启动系统代理，就可以越过墙壁，浏览更多丰富多彩的内容啦~ 另外建议设置成 右键-&gt;开机启动，这样不用每次开机手动启动了。还可以在 右键-&gt;服务器 中选择不同的服务器。 Linux 客户端 首先你需要下载 Chrome 浏览器 【不需要翻墙】，已经有的小伙伴就不用重新下载了。 使用如下命令安装你下载下来的 Chrome 安装包： 1sudo dpkg -i xxx-chrome-xxx.deb 通过 PPA 源安装 Shadowsocks-qt5，仅支持 Ubuntu 14.04 或更高版本。 123sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 之后就可以在应用列表里搜索到 Shadowsocks-qt5 了 打开图形化界面，点击 文件 -&gt; 从 gui-config.json 导入链接，接着就会像下图一样。 上图的 jp01 和 us01 都是后来配置好的，导入 gui-config.json 后还是有些需要自己配置。双击某一条连接，像我如下这样配置【默认有的配置就不要改了】： 配置完成后点击 OK，再点击界面上面的 连接，测试下延迟，看看是否能连接上。可以多配置几个，方便切换~ 接下来就是配置 Chrome，让 Chrome 可以使用代理。我们需要安装SwitchyOmega插件。请参考 Chrome 配置 SwitchyOmega快乐上网教程。有需要补充的小伙伴也可以交 ♂ 流下~ IOS 客户端没有苹果设备。。。老哥们自己研究吧！去 客户端 - Shadowsocks 可以找到相关的客户端。 注意 要是偶尔发现网络不稳定，切换线路试一下。 不要同时在多台设备上使用，也不要把配置文件分享给其他人，可能会遭到封号行为。不过手机和 PC 同时使用时没事的。 参考资料 中文文档 - Shadowsocks-qt5]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome 配置 SwitchyOmega快乐上网教程]]></title>
    <url>%2F2018%2F11%2F07%2FChrome%20%E9%85%8D%E7%BD%AE%20SwitchyOmega%E5%BF%AB%E4%B9%90%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[此文章是以 Shadowsocks 代理为例，若想使用 Shadowsocks 请先安装对应系统的客户端并启动。详情请参考我的另一篇文章shadowsocks入坑不完全指南。 Chrome 浏览器无论是用户体验、强大的功能还是丰富的扩展程序都完爆国内的各种浏览器好不好。目前已经可以在不翻墙的情况下去 下载 Chrome（桌面版）了，账号数据同步方面也不需要翻墙了。 SwitchyOmegaGoogle Chrome 浏览器上的一个代理扩展程序，可以轻松快捷地管理和切换多个代理设置。比如我们接下来要介绍的 自动切换模式。 下载安装直接打开Chrome应用商店搜索SwitchyOmega然后安装插件就可以了。 配置 Shadowsocks 情景模式 打开 Chrome， 点击右上角的 图标，再点击 选项。 点击左侧的 新建情景模式 输入情景模式名称 ss【自己任意设置名称】，类型选择第一个代理服务器。创建完成后做如下配置： 配置自动切换模式配置好 Shadowsocks 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。 点击左侧的 自动切换，或者自己新建情景模式，类型选择第二个 自动切换模式。然后做如下配置： 切换规则 是在访问 条件设置 的域名时候使用后面设置的 情景模式。比如图中我设置 *.google.com 和 *.twitter.com 使用 ss 情景模式【刚刚创建的那个情景模式】。我们可以点击 添加条件 来添加自己的规则。 将图中 1规则列表规则 前面的框打√，再将后面的 1情景模式 设置为 1ss ，意思是规则列表中的内容，我们使用 1ss 情景模式。然后 1规则列表设置 中： 规则列表格式： AutoProxy； 规则列表网址： https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt ps:如果需要更新直接更新就可以了 这样设置完成 规则列表规则 后就不需要在切换规则中一个一个添加条件了。 切换规则 最后一行的 默认情景模式 代表不在规则列表中网址我们使用 直接连接 情景模式，也就是说不走代理。 参考资料 Github-SwitchyOmega]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS入门]]></title>
    <url>%2F2018%2F11%2F05%2FCSS%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[1.CSS的全称是什么?CSS 指层叠样式表（Cascading Style Sheets）。通过CSS和HTML的结合可以实现表现与结构分离。从而提升工作效率，降低维护难度。 2.CSS有几种引入方式? link 和@import 有什么区别?css有四种引入方式： 1.内联方式 内联方式指的是直接在 HTML 标签中的 style 属性中添加 CSS。 这通常是个很糟糕的书写方式，它只能改变当前标签的样式，如果想要多个 拥有相同的样式，你不得不重复地为每个 添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。 2.嵌入方式 嵌入方式指的是在 HTML 头部中的 标签下书写 CSS 代码。 .content { background: red; } 嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。 3.链接方式 链接方式指的是使用 HTML 头部的 标签引入外部的 CSS 文件。 这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。 4.导入方式 导入方式指的是使用 CSS 规则引入外部 CSS 文件。 @import url(style.css); link和@import两者都是外部引用CSS的方式，但是存在一定的区别： 区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。 区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载 区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。 区别4：ink支持使用Javascript控制DOM去改变样式；而@import不支持。 3.以下这几种文件路径分别用在什么地方，代表什么意思? Paste_Image.png 4.如果我想在js.jirengu.com上展示一个图片，需要怎么操作?可以直接将图片上传到服务器，在页面使用这张图片；或者将图片存在本地服务器，然后打开本地服务，然后在网站上上引用图片 如果这个图片本来就存在网络上其他的服务器上，可以直接使用图片的网络路径链接的方式在页面上添加url引用这张图片，说白了就是把图片的引用地址改成网络路径就行了。 5.列出5条以上html和 css 的书写规范1.统一使用小写 2.不使用内联的style属性定义样式 3.id和class语义化，分隔符建议使用- 4.有可能就用缩写 5.属性值是0，省略单位，比如不要写成0px，直接是0 6.块内容缩进 7.禁止 img的 src取值为空。延迟加载的图片也要增加默认的 src 6.介绍 Chrome 开发者工具的功能区 333.png 1是元素区，在这可以看到整个网页的结构 2和12 都是控制台，录开发者开发过程中的日志信息，且可以作为与JS进行交互的命令行Shell 3 是资源，这里可以看到各种你引入的js，主要就是用于调试js 4 从发起网页页面请求Request后分析HTTP请求后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），可以根据这个进行网络性能优化 5.时间线记录并分析在网站的生命周期内所发生的各类事件，以此可以提高网页的运行时间的性能。 6.记录JS CPU执行时间细节、显示JS对象和相关的DOM节点的内存消耗、记录内存的分配细节。 7.记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表 8.安全：判断当前网页是否安全 9.对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的CSS文件等 10.样式区域，可以直观的看到css 11.适配区域，可以适配各种屏幕大小，一般用于调试页面自适应。]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈HTML（三）：表单元素]]></title>
    <url>%2F2018%2F11%2F04%2F%E6%B5%85%E8%B0%88HTML%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[一、实践1、贴上完整的代码图： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;/a123&quot; method=&quot;get&quot;&gt;&lt;div class=&quot;username&quot;&gt;&lt;label for=&quot;username&quot;&gt;姓名&lt;/label&gt;&lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username1&quot; placeholder=&quot;用户名&quot;&gt;&lt;/div&gt;&lt;div class=&quot;password&quot;&gt;&lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;&lt;input id=&quot;password&quot; type=&quot;password&quot; name=&quot;password1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;sex&quot;&gt;&lt;label for=&quot;sex&quot;&gt;性别&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;/div&gt;&lt;div class=&quot;hobby&quot;&gt;&lt;label&gt;爱好&lt;/label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;wangzhe&quot;&gt;王者荣耀&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;travl&quot;&gt;旅游&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;pet&quot;&gt;宠物&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;music&quot;&gt;音乐&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;running&quot;&gt;跑步&lt;/div&gt;&lt;div class=&quot;textarea&quot;&gt;&lt;label for=&quot;textarea&quot;&gt;评论&lt;/label&gt;&lt;textarea name=&quot;article&quot;&gt;哈哈哈哈&lt;/textarea&gt;&lt;input type=&quot;hidden&quot; name=&quot;abcd&quot; value=&quot;12345&quot;&gt;&lt;/div&gt;&lt;div class=&quot;file&quot;&gt;&lt;input type=&quot;file&quot; name=&quot;myfile&quot; accept=&quot;image/png&quot;&gt;&lt;/div&gt;&lt;div class=&quot;choose&quot;&gt;&lt;label for=&quot;pet&quot;&gt;我的宠物&lt;/label&gt;&lt;select name=&quot;city&quot;&gt;&lt;option value=&quot;cat&quot;&gt;猫&lt;/option&gt;&lt;option value=&quot;dog&quot; selected&gt;狗&lt;/option&gt;&lt;option value=&quot;fish&quot;&gt;鱼&lt;/option&gt;&lt;/select&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2、效果图： 二、具体标签：1、form代码结构如： 1&lt;form action=&quot;/a123&quot; method=&quot;get&quot;&gt; form标签是表单的外壳，有4个主要属性： （1）action：表单提交的地址 （2）method：提交表单的方法 （3）target：在何处打开action （4）enctype： application／x-www-form-urlencoded：在发送前编码所有字符（默认） text／plain：空格转换为“+”加号，但不对特殊字符编码 multipart／form-data：使用包含文件上传控件的表单是，必须使用该值 2、type代码结构如： 1&lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt; （1）type=&quot;text&quot;普通的文本输入框，单行输入（不行回车换行）。可输入文字展示 （2）type=&quot;password&quot;输入密码是以圆点展示，不被人知道 （3）type=&quot;checkbox&quot; 呈现带有阴影的勾选方框代码如下： 123456&lt;div class=&quot;hobby&quot;&gt;&lt;label for=&quot;hobby&quot;&gt;爱好&lt;/label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;read&quot;&gt;读书&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;music&quot;&gt;听歌&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;swim&quot;&gt;游泳&lt;/div&gt; 如图： 注： A、如果是分组，name写成不同，表示多选，如针对hobby这个关键字的搜索，value值需要设置，否则后台提交的用户信息将显示为on（无信息展示）。 B、value的作用：让后台来识别该字段的信息 （4）type=&quot;radio&quot; 呈现带有阴影的点选圆框代码结构如下： 12345&lt;div class=&quot;hobby&quot;&gt;&lt;label for=&quot;sex&quot;&gt;性别&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;/div&gt; 图： 注：radio 如何分组？举例说明，只需要在&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;中的name值设置另一个意义值，就可以分组显示，如： 第1组： 12&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女 第2组： 12&lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;男&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;女&quot;&gt;女 即： 1234567&lt;div class=&quot;hobby&quot;&gt;&lt;label for=&quot;sex&quot;&gt;性别&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;男&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex1&quot; value=&quot;女&quot;&gt;女&lt;/div&gt; 如图： （5）type=&quot;file&quot; 用于文件上传，呈现“选择文件”按钮，点击即可上传文件 1&lt;input type=&quot;file&quot; name=&quot;myfile&quot; accept=&quot;image/png，image/jp&gt; 注： accept该参数使用，即用于接收所限制的文件格式 （6）type=&quot;hidden&quot;作用： 暂存信息。 如在type=&quot;hidden&quot;埋下一个值，后台定位获取相应的值，可安全存值，用户什么都看不见，只能在后台看到； 保障安全。 当打开一个页面，实际上该页面是后端写的模板并在里面填充数据，填充好数据后，安全策略时使用 1type=&quot;hidden&quot; ，即： 1&lt;input type=&quot;hidden&quot; name=&quot;abc&quot; value=&quot;123456&quot;&gt; 当用户提交用户信息至后台，同时该安全点type=&quot;hidden&quot;的值也会提交后台，后台进行校验——确认过安全，相当于埋在后台与用户信息相匹配的一个安全校验值，即该用户为一个合法用户。 （7）type=&quot;button&quot;，不能点击提交 （8）type=&quot;submit&quot;，可以点击提交 （9）type=&quot;reset&quot;，用于清空所有用户信息 注： A、以下input有何作用？ 1&lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;提交按钮&quot;&gt; B、type=&quot;submit&quot; ， 提示input作用为“提交”按钮 C、value=&quot;提交&quot;， 显示提交作用，意义在于“点击提交”的交互作用 D、input里name 作用？ 即用于传递数据给后台都形成有意义的识别值，如用value和name赋值，如果不写的话，该输入标签将不会有任何意义，就等于无实际操作表单的意义。 3、type=hidden隐藏域作用type=hidden隐藏域，作为校验该用户信息的一个隐藏值（判断标准）。当用户打开页面后是看不见type=hidden相应的值，填写用户信息之后点击提交时，用户信息的数据（包括type=hidden值）随即提交后台，打开后台则会展示代码type=hidden所写的相应元素属性值。后台校验type=hidden相应值如果是正确，即用户提交为安全。 埋点（保护的参数）——浏览器提交后台有该参数作为校验标准参考——若显示错值或无值，服务器也将不承认所提交的数据；若为正确值，则说明该用户获取权限，即为合法用户，可防止CSRF攻击 4、label输入框前的文字标注代码如下： 1234&lt;div class=&quot;username&quot;&gt;&lt;label for=&quot;username&quot;&gt;姓名&lt;/label&gt;&lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username1&quot;&gt;&lt;/div&gt; 注：for，用于点击文字或输入框时，是文字显示一种focus状态，可直接输入对应信息 5、select下拉菜单代码结构如下： 12345678&lt;div class=&quot;choose&quot;&gt;&lt;select name=&quot;city&quot;&gt;&lt;label for=&quot;pet&quot;&gt;我的宠物&lt;/label&gt;&lt;option value=&quot;cat&quot;&gt;猫&lt;/option&gt;&lt;option value=&quot;dog&quot;&gt;狗&lt;/option&gt;&lt;option value=&quot;fish&quot;&gt;鱼&lt;/option&gt;&lt;/select&gt;&lt;/div&gt; option中，设置默认选择的初始值，即 &lt;option value=&quot;cat&quot; selected&gt;猫&lt;/option&gt; 6、extarea实现多行文本，展示较大的输入框。即常见的评论框。代码结构如下： 123456&lt;div class=&quot;textarea&quot;&gt;&lt;label for=&quot;textarea&quot;&gt;评论&lt;/label&gt;&lt;textarea name=&quot;article&quot;&gt;123&lt;/textarea&gt;&lt;/div&gt; 注：若在&lt;textarea&gt;...&lt;/textarea&gt;中输入任意值，即相当于value赋值的意义，也就是说在&lt;textarea&gt;...&lt;/textarea&gt;输入的值都能显示其输出的意义。 7、placeholder用于输入什么用户信息的提示代码结构如下： 1234&lt;div class=&quot;username&quot;&gt;&lt;label for=&quot;username&quot;&gt;姓名&lt;/label&gt;&lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username1&quot; placeholder=&quot;用户名&quot;&gt;&lt;/div&gt; 图：]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈HTML（二）：表单提交原理]]></title>
    <url>%2F2018%2F11%2F03%2F%E6%B5%85%E8%B0%88HTML%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、html表单1、什么是表单能够去输入用户信息的一个单子。和我们平时填写的纸质表单一样，在HTML页面上，也有表单是用于搜集不同类型的用户信息输入。 2、作用用于收集已收集的信息，提交你网站的后台（或者服务器）。HTML表单是一个包含表单元素的区域，表单元素是允许用户在表单中（表单元素包含如：文本域、下拉列表、单选框、复选框等）输入信息的元素。 二、写表单1、表单提交原理一般表单有登录名、密码，form、input，表单所有信息用form元素包裹。用包裹所有input元素输入框，当点击提交后，将会把form所包裹得所有input输入框的信息提交给后台的一个地址上。 2、写表单（1）表单内的主要标签属性：A、&lt;form&gt;...&lt;/form&gt;B、&lt;form action=&quot;/a123&quot; method=&quot;get&quot;&gt; action : 把数据提交到后台的地址，如action=&quot;/a123&quot;，即提交到当前域名下的/a123 method：提交数据的方式 （2）demo： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;login&quot;&gt;&lt;form action=&quot;/a123&quot; method=&quot;get&quot;&gt;&lt;div class=&quot;sex&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;sex1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;username&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;username1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;password&quot;&gt;&lt;input type=&quot;password&quot; name=&quot;password1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;submit&quot;&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; （3）html文件用浏览器打开页面当写出登录名、密码、提交代码后（之后加上性别），以get形式点击提交，页面url显示input输入的相应的内容： 注：点击提交代表向服务器发送了一个请求，这个文件是通过get方式进行表单收集 假如，将以下代码放置在&lt;form&gt;&lt;/form&gt;标签之外， 12345678&lt;div&gt;&lt;div class=&quot;sex&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;sex1&quot;&gt;&lt;/div&gt;&lt;form&gt;.....&lt;/form&gt;&lt;/div&gt; 以get形式提交的页面url也不会显示相应的内容： 3、终端上操作即本地终端开启服务器，以服务端的方式打开页面（1）命令行开启静态服务器，并打开页面：因为之前我已经安装nodejs，用npm安装了http-server这个服务器，所以可以执行以下代码直接打开这个静态服务器： 1$ http-server 代码执行之后，输入相应的url出现的页面，两步骤之后的示意图：注：以下情况给没有安装nodejs 的人看的（安装了就可以不看） 假如有人之前没安装nodejs，就不能用npm命令去开启一个静态服务器，所以可以先看看我这篇：浅谈命令行（二）：安装静态服务器（涉及nodejs和npm的使用）​看完之后可以下载nodejs，在终端执行以下代码：​​$ sudo npm install -g http-server$ http-server这样之后就开启了一个静态服务器，就可以用里面的url打开相应的html文件​（2）输入相应信息之后，出现：​（3）页面右键——检查，重新输入表单信息，点击提交出现页面相对应的html文件——demo.html的请求，先贴上我操作后出现的页面：​ 请求的地址：http://127.0.0.1:8080/a123?username1=neil&amp;password1=123456 请求的类型：Request Method: GET 请求的参数：username1: neilpassword1: 123456​（4）两种请求类型：get和postA、get请求即当demo.html中method=&quot;get&quot;时，页面上点击“提交”时，就会将demo.html展现的信息进行组装，以view的形式去组合成这个url地址：http://127.0.0.1:8080/a123?username1=neil&amp;password1=123456，向这个地址发送请求。​get请求，本质上就是url的拼接，把你的参数拼接在一起组成一个新的url:标签中的name属性​B、post请求关于post类型发送请求：由于我的服务器http-server，是个静态文件服务器，不支持post请求。可以看老司机的演示： post的请求类型得到的url地址更干净，更安全。​​ 三、post和get的区别1、method提供两种提交方式：一种是get方式向后台发送请求，提交数据；另一种是post方式向后台发送请求，提交数据 2、区别（1）从安全性上，二者表象不同，get把提交的数据url可以看到，会展现在浏览器历史记录中，安全性不好；但是post看不到，安全性好。​（2）从提交数据量上，get最多提交1k数据，浏览器上的url地址框有字符长度限制；post理论上无限制，受服务器限制。​（3）从原理上，get 是拼接 url，post是放入http 请求体中。 3、应用场景（怎么合理两种方式传递数据？）注： 在实际应用上，get 重在 “得到”, post 重在”传递”​​即假如向后台查询一篇论文，请求数据，请求为“得到”，用get方式请求数据；向后台“传递”数据，写了文章之后传递至后台，通常是“传递完成”的状态进行提示，用post方式请求数据。​​ 四、表单元素普通用户点上面一个，能FQ的点第二个，轻戳：HTML 表单元素HTML 表单指南]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈HTML（一）：部分标签]]></title>
    <url>%2F2018%2F11%2F03%2F%E6%B5%85%E8%B0%88HTML%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%83%A8%E5%88%86%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[本文主要讲述以下内容： &lt;iframe&gt; &lt;a&gt;及伪协议 &lt;form&gt; &lt;input&gt; &lt;table&gt; 及 &lt;colgroup&gt; 可替换元素 空元素 其他 一.iframe iframe 标签 用于嵌套页面,新开一个窗口（沙箱隔离，引用第三方内容）1src指定：&lt;iframe src=&quot;[https://www.baidu.com](http://link.zhihu.com/?target=https%3A//www.baidu.com/)&quot; name=&quot;xxx&quot;&gt;&lt;/iframe&gt; 链接打开： QQ baidu iframe可用于所见即所得的网页编辑器。 二. a (anchor) , 伪协议 &lt;a&gt;用于http get 请求 属性download 下载链接指定文件 查看使用&lt;a&gt;来创建可点击图片，如何创建email链接，电话链接 &lt;a&gt;的示范: &lt;a href=&quot;qq.com&quot;&gt;qq&lt;/a&gt;错误示范，表示qq.com文件 &lt;a href=&quot;//qq.com&quot;&gt;qq&lt;/a&gt; 浏览器会根据当前协议，补全无协议链接的协议 如果用 file:// 协议浏览页面，就会访问到 file://http://qq.com，这是一个不存在的路径 应该尽量不使用 file:// 协议预览网页，以免无协议链接出错 link 浏览器发起 GET /?name=li HTTP/1.1 请求 anchor 页面内跳转， &lt;a href=”javascript:alert(“a”) &gt; 伪协议, 阻止页面跳转 伪协议： 可以在用户点击 a 时执行一段 javascript 代码 在地址栏输入 javascript:alert(1) 可以在当前页面执行一段代码 伪协议可以实现「点击之后没有任何动作的 a 标签」，满足一些奇葩需求 滚回顶部 刷新页面 link 浏览器发起 GET / HTTP/1.1 的请求 target属性 _self : 当前页面加载，即当前的响应到同一HTML 4 frame _blank : 新窗口打开，即到一个新的未命名的HTML4窗口或HTML5浏览器上下文 _parent : 加载响应到当前框架的HTML4父框架或当前的HTML5浏览上下文的父浏览上下文。如果没有parent框架或者浏览上下文，此选项的行为方式相同_self。 _top : HTML4中：加载的响应成完整的，原来的窗口，取消所有其它frame。 HTML5中：加载响应进入顶层浏览上下文（即，浏览上下文，它是当前的一个的祖先，并且没有parent）。如果没有parent框架或者浏览上下文，此选项的行为方式相同_self 三. form 必须有提交按钮，一般作为post请求 get 默认会把参数放在查询参数里面 post默认会把参数放在请求header的第四部分里面 form 具有target属性： 如果一个里面只有一个btn ,他会自动升级为提交按钮只有一个或者 依然只是普通按钮只有一个可以提交，是唯一能确定form是否可以提交 四.input如果 input 不加 name，那么在表单提交时，input 的值就不会出现在请求里,checkbox, radio 的 name表示一组。 &lt;label&gt;把input包起来，可以关联，input 属性： require表示该表单必填 ，：输入（表单输入）元素 type部分类型：12345678- submit / reset- range- search- data / datatime /datetime-local- image- file- email- hidden 五.&lt;table&gt; 及&lt;colgroup&gt;123&lt;table&gt;： thead tbody tfoot caption tr td/th&lt;colgroup&gt; : 定义表格内的一组列。 示例: 1234567&lt;table border=1&gt;&lt;colgroup&gt;&lt;col width=100&gt;控制列宽&lt;col width=100&gt;...... 六.可替换元素CSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有&lt;img&gt;、 &lt;object&gt;、 &lt;video&gt; 和 表单元素，如&lt;textarea&gt;、 &lt;input&gt; 。 某些元素只在一些特殊情况下表现为可替换元素，例如 &lt;audio&gt;和 &lt;canvas&gt;。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。 七.空元素空元素就是不用加闭合标签的标签，也可以叫闭元素。如：1234567891011121314151617&lt;area&gt;&lt;base&gt;&lt;br&gt;&lt;col&gt;&lt;colgroup&gt;&lt;command&gt;&lt;embed&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;keygen&gt;&lt;link&gt;&lt;meta&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt; 八.其他123456789101112131415&lt;select&gt; 下拉列表，指定name！ multiple 多选&lt;textarea&gt; resize：none 禁止拖动&lt;aside&gt; 跟文章不相关的内容,旁边经常作为侧边栏或标注框出现全局属性contenteditable 内容可编辑除了div 和 span 其他标签都有默认样式&lt;b&gt; 与 &lt;strong&gt;的区别：&lt;strong&gt;元素表示更重要的内容，而&lt;b&gt;元素用于提醒，dl &gt; dt +dd&lt;meta charset=&quot;utf-8&quot;&gt; 等价于 &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; :http-equiv:http 的等价物]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈命令行（三）：好玩的命令行操作]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%B5%85%E8%B0%88%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%EF%BC%88%E6%9C%89%E5%A5%BD%E7%8E%A9%E5%86%8D%E8%A1%A5%E5%85%85%EF%BC%89%2F</url>
    <content type="text"><![CDATA[置顶资料：用来练习命令行，一天一个命令行：一天一个命令行 一、可以开启一个翻译工具第一步：打开终端或者 gitbash，输入： 1$ npm install -g fanyi 或有些人的电脑有管理员权限的，需要前面加上sudo 1$ sudo npm install -g fanyi 这里还需要输入你的开机密码 第二步：然后在终端下输入 1$ fanyi 你好 即可进行及时翻译附上我电脑的终端命令行操作图：]]></content>
      <categories>
        <category>基础知识</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈命令行（二）：安装静态服务器（涉及nodejs和npm的使用）]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%B5%85%E8%B0%88%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AE%89%E8%A3%85%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E6%B6%89%E5%8F%8Anodejs%E5%92%8Cnpm%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[掌握了终端的一些基本命令，可以做点什么呢？用命令行，可以安装一个静态服务器哦~关键词： Nodejs、npm、全局安装、http-server 一、安装Nodejs1、什么是NodejsNode.js 是一个让 JavaScript 运行在服务端的开发平台。（不懂就算了，不用太在意，反正应该是帮助js更友好地去开发的一个开发平台。。。啊吧） 2、下载链接： nodejs注： nodejs下载完后，你将不会看到它像其他软件那样出现在桌面，需要用命令行去调用它。 3、验证是否安装成功此时，可以开启终端，用命令行验证： 1$ node --version 如图： 二、使用npm安装一个静态服务器1$ npm install -g http-server 1、npm是什么npm是一个node包管理和分发工具，已经成为了非官方的发布node模块（包）的标准。有了npm，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。新版的nodejs已经集成了npm，所以之前npm也一并安装好了。 2、npm的作用npm是随同Nodejs一起安装的包管理工具，能解决Nodejs代码部署上的很多问题。 3、再次打开终端操作以下步骤：（1）开启npm 1$ npm （2）用npm安装http-sever 1$ npm install -g http-server 结论： http-server被安装成功，可以开启一个静态服务器注： 1-g 为全局安装模式，去掉-g之后就是本地模式，如果出错就可以试一下本地模式 题外话： 关于本地模式和全局模式的问题，这里就不展开讲了，比较菜不耽误别人。需要的可以看一下这两篇文章： nodejs本地模式和全局模式 node.js 本地模式与全局模式的区别 划重点： 有些人的电脑如果提示错误（我的就是这样?），不要抓狂，试一下是否需要管理员权限： 1$ sudo npm install -g http-server windows不需要管这个 （3）开启http-server（这个是一个服务器哦） 1$ http-server （4）尝试启动http-server在浏览器打开你的本地文件在命令行假设在桌面（desktop）操作一个名为code文件夹中的from.html文件 123$ ls$ cd code$ http-server 此时，将会出现服务器的url，复制下来在浏览器中打开，在code目录下启动这个静态服务器，用新的url来展示code文件夹下所相对应的html文件夹。结论：这种方式，就不是我们用本地的方式打开html文件 （5）退出http-server在终端上Ctrl+c，便会退出http-server]]></content>
      <categories>
        <category>基础知识</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈命令行（一）：命令行基本操作（包括vim在终端的基本操作）]]></title>
    <url>%2F2018%2F11%2F02%2F%E6%B5%85%E8%B0%88%E5%91%BD%E4%BB%A4%E8%A1%8C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E5%8C%85%E6%8B%ACvim%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、命令行1、了解一些关键名词： 图形界面 命令行：在终端窗口下输入一些命令就可以满足一些操作需求 终端：mac下打开终端（terminal），win下打开gitbash shell：执行当前脚本的一个载体，统称shell。如输入命令ls，即展示当前文件下的所有文件（ls本质上是字符串），通过shell底层地接受字符串的操作输入，在底层做一些文件检索，最终展示出ls发出的请求的文件 bash：本质上是一个软件。 2、安装使用 win安装git，打开gitbash linux：打开终端 mac：打开终端、iterm 二、基本命令1、查看当前完整的路径：pwd1~ $ pwd 结论： 就是看看此时我在哪个文件夹下 2、查看当前目录下文件：ls 不包括隐藏文件 1$ ls 查看当前目录下所有文件（包括隐藏文件） 1$ ls -a 查看当前目录下所有文件（包括隐藏文件）的详细信息 1$ ls -al 注：书籍推荐《鸟叔的linux教程》 3、切换目录：cd1$ cd 文件夹名 如： 1234$ cd /c/project$ cd code$ cd ../css$ cd ~/desktop 两点和一点的区别： 返回上一级文件夹: ..（即返回 ~ 家目录） 1$ cd .. 当前文件夹: . （即desktop这个文件夹） 1$ cd ./code 结论： 即切换到当前目录下的code文件夹 1$ cd code 4、文件路径（1）根路径：/ （即整个系统最根本的路径） 1$ cd code 根目录&gt;家目录如错误示范： 1$ cd /code 注： 如果要操作根路径里的其他文件夹，需要管理员权限 根路径不是C盘，根路径就是根路径 （2）家目录：~ 1~ 家目录，即当前的用户下的路径 ：如 1/Users /wxq393 如果是: 1~ /desktop $ 即是 1/Users/wxq393/desktop $ （3）当前目录：. 12$ cd code$ cd ./code （4）上级目录：.. 12$ cd ..$ cd ../code 5、创建文件 : touch1$ touch readme.md 6、删除文件 : rm1$ rm readme.md 强制删除文件夹，不提示 1$ rm -rf helloworld 或者 1$ rm -r helloworld 7、重命名文件 : mv1$ mv readme.md README.md 8、创建文件夹 : mkdir1$ mkdir projects 三、终端中的编辑器vim的使用终端命令行中先创建 1$ touch a.html 第一步： 1$ vim a.html 初始进入编辑器命令模式 第二步：键盘上：i进入编辑模式INSERT 第三步：键盘左上角：escINSERT消失，进入命令模式 第四步： 1：wq 保存退出 或者 1：!q 不保存强制退出 第五步： 1$ cat a.html 查看文件结果]]></content>
      <categories>
        <category>基础知识</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github博客教程：03添加分类，标签]]></title>
    <url>%2F2018%2F11%2F01%2FHexo-Github%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%9A03%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%EF%BC%8C%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page categories 成功后会提示： 1INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 文章分类date: 2018-10-31 13:47:40--- 添加type: &quot;categories&quot;到内容中，添加后是这样的： 12345---title: 文章分类date: 2018-10-31 13:47:40type: &quot;categories&quot;--- 保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 123456---title: Hexo博客+Github博客教程：03添加分类，标签date: 2018-11-01 14:17:46categories: - hexo--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 成功后会提示： 1INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 标签date: 2018-10-31 13:47:40--- 添加type: &quot;tags&quot;到内容中，添加后是这样的： 12345---title: 文章分类date: 2018-10-31 13:47:40type: &quot;tags&quot;--- 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格- 表单验证就是这篇文章的标签了 1234567891011---title: Hexo博客+Github博客教程：03添加分类，标签date: 2018-11-01 14:17:46categories: - 基础知识- hexotags:- hexo- github- 博客--- 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 教程结束，赶紧去设置吧！]]></content>
      <categories>
        <category>基础知识</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github博客教程：02主题优化]]></title>
    <url>%2F2018%2F11%2F01%2FHexo-Github%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%9A02%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[这一篇教程将主要介绍个性化博客的配置，并将不定期更新。 在你存放的Hexo文件夹中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。 添加分类模块1、新建一个分类页面 1$ hexo new page categories 2、你会发现你的source文件夹下有了categorcies/index.md，打开index.md文件将title设置为title: 分类 3、打开 主题配置文件 找到menu，将categorcies取消注释 4、把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中 举个栗子： 12title: 分类测试文章标题categories: 分类名 添加多个分类如果你想要把一篇文章设置为两个分类，一个为主分类，第二个为子分类，并且文章在子分类，可以这样写： 1categories: [一级分类名,二级分类名] 也可以这样写： 123categories:- 一级分类名- 二级分类名 这样这篇文章的主分类为“一级分类名”，子分类为“二级分类名”，并且文章显示在“二级分类名下”类别下。 添加标签模块1、新建一个标签页面 1$ hexo new page tags 2、你会发现你的source文件夹下有了tags/index.md，打开index.md文件将title设置为title: 标签 3、打开 主题配置文件 找到menu，将tags取消注释 4、把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 举个栗子： 12345title: 标签测试文章标题tags: - 标签1 - 标签2 ... 添加关于模块1、新建一个关于页面 1$ hexo new page about 2、你会发现你的source文件夹下有了about/index.md，打开index.md文件即可编辑关于你的信息，可以随便编辑。3、打开 主题配置文件 找到menu，将about取消注释 插入摘要有时文章比较长，或者想首页更简洁一些，希望在首页只显示摘要而不是全文。Hexo是支持摘要的功能的，只要在文章中插入代码： 1&lt;!--more--&gt; 这样在其上的文字即为摘要，在首页中就会出现“阅读更多”的图标，点击则显示全文。 插入图片使用markdown写文章，插入图片的格式为 1![图片名称](链接地址) 对于hexo，链接地址的写法包括以下几种： 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 使用微博图床，地址http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。 七牛云存储，地址http://www.qiniu.com/，同样是将图片拖入区域中，会生成图片的URL，或填入其链接地址。 插入图片的同时，建议开启Fancybox，以next主题为例，打开_config.yml，将fancybox的配置false改成true即可。 12# Fancyboxfancybox: true 居中对齐Markdown语法本身没有居中的，但Markdown中支持基本的HTML语法，可以使用HTML语法。 123&lt;center&gt;居中对齐&lt;/center&gt;&lt;h1 style=&quot;text-align:center&quot;&gt;居中对齐 &lt;h1&gt;&lt;h1 style=&quot;text-align:right&quot;&gt;居右对齐 &lt;h1&gt; 发布照片文章修改\scaffolds\photo.md 1234567layout: &#123; &#123; layout &#125; &#125;title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:photos:- &lt;photo url&gt;--- 要发布照片文章： 1$ hexo new photo &quot;photoPostName&quot; hexo默认会处理全部 markdown 和 html 文件，如果不想让 hexo 解析，可以在文件头中加入 layout: false。 安装RSS在终端执行 1npm install hexo-generator-feed --save 然后在_config.yml中添加 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 然后打开next主题文件夹里面的_config.yml,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格) 1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 配置完之后运行： 1$ hexo g 重新生成一次，你会在./public 文件夹中看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。 添加动态背景 注意：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格） 修改_layout.swig打开 next/layout/_layout.swig在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面) 123&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 修改配置文件打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面) 123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true 到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\（￣︶￣）/ 如果你感觉默认的线条太多的话可以这么设置====&gt;在上一步修改 _layout.swig中，把刚才的这些代码： 123&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 改为 1234&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot;color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 配置项说明 color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 添加网站图标网站图标即浏览网页时显示在标签页或将网页保存在书签时所显示的图标，图标可以视为网站的Logo，是网站个性化的一部分。 具体方法实现 在EasyIcon中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon.ico，然后把图标放在/themes/next/source/images里，并且修改主题配置文件： 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 404页面直接在根目录下创建自己的404.html。要注意的是，自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也不起作用。 添加百度站点地图 1$ npm install hexo-generator-baidu-sitemap@0.1.1 --save 在_config.yml中添加 12baidusitemap:path: baidusitemap.xml 更改主题下载自己喜欢的主题文件，可以到这里找。放到Hexo目录下的themes文件夹下，然后在_config.yml文件中找到： 1234# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: landscape //themes文件夹中对应文件夹的名称 将landscape改为所需要的主题文件的名字，如本博客即使用next，然后执行hexo clean(可省略)，再重新hexo g，hexo d，就能看到新主题的效果。 导航栏的定制打开主题的_config.yml文件，在开头找到如下代码： 123456789menu: home: / || home //首页 archives: /archives/ || archive //归档 categories: /categories/ || th //分类 tags: /tags/ || tags //标签 about: /about/ || user //关于 #schedule: /schedule/ || calendar //日程表 #sitemap: /sitemap.xml || sitemap //站点地图 #commonweal: /404/ || heartbeat //公益404 看看你需要哪个菜单就把哪个取消注释打开就行了； 关于后面的格式，以archives: /archives/ || archive为例： || 之前的/archives/表示标题“归档”，关于标题的格式可以去themes/next/languages/zh-Hans.yml中参考或修改 ||之后的archive表示图标，可以去Font Awesome中查看或修改，Next主题所有的图标都来自Font Awesome。 添加搜索功能1、安装 hexo-generator-searchdb 插件 1$ npm install hexo-generator-searchdb --save 2、打开 站点配置文件 找到Extensions在下面添加 123456# 搜索search: path: search.xml field: post format: html limit: 10000 3、打开 主题配置文件 找到Local search，将enable设置为true 网站计数站点访问计数有名的就是不蒜子，使用起来非常方便。 1、安装脚本 打开 themes/next/layout/_partial/footer.swig，将下面这段代码添加到里面 12345678910&lt;div&gt;&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&apos;display:none&apos;&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次 &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot; style=&apos;display:none&apos;&gt; 有&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人看过我的博客啦&lt;/span&gt;&lt;/div&gt; 添加的位置如下图，可自行根据个人喜好更换位置 2、以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 themes/next/layout/_macro/post.swig ，在第一行增加 1is_pv 字段 1&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125; 然后将这段代码插入到里面 1234&#123;% if is_pv %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次阅读&#123;% endif %&#125; 插入的位置 然后再打开 themes/next/layout/post.swig ，这个文件是文章的模板，给render方法传入参数（对应刚才添加的 1is_pv 字段） 最后再打开 themes/next/layout/index.swig ，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段） OK！设置完毕。 在右上角或者左上角实现fork me on github实现效果图 具体实现方法 点击这里或者这里挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址 实现点击出现桃心效果实现效果图 具体实现方法 在网址输入如下 1http://7u2ss1.com1.z0.glb.clouddn.com/love.js 然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码： undefinedundefined 修改文章内链接文本样式实现效果图 具体实现方法 修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式，： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改文章底部的那个带#号的标签实现效果图 具体实现方法 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记实现效果图 具体实现方法 在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）： 代码如下： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件（_config.yml),在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。 侧边栏社交小图标设置实现效果图 具体实现方法 打开主题配置文件（_config.yml），搜索social_icons:,在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可 侧边栏推荐阅读今天有位网友问推荐阅读是怎么弄，其实挺简单的，打开主题配置文件修改成这样就行了(links里面写你想要的链接): 123456789# Blogrollslinks_title: 推荐阅读#links_layout: blocklinks_layout: inlinelinks: 阮一峰: http://www.ruanyifeng.com/ 张鑫旭: http://www.zhangxinxu.com/ 百度前端技术学院: http://ife.baidu.com/ google前端开发基础: http://wf.uisdc.com/cn/ 添加评论系统 目前国内比较有名的多说、网易云跟帖评论系统都已停止服务了，国外的Disqus评论系统还得需要翻墙，所以不推荐使用，剩下的还有搜狐畅言、友言、来必力等。 本来想使用畅言的，结果注册完之后还得要求备案，我只想说F开头的那个单词，果断放弃。 后来选择了友言 1、进入友言官网注册、登录步骤我就不介绍了 2、登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的uid=1234567 3、打开 主题配置文件 找到youyan_uid将值设置为上面的uid就可以了 主页文章添加阴影效果实现效果图 具体实现方法 打开\themes\next\source\css\_custom\custom.styl,向里面加入： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 网站底部字数统计实现效果图 具体方法实现切换到根目录下，然后运行如下代码 1$ npm install hexo-wordcount --save 然后在/themes/next/layout/_partials/footer.swig文件尾部加上： 1234&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 实现统计功能实现效果图 具体实现方法 在根目录下安装 hexo-wordcount,运行： 1$ npm install hexo-wordcount --save 然后在主题的配置文件中，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 在文章底部增加版权信息实现效果图 在目录 next/layout/_macro/下添加 my-copyright.swig： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt; &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 之前添加增加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 如下： 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： 1@import &quot;my-post-copyright&quot; 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似： 小技巧：如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加：这样每次hexo new &quot;你的内容&quot;之后，生成的md文件会自动把copyright:加到里面去(注意：如果解析出来之后，你的原始链接有问题：如：http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html,那么在根目录下_config.yml中写成类似这样：）就行了。 隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图： 博文置顶修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为： 12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 在文章中添加 top 值，数值越大文章越靠前，如 title: 解决Charles乱码问题 date: 2017-05-22 22:45:48 tags: 技巧 categories: 技巧 copyright: true top: 100 SEO（搜索引擎优化）GoogleWebmasters：站长工具，让博客被Google更好的收录，比如手动让Googlebot抓取、提交Robots、更新Sitemap等。另有百度站长工具。经过测试，发现在Google提交网址并验证网站所有权和手动抓取后，很快就可以直接在Google上搜索到自己的播客网站，而百度则目前仍未能被其搜索引擎所抓取。可以看出Google对个人站长更为友好。 更多1、还有其他更多的主题配置，请查看主题配置 2、还有其他更多的插件，请查看Hexo插件 插件改的越多出错的bug风险就越大，毕竟对于小白来说可能一不小心两个插件冲突了自己不知道怎么办，不要逐本求末把太多精力放在这上面，所以先从基础的开始，网上相似的教程也有很多，大家最好找几篇对比着看，了解原理之后进行二次开发。 本文对网络文章和所使用工具的官方文档多有参考，一并谢过，不一一列举了。]]></content>
      <categories>
        <category>基础知识</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github博客教程：01基本操作]]></title>
    <url>%2F2018%2F11%2F01%2FHexo-Github%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%9A01%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[搭建步骤 GitHub创建个人仓库 安装Git 安装Node.js 安装Hexo 部署Github为我们的博客提供了托管平台。 首先注册一个GitHub帐号，然后建立与你用户名对应的仓库，仓库名必须为 1username.github.io 同时在Pages中开启Github Pages服务。进入刚才创建的仓库,点击右边菜单中的Settings按钮，在跳转到的页面 Update your site 对应处点击“Automatic page generator”按钮，这样就有了一个github自动生成的页面用来测试的时候使用。之后点击继续。选择主题,点击’Publish page’发布。 再次回到仓库,点击Settings按钮，点击链接就可以看到测试地址页面。 在站点配置文件_config.yml中，找到并修改： 1url: http://username.github.io/ 以及 1234deploy: type: git repository: https://github.com/username/username.github.io.git branch: master 每次将写好的文章部署到Github时，会被要求输入Github用户名和密码。 添加SSH Keys什么是SSH Keys简单说，SSH是一种网络协议，用于计算机之间的加密登录。 如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。 检查SSH Keys如果不清楚是否已经添加SSH，先检查： 1ls-al~/.ssh 如果有id_dsa.pub，id_ecdsa.pub，id_ed25519.pub等，说明有SSH keys。 如果未配置，则返回 1bash: ls-al~/.ssh: No such file or directory 如果没有的话,就生成一个SSH keys： 1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然后会出现: 12Generating public/private rsa key pair.Enter file in which to save the key (/Users/you/.ssh/id_rsa): 就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了。 然后会出现: 12Enter passphrase (empty for no passphrase): [Type a passphrase]# Enter same passphrase again: [Type passphrase again] 这是要求输入一个密码，记住这个密码。 保存SSH keys 创建成功后,他会提示你SSH keys保存在哪里: 1234Your identification has been saved in /Users/you/.ssh/id_rsa.# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.# The key fingerprint is:# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 找到SSH keys根据上一步里告诉你的路径,找到保存SSH keys的地方，其中id_rsa.pub 就是SSH keys。如果为了防止以后找不到，可以把他们自己另存到其它地方。 为github仓库添加SSH keysSSH keys创建好了，我们还要把它添加到仓库里去创建的仓库。 点击右侧的Settings，然后在左侧的Deploy keys中选择Add deploy key，点击Add deploy key。 然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填，点击Add key。添加的过程中，还要再输入一次github的密码。 测试连接回到git bash执行: 1$ ssh -T git@github.com 它可能会出现一些乱七八糟的提示，最后是问你yes/no,就输入yes。 如果要求输入密码，那这个密码就是之前设置的那个密码（已用黑体并加粗）。如果之前没有设置密码，没忽略此步骤。 1Enter passphrase for key &apos;/c/Users/2000104591/.ssh/id_rsa&apos;: 最后它提示你: 1Hi, 用户名/用户名.github.io! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 安装Git什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看廖雪峰老师的Git教程：Git教程 从Git官网下载：Git - Downloading Package 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash或者在菜单里搜索Git Bash，设置user.name和user.email配置信息： 12git config --global user.name "你的用户名"git config --global user.email "你的邮箱" 安装Node.jsHexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v : 12$ node -vv8.5.0 检测npm是否安装成功，在命令行中输入npm -v : 12$ npm -v5.3.0 到这了，安装Hexo的环境已经全部搭建完成。 安装 Hexo什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本博客就是借由Hexo搭建而成。 在上述所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 操作方法是：在一个文件夹中（最好放在一个安全的独立的目录下，尽量不要起中文名作为存放博客的文件夹，我是直接放在桌面的）右键，选择Git Bash Here，即可打开命令窗口。也可以执行如下命令。 123cd ~/Desktop: #进入桌面mkdir hexo #创建文件夹hexo，为了存放你的博客各种内容及设置cd hexo #进入hexo文件夹 在该文件夹中执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件，操作方法同上。 12$ hexo init #初始化$ npm i #安装依赖包 然后安装hexo-deployer-git插件 1npm install hexo-deployer-git --save 本地网页预览执行下列命令，生成本地网页并启动预览。 12hexo g #生成本地网页文件hexo s #启动预览服务 其中，npm i == npm installhexo g == hexo generatehexo s == hexo server 1http-server -c-1 #另一种启动本地预览服务的方法，推荐 当看到INFO Hexo is running at localhost:4000. Press Ctrl+C to stop.时就说明我们已经搭建起本地的Hexo博客，这时到浏览器输入localhost:4000可以看到结果（或者打开http://127.0.0.1:4000/ ），然后按Ctrl+C可以停止预览；如果用后一种办法的在浏览器输入的是： http://127.0.0.1:8080。到此，Hexo的初步使用就告一段落了。]]></content>
      <categories>
        <category>基础知识</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些软件的安装]]></title>
    <url>%2F2018%2F11%2F01%2F%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Git Bash 的安装与配置 Node.js 的安装与配置 Git 的安装与配置 VSCode 的安装与配置 Git Bash 的安装与配置安装 从官网下载（算了，太慢了） 百度网盘：链接: https://pan.baidu.com/s/1nu99KWp 密码: jfdf 双击安装，注意每一步的选项要参考下面的图（如果没有对应的图，就直接下一步） 下面的路径可以随便填： 好了，安装完成。 配置安装成功之后，需要设置一下外观： 关闭重启 Git Bash 即可。 使用第一种使用方式找一个目录，在目录上右键点击，然后选中「Git Bash Here」，即可用 Git Bash 打开这个目录。 试试输入 touch 1.txt，回车后看看目录里是不是多了一个文件。 第二种使用方式直接打开 Git Bash，输入 cd ~/Desktop 即可来到桌面所在的目录。 试试输入 touch 1.txt，回车后看看桌面上是不是多了一个文件。 更多命令下节课我们会专门学习命令行，你可以试试下面几个简单的命令： 创建目录：mkdir my-dir 删除目录：rm -r my-dir 创建文件：echo &quot;hello&quot; &gt; newFile.txt 删除文件：rm newFile.txt 链接解决git bash无法复制和黏贴 Node.js 的安装与配置 从官网下载安装包 百度网盘下载：链接: https://pan.baidu.com/s/1cMxJcU 密码: xfyj 安装了之后 千万别 点击 Node.js 的图标 千万别 点击 Node.js 的图标 千万别 点击 Node.js 的图标 别问为什么，别点就是了。 配置打开 Git Bash，依次输入以下命令，按回车： 123npm config set registry https://registry.npm.taobao.org/npm config set loglevel httpnpm config set progress false npm 的配置被存储在 ~/.npmrc，你可以随时改。 使用npm 安装命令行小工具装了 Node.js 之后我们就可以在 Git Bash 里面使用 node 和 npm 这两个命令了，试试看： 1234which nodewhich npmnode -vnpm -v 依次输出看看你得到什么结果。 接下来跟大家展示一下 npm 的威力。我们可以用 npm 的翻译工具做一个随时可用的小字典，这个小工具的名字叫做 fanyi。 运行 npm i -g fanyi 即可安装 fanyi，安装完成之后，输入 fanyi frontend 就可以看到对应的中文释义了！ 是不是很帅呢？！ node 的使用 进入 Git Bash 输入 node，回车，就可以进入 node 运行环境，这个时候我们就可以写 JS 了 试试写最简单的 JS 语句，比如 1+2，回车 2 * 8，回车 这就是 node 的第一种使用方式 node 的另一种使用方式我们可以先创建一个 JS 文件，然后让 node 运行 来到桌面：cd ~/Desktop 新建一个目录用来玩耍：mkdir hello-node 进入这个目录：cd hello-node 新建一个有内容的 JS 文件：echo &quot;console.log(&#39;Hi, Node.js&#39;)&quot; &gt; main.js，那么 main.js 就新建成功了 输入 node main.js，回车，node 就会执行这个 main.js 文件，你会看到「Hi, Node.js」字样 玩完了，删除 hello-node：cd .. ; rm -rf hello-node Git 的安装与配置安装不需要安装，Git Bash 内置了 Git 命令，Git Bash 还内置了以下命令： ls mkdir cp mv 等等，大概有几十个命令，Git Bash 其实是一个 Bash，不是 Git。 Git Bash 给我们提供了一个虚拟的 Linux 环境，这样我们就不用忍受 Windows 里面垃圾一般的命令行体验了。 配置请在命令行运行这五句话！！！一定要运行这五句话，不然 git 就不能用了 12345git config --global user.name 你的英文名字 #方便产品经理找（怼）你git config --global user.email 你的常用邮箱 #方便产品经理找（怼）你git config --global push.default simple # 本来我写的是 matching，不过想了想可能 simple 更好git config --global core.quotepath false #防止文件名变成数字git config --global core.editor &quot;vim&quot; # 使用vim编辑提交信息 另外很重要的一点！你自己运行 git 的时候注意一下：git remote add origin 后面的地址，不允许使用 https 开头的地址，见下图 记得点击 SSH VSCode 的安装与配置从官网下载安装包 安装时把以下选项选中： 使用 找个地方新建一个目录（目录名不要中文），假设目录名为 vs-demo 右键点击该目录，open with code 使用 Ctrl+Shift+E 打开资源管理器，在 vs-demo 目录里新建 HTML 文件，文件名为 index.html 在 index.html 依次输入：英文感叹号、回车 键，即可看到一个完整的 HTML 页面 由于 vscode 时常更新，如果 回车 键不行，就试试 Tab 键 这种快捷写法叫做 Emmet，目前所有的前端编辑器都支持 Emmet。换句话说，如果一个编辑器没有默认支持 Emmet，你就可以卸载这款编辑器了（比如 Sublime Text 括弧笑）。 关于 Emmet 的更多快捷写法，见： 官网的视频介绍 Emmet 作弊表 配置VSCode 的配置方式就写编辑一个配置文件，打开「文件 - 首选项 - 设置」，对应快捷键为 Ctrl + , 左侧为系统默认配置项，右侧为你要覆盖的配置项。把你要修改的项从左边拷贝到右边，然后保存，即可生效。 设置字体与字号在右侧文件中添加一行（注意末尾要有英文逗号） 1&quot;editor.fontSize&quot;: 18, 保存，字号就变大了。 设置字体也是类似，添加 1&quot;editor.fontFamily&quot;: &quot;Consolas, &apos;Courier New&apos;, monospace&quot;, 即可将字体设置为你想要的。这里推荐「10大最适合编程的字体推荐下载」，够你玩一上午了。我用的编程字体一般是 Source Code Pro 和 M Plus 这两款。 其实 VSCode 默认的配置就挺好的。 插件安装VSCode 自带 Emmet、Git 继承和 JS 调试功能（后续会讲到），已经十分完善了，但是还是有一些特殊的需求，这个时候我们就可以安装第三方插件了。由于第三方插件不是微软生产的，所以质量良莠不齐，请注意甄别。 如果你发现 VSCode 没有 Git 功能： 那么你只需要在项目目录运行 git init 来激活 git 功能即可。 安装 open in browser按 Ctrl + Shift + X 打开扩展面板，然后输入 open in browser，点击第一个结果的「安装」按钮，稍等片刻就安装好了（相比之下 Sublime 的插件安装体验就差很多）。 然后你在任意 HTML 文件右键，就可以看到 Open In Default Browser 这个按钮了，点就试试看。]]></content>
      <categories>
        <category>基础知识</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>node</tag>
        <tag>Git Bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP入门]]></title>
    <url>%2F2018%2F10%2F30%2FHTTP%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[什么是HTTP?超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议[1]。HTTP是万维网的数据通信的基础。 设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。 HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。 协议概述HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。 尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。 通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。 请求方法HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源： GET 向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法 HEAD 与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。 POST 向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。 PUT 向指定资源位置上传其最新内容。 DELETE 请求服务器删除Request-URI所标识的资源。 TRACE 回显服务器收到的请求，主要用于测试或诊断。 OPTIONS 这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。 方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。 状态码所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。 状态代码的第一个数字代表当前响应的类型： 1xx消息——请求已被服务器接收，继续处理 2xx成功——请求已成功被服务器接收、理解、并接受 3xx重定向——需要后续操作才能完成这一请求 4xx请求错误——请求含有词法错误或者无法被执行 5xx服务器错误——服务器在处理某个正确请求时发生错误 请求与响应下面是一个HTTP客户端与服务器之间会话的例子，运行于www.baidu.com，端口80。我们可以通过Chrome开发者工具查看HTTP的请求与响应内容。 请求首先我们需要打开电脑的命令行工具输入： 1curl -s -v -H "Neil : xxx" -- "https://www.baidu.com" 请求的内容为：12345GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.55.1Accept: */*Neil: xxx 我们还可以通过其他的方法来发送请求： 1curl -X POST -d "1234567890" -s -v -H "Neil : xxx" -- "https://www.baidu.com" 请求的内容为：123456789POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.55.1Accept: */*Neil: xxxContent-Length: 10Content-Type: application/x-www-form-urlencoded[10 bytes data] 请求的格式：1234567891 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据 我们可以得出结论一个完整的HTTP请求包含4个部分，分别为请求行、请求头、空行、其他的消息体，其中第四部分有时也可以为空。 如何用 Chrome 查看请求内容 打开 Chrome浏览器F12进入开发者工具点击Network 地址栏输入网址，比如：www.baidu.com 在 Network 点击，查看 request，点击「view source」 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到了 响应请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。 响应示例上面两个请求的响应分别为 1234567891011121314HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: &quot;5886041d-98b&quot;Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/[2443 bytes data] 123456789HTTP/1.1 302 FoundConnection: Keep-AliveContent-Length: 17931Content-Type: text/htmlDate: Thu, 01 Nov 2018 13:08:49 GMTEtag: &quot;54d9749e-460b&quot;Server: bfe/1.0.8.18[3824 bytes data] GET 请求和 POST 请求对应的响应可以一样，也可以不一样 响应的第四部分可以很长很长很长 响应的格式12345671 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容 如何用 Chrome 查看响应内容 打开 Chrome浏览器F12进入开发者工具点击Network 地址栏输入网址，比如：www.baidu.com 在 Network 点击，查看 Response Headers，点击「view source」 如果有请求的第四部分，点击查看Response或者Preview就可以了]]></content>
      <categories>
        <category>前端</category>
        <category>http</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
</search>
