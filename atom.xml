<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil&#39;s Blog</title>
  
  <subtitle>要么出众，要么出局</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-07T07:55:09.349Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Neil Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shadowsocks入坑不完全指南</title>
    <link href="http://yoursite.com/2018/11/07/shadowsocks%E5%85%A5%E5%9D%91%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/11/07/shadowsocks入坑不完全指南/</id>
    <published>2018-11-07T03:51:15.000Z</published>
    <updated>2018-11-07T07:55:09.349Z</updated>
    
    <content type="html"><![CDATA[<p>​        国内的网络环境我不说相信大家都懂。虽然墙内的世界很丰富，但是墙外的世界还有着更加精彩的内容。以前上大学时候搜过免费fq教程，体验 Google 搜索、体验 Youtube、查阅学习资料，还有玩的部分游戏，然而大多数免费的不说麻烦而且不稳定，在别人的介绍下跳入了 Shadowsocks 的坑。已经用了快一年，最近又续了1年，访问速度也很快，强烈推荐给大家使用！！！（当然有的大神说，我就用免费的，你自己辣鸡不会搞，还好意思瞎bb，对对对，你说的都对，我辣鸡我只能用付费版的。）不多BB直接进入正题。</p><a id="more"></a><h1 id="购买服务"><a href="#购买服务" class="headerlink" title="购买服务"></a>购买服务</h1><ol><li><p>点击进入 <a href="https://portal.shadowsocks.se/aff.php?aff=19090" target="_blank" rel="noopener">Shadowsocks</a>，进入首页后选择 <code>订购服务</code>。</p></li><li><p>之后选择你想要购买的服务，点击现在订购。我选择的是 <code>Shadowsocks.com 入门版</code>。需要注意的是，虽然显示的价格是美元，但是在后面支付的时候会自动转化为人民币。<br><img src="https://pic4.zhimg.com/80/v2-7effe66841994b6004675ae3aed85b83_hd.jpg" alt="img"></p></li><li><p>界面上选择你想要购买的类型，然后点击订购。</p></li><li><p>在结账页面，你需要填写各种信息，需要认真填写，这也是在创建账号。</p></li><li><p>Shadowsocks 支持 Alipay 支付宝国际版。之后付款就可以了，前两天续费的时候是99.25人民币，平均8块多一个月，还是可以接受的（每个月少喝两瓶肥宅快乐水少抽包烟就是了）。</p></li><li><p>之后进入 <a href="https://portal.shadowsocks.com/clientarea.php" target="_blank" rel="noopener">客户中心</a>，用第4步创建的账号登陆。</p></li><li><p>点击产品服务，可以看到你刚刚购买的服务，状态为有效。<br><img src="https://pic1.zhimg.com/80/v2-c85562c75e8011bca9cc9b9900540814_hd.jpg" alt="img"></p></li><li><p>点击刚刚购买的服务，会看到产品详情。下面有配置文件下载，选择 Windows 版下载。下载下来是 <code>gui-config.json</code>。</p><p><img src="https://pic4.zhimg.com/80/v2-0781dad5fc2337255b44b17aa948d33b_hd.jpg" alt="img"></p></li></ol><p><img src="https://pic2.zhimg.com/80/v2-868886edc16918ac5578f489801bcb19_hd.jpg" alt="img"></p><h1 id="客户端安装使用"><a href="#客户端安装使用" class="headerlink" title="客户端安装使用"></a>客户端安装使用</h1><p>支持的客户端：OS X， Windows， Linux， iOS， Android， OpenWRT 路由器等。<br>详情请参考：<a href="https://shadowsocks.com/client.html" target="_blank" rel="noopener">客户端 - Shadowsocks</a>，客户端都在 Github 上。</p><h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><ol><li>直接去 <a href="http://link.zhihu.com/?target=https%3A//github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Github - Shadowsocks Windows</a> 上下载吧，我的版本有点旧了也没更新。</li><li>解压后有一个 <code>Shadowsocks.exe</code> 文件。最好把这个文件放到一个目录下，比如新建一个 Shadowsocks 文件夹。</li><li>把刚刚下载的 <code>gui-config.json</code> 文件放到与 <code>Shadowsocks.exe</code> 相同的目录下。</li><li>双击 <code>Shadowsocks.exe</code>，会出现一个 GUI 界面，自动读取了 <code>gui-config.json</code> 文件中的内容。<br><a href="http://www.cylong.com/blog/2016/05/26/shadowsocks/Windows-Shadowsocks-gui.png" target="_blank" rel="noopener"><img src="http://www.cylong.com/blog/2016/05/26/shadowsocks/Windows-Shadowsocks-gui.png" alt="Windows Shadowsocks 图形界面"></a></li><li>在右下角托盘图标上会有一个好像纸飞机的 Shadowsocks 图标，<code>右键-&gt;启动系统代理</code>，就可以越过墙壁，浏览更多丰富多彩的内容啦~<br><a href="http://www.cylong.com/blog/2016/05/26/shadowsocks/Shadowsocks-menu.png" target="_blank" rel="noopener"><img src="http://www.cylong.com/blog/2016/05/26/shadowsocks/Shadowsocks-menu.png" alt="Shadowsocks 菜单"></a></li><li>另外建议设置成 <code>右键-&gt;开机启动</code>，这样不用每次开机手动启动了。还可以在 <code>右键-&gt;服务器</code> 中选择不同的服务器。</li></ol><h2 id="Android-客户端"><a href="#Android-客户端" class="headerlink" title="Android 客户端"></a>Android 客户端</h2><ol><li>直接去 <a href="http://link.zhihu.com/?target=https%3A//github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Github - Shadowsocks Android</a> 上找最新版本。</li><li>把这个 apk 安装到手机上【可以传到手机里，打开这个 apk 就能安装了】，中文叫影梭。</li><li>安装完成后仍然需要配置，支持扫描二维码配置，但是需要下载一个客户端。我不喜欢下太多的客户端，所以就手动配置，具体的值可以用记事本打开 <code>gui-config.json</code> 查看。<br><img src="https://pic4.zhimg.com/80/v2-a4c46cdb572eaea419469c77f61acaa7_hd.jpg" alt="img"></li><li>翻墙后就可以去 Google Play 商店更新 Shadowsocks 了</li></ol><p>​    <strong>ps:本渣只尝试了自己已有的设备，其他的没有尝试过。</strong></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>要是偶尔发现网络不稳定，切换线路试一下。</li><li>不要同时在多台设备上使用，也不要把配置文件分享给其他人，可能会遭到封号行为。不过手机和 PC 同时使用时没事的。</li><li>我遇到一个问题就是启动某些服务器无法下载 Google Play 里的应用，而且有些应用也提示无法在你所在的国家或者地区购买，这个时候就切换下线路，并且清除 Google Play 数据重启就行了。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki" target="_blank" rel="noopener">中文文档 - Shadowsocks-qt5</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        国内的网络环境我不说相信大家都懂。虽然墙内的世界很丰富，但是墙外的世界还有着更加精彩的内容。以前上大学时候搜过免费fq教程，体验 Google 搜索、体验 Youtube、查阅学习资料，还有玩的部分游戏，然而大多数免费的不说麻烦而且不稳定，在别人的介绍下跳入了 Shadowsocks 的坑。已经用了快一年，最近又续了1年，访问速度也很快，强烈推荐给大家使用！！！（当然有的大神说，我就用免费的，你自己辣鸡不会搞，还好意思瞎bb，对对对，你说的都对，我辣鸡我只能用付费版的。）不多BB直接进入正题。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 配置 SwitchyOmega快乐上网教程</title>
    <link href="http://yoursite.com/2018/11/07/Chrome%20%E9%85%8D%E7%BD%AE%20SwitchyOmega%E5%BF%AB%E4%B9%90%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/07/Chrome 配置 SwitchyOmega快乐上网教程/</id>
    <published>2018-11-07T03:50:35.000Z</published>
    <updated>2018-11-07T07:55:01.905Z</updated>
    
    <content type="html"><![CDATA[<p>此文章是以 Shadowsocks 代理为例，若想使用 Shadowsocks 请先安装对应系统的客户端并启动。详情请参考我的另一篇文章。</p><h1 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h1><p>无论是用户体验、强大的功能还是丰富的扩展程序都完爆国内的各种浏览器好不好。目前已经可以在不翻墙的情况下去 <a href="http://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="noopener">下载 Chrome（桌面版）</a>了，账号数据同步方面也不需要翻墙了。</p><h1 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h1><p>Google Chrome 浏览器上的一个代理扩展程序，可以轻松快捷地管理和切换多个代理设置。比如我们接下来要介绍的 <code>自动切换模式</code>。</p><a id="more"></a><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>直接打开Chrome应用商店搜索SwitchyOmega然后安装插件就可以了。</p><p><img src="https://pic4.zhimg.com/80/v2-3ecf40b3d7c1980f6962d47cc64ed77f_hd.jpg" alt="img"></p><h2 id="配置-Shadowsocks-情景模式"><a href="#配置-Shadowsocks-情景模式" class="headerlink" title="配置 Shadowsocks 情景模式"></a>配置 Shadowsocks 情景模式</h2><ol><li><p>打开 Chrome， 点击右上角的  图标，再点击 <code>选项</code>。</p><p><img src="https://pic2.zhimg.com/80/v2-1a9e7d4ca6841ac4d91582b2056ab2c5_hd.jpg" alt="img"></p></li><li><p>点击左侧的 <code>新建情景模式</code></p></li><li><p>输入情景模式名称 <code>ss</code>【自己任意设置名称】，类型选择第一个<code>代理服务器</code>。创建完成后做如下配置：<br><img src="https://pic4.zhimg.com/80/v2-fa5d2c9aad182416530953d30ec734ff_hd.jpg" alt="img"></p></li></ol><p><img src="https://pic2.zhimg.com/80/v2-ea59983260baff70e878d3809aef1875_hd.jpg" alt="img"></p><h2 id="配置自动切换模式"><a href="#配置自动切换模式" class="headerlink" title="配置自动切换模式"></a>配置自动切换模式</h2><p>配置好 Shadowsocks 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。</p><ol><li>点击左侧的 <code>自动切换</code>，或者自己新建情景模式，类型选择第二个 <code>自动切换模式</code>。然后做如下配置：<br><img src="https://pic3.zhimg.com/80/v2-ec802fc8385d5b2e055aab4bf1639476_hd.jpg" alt="img"></li></ol><ul><li><p><code>切换规则</code> 是在访问 <code>条件设置</code> 的域名时候使用后面设置的 <code>情景模式</code>。比如图中我设置 <code>*.google.com</code> 和 <code>*.twitter.com</code> 使用 <code>ss</code> 情景模式【刚刚创建的那个情景模式】。我们可以点击 <code>添加条件</code> 来添加自己的规则。</p></li><li><p>将图中</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">规则列表规则</span><br></pre></td></tr></table></figure><p>  前面的框打√，再将后面的</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">情景模式</span><br></pre></td></tr></table></figure><p>  设置为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks</span><br></pre></td></tr></table></figure><p>  ，意思是规则列表中的内容，我们使用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks</span><br></pre></td></tr></table></figure><p>  情景模式。然后</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">规则列表设置</span><br></pre></td></tr></table></figure><p>  中：</p><ul><li>规则列表格式： AutoProxy；</li><li><p>规则列表网址： <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p><p><strong>ps:如果需要更新直接更新就可以了</strong></p></li></ul><ul><li><p>这样设置完成 <code>规则列表规则</code> 后就不需要在切换规则中一个一个添加条件了。</p></li><li><p><code>切换规则</code> 最后一行的 <code>默认情景模式</code> 代表不在规则列表中网址我们使用 <code>直接连接</code> 情景模式，也就是说不走代理。</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">Github-SwitchyOmega</a><br>[Github-gfwlist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章是以 Shadowsocks 代理为例，若想使用 Shadowsocks 请先安装对应系统的客户端并启动。详情请参考我的另一篇文章。&lt;/p&gt;
&lt;h1 id=&quot;Chrome-浏览器&quot;&gt;&lt;a href=&quot;#Chrome-浏览器&quot; class=&quot;headerlink&quot; title=&quot;Chrome 浏览器&quot;&gt;&lt;/a&gt;Chrome 浏览器&lt;/h1&gt;&lt;p&gt;无论是用户体验、强大的功能还是丰富的扩展程序都完爆国内的各种浏览器好不好。目前已经可以在不翻墙的情况下去 &lt;a href=&quot;http://www.google.cn/chrome/browser/desktop/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载 Chrome（桌面版）&lt;/a&gt;了，账号数据同步方面也不需要翻墙了。&lt;/p&gt;
&lt;h1 id=&quot;SwitchyOmega&quot;&gt;&lt;a href=&quot;#SwitchyOmega&quot; class=&quot;headerlink&quot; title=&quot;SwitchyOmega&quot;&gt;&lt;/a&gt;SwitchyOmega&lt;/h1&gt;&lt;p&gt;Google Chrome 浏览器上的一个代理扩展程序，可以轻松快捷地管理和切换多个代理设置。比如我们接下来要介绍的 &lt;code&gt;自动切换模式&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门</title>
    <link href="http://yoursite.com/2018/11/05/CSS%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/11/05/CSS入门/</id>
    <published>2018-11-05T11:41:12.000Z</published>
    <updated>2018-11-07T07:54:38.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CSS的全称是什么"><a href="#1-CSS的全称是什么" class="headerlink" title="1.CSS的全称是什么?"></a>1.CSS的全称是什么?</h2><p>CSS 指层叠样式表（Cascading Style Sheets）。通过CSS和HTML的结合可以实现表现与结构分离。从而提升工作效率，降低维护难度。</p><a id="more"></a><h2 id="2-CSS有几种引入方式-link-和-import-有什么区别"><a href="#2-CSS有几种引入方式-link-和-import-有什么区别" class="headerlink" title="2.CSS有几种引入方式? link 和@import 有什么区别?"></a>2.CSS有几种引入方式? link 和@import 有什么区别?</h2><p>css有四种引入方式：</p><p>1.内联方式</p><p>内联方式指的是直接在 HTML 标签中的 style 属性中添加 CSS。<br> <code><div style="background: red"></div></code><br> 这通常是个很糟糕的书写方式，它只能改变当前标签的样式，如果想要多个 <div> 拥有相同的样式，你不得不重复地为每个 <div> 添加相同的样式，如果想要修改一种样式，又不得不修改所有的 style 中的代码。很显然，内联方式引入 CSS 代码会导致 HTML 代码变得冗长，且使得网页难以维护。</div></div></p><p>2.嵌入方式</p><p>嵌入方式指的是在 HTML 头部中的 <style> 标签下书写 CSS 代码。</p><p><code><head></p><style>.content {background: red;}</style></p><p></p><p></p><p>嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。</p><p>3.链接方式</p><p>链接方式指的是使用 HTML 头部的 <head><meta name="generator" content="Hexo 3.8.0"> 标签引入外部的 CSS 文件。</head></p><p><code>    <link rel="stylesheet" type="text/css" href="style.css"></code></p><p>这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可。</p><p>4.导入方式</p><p>导入方式指的是使用 CSS 规则引入外部 CSS 文件。<br> <code> @import url(style.css);</code></p><p>link和@import两者都是外部引用CSS的方式，但是存在一定的区别：</p><p>区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。<br> 　区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载<br> 　区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。<br> 区别4：ink支持使用Javascript控制DOM去改变样式；而@import不支持。</p><h2 id="3-以下这几种文件路径分别用在什么地方，代表什么意思"><a href="#3-以下这几种文件路径分别用在什么地方，代表什么意思" class="headerlink" title="3.以下这几种文件路径分别用在什么地方，代表什么意思?"></a>3.以下这几种文件路径分别用在什么地方，代表什么意思?</h2><p><img src="https:////upload-images.jianshu.io/upload_images/4769817-91e9b8c5b0b3d9e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>Paste_Image.png</p><h2 id="4-如果我想在js-jirengu-com上展示一个图片，需要怎么操作"><a href="#4-如果我想在js-jirengu-com上展示一个图片，需要怎么操作" class="headerlink" title="4.如果我想在js.jirengu.com上展示一个图片，需要怎么操作?"></a>4.如果我想在js.jirengu.com上展示一个图片，需要怎么操作?</h2><p>可以直接将图片上传到服务器，在页面使用这张图片；或者将图片存在本地服务器，然后打开本地服务，然后在网站上上引用图片</p><p>如果这个图片本来就存在网络上其他的服务器上，可以直接使用图片的网络路径链接的方式在页面上添加url引用这张图片，说白了就是把图片的引用地址改成网络路径就行了。</p><h2 id="5-列出5条以上html和-css-的书写规范"><a href="#5-列出5条以上html和-css-的书写规范" class="headerlink" title="5.列出5条以上html和 css 的书写规范"></a>5.列出5条以上html和 css 的书写规范</h2><p>1.统一使用小写<br> 2.不使用内联的style属性定义样式<br> 3.id和class语义化，分隔符建议使用-<br> 4.有可能就用缩写<br> 5.属性值是0，省略单位，比如不要写成0px，直接是0<br> 6.块内容缩进<br> 7.禁止 img的 src取值为空。延迟加载的图片也要增加默认的 src</p><h2 id="6-介绍-Chrome-开发者工具的功能区"><a href="#6-介绍-Chrome-开发者工具的功能区" class="headerlink" title="6.介绍 Chrome 开发者工具的功能区"></a>6.介绍 Chrome 开发者工具的功能区</h2><p><img src="https:////upload-images.jianshu.io/upload_images/4769817-2c28e0a74cbb020a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>333.png</p><p>1是元素区，在这可以看到整个网页的结构<br> 2和12 都是控制台，录开发者开发过程中的日志信息，且可以作为与JS进行交互的命令行Shell<br> 3 是资源，这里可以看到各种你引入的js，主要就是用于调试js<br> 4 从发起网页页面请求Request后分析HTTP请求后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），可以根据这个进行网络性能优化<br> 5.时间线记录并分析在网站的生命周期内所发生的各类事件，以此可以提高网页的运行时间的性能。<br> 6.记录JS CPU执行时间细节、显示JS对象和相关的DOM节点的内存消耗、记录内存的分配细节。</p><p>7.记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表</p><p>8.安全：判断当前网页是否安全<br> 9.对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的CSS文件等</p><p>10.样式区域，可以直观的看到css<br> 11.适配区域，可以适配各种屏幕大小，一般用于调试页面自适应。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-CSS的全称是什么&quot;&gt;&lt;a href=&quot;#1-CSS的全称是什么&quot; class=&quot;headerlink&quot; title=&quot;1.CSS的全称是什么?&quot;&gt;&lt;/a&gt;1.CSS的全称是什么?&lt;/h2&gt;&lt;p&gt;CSS 指层叠样式表（Cascading Style Sheets）。通过CSS和HTML的结合可以实现表现与结构分离。从而提升工作效率，降低维护难度。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>小白进阶之Hexo主题优化</title>
    <link href="http://yoursite.com/2018/11/03/%E5%B0%8F%E7%99%BD%E8%BF%9B%E9%98%B6%E4%B9%8BHexo%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/03/小白进阶之Hexo主题优化/</id>
    <published>2018-11-03T07:46:18.000Z</published>
    <updated>2018-11-07T07:55:40.496Z</updated>
    
    <content type="html"><![CDATA[<p>写在正文之前的话：之前已经写了一篇hexo+github搭配个人博客的文章，如果不知道的可以先去看一下，今天写的是关于博客的优化。</p><p>在你存放的Hexo文件夹中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p><a id="more"></a><h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><blockquote><p>基本信息包括：博客标题、作者、描述、语言等等。</p></blockquote><p>打开 <strong>站点配置文件</strong> ，找到Site模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br><span class="line">language: 语言（简体中文是zh-Hans）</span><br><span class="line">timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</span><br></pre></td></tr></table></figure><p>关于 <strong>站点配置文件</strong> 中的其他配置可参考<a href="https://link.jianshu.com?t=https%3A%2F%2Fhexo.io%2Fzh-cn%2Fdocs%2Fconfiguration.html" target="_blank" rel="noopener">站点配置</a></p><h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><blockquote><p>菜单包括：首页、归档、分类、标签、关于等等</p></blockquote><p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 <strong>主题配置文件</strong> 找到<code>Menu Settings</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                          //首页</span><br><span class="line">  archives: /archives/ || archive          //归档</span><br><span class="line">  categories: /categories/ || th           //分类</span><br><span class="line">  tags: /tags/ || tags                     //标签</span><br><span class="line">  about: /about/ || user                   //关于</span><br><span class="line">  #schedule: /schedule/ || calendar        //日程表</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap        //站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat          //公益404</span><br></pre></td></tr></table></figure><p>看看你需要哪个菜单就把哪个取消注释打开就行了；<br> 关于后面的格式，以<code>archives: /archives/ || archive</code>为例：<br> <code>||</code> 之前的<code>/archives/</code>表示标题“归档”，关于标题的格式可以去<code>themes/next/languages/zh-Hans.yml</code>中参考或修改<br> <code>||</code>之后的<code>archive</code>表示图标，可以去<a href="https://link.jianshu.com?t=http%3A%2F%2Ffontawesome.io%2Ficons%2F" target="_blank" rel="noopener">Font Awesome</a>中查看或修改，Next主题所有的图标都来自Font Awesome。</p><h2 id="3、Next主题样式设置"><a href="#3、Next主题样式设置" class="headerlink" title="3、Next主题样式设置"></a>3、Next主题样式设置</h2><p>我们百里挑一选择了Next主题，不过Next主题还有4种风格供我们选择，打开 <strong>主题配置文件</strong> 找到<code>Scheme Settings</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure><p>4种风格大同小异，本人用的是Muse风格，你们可以选择自己喜欢的风格。</p><h2 id="4、侧栏设置以及社交小图标设置"><a href="#4、侧栏设置以及社交小图标设置" class="headerlink" title="4、侧栏设置以及社交小图标设置"></a>4、侧栏设置以及社交小图标设置</h2><blockquote><p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p></blockquote><p>打开 <strong>主题配置文件</strong> 找到<code>sidebar</code>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        //靠左放置</span><br><span class="line">  #position: right      //靠右放置</span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  #display: post        //默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">  display: always       //在所有页面中都显示</span><br><span class="line">  #display: hide        //在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #display: remove      //完全移除</span><br><span class="line"></span><br><span class="line">  offset: 12            //文章间距（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  b2t: false            //返回顶部按钮（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  scrollpercent: true   //返回顶部按钮的百分比</span><br></pre></td></tr></table></figure><p>搜索<code>social_icons:</code>, 在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p><h2 id="5、头像设置"><a href="#5、头像设置" class="headerlink" title="5、头像设置"></a>5、头像设置</h2><p>打开 <strong>主题配置文件</strong> 找到<code>Sidebar Avatar</code>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure><p>这是头像的路径，只需把你的头像命名为<code>header.jpg</code>（随便命名）放入<code>themes/next/source/images</code>中，将<code>avatar</code>的路径名改成你的头像名就OK啦！</p><h2 id="6、设置RSS"><a href="#6、设置RSS" class="headerlink" title="6、设置RSS"></a>6、设置RSS</h2><p>1、先安装 <a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2、打开 <strong>站点配置文件</strong> 找到<code>Extensions</code>在下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># RSS订阅</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure><p>3、打开 <strong>主题配置文件</strong> 找到<code>rss</code>，设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h2 id="7、添加分类模块"><a href="#7、添加分类模块" class="headerlink" title="7、添加分类模块"></a>7、添加分类模块</h2><p>1、新建一个分类页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>2、你会发现你的<code>source</code>文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code><br> 3、打开 <strong>主题配置文件</strong> 找到<code>menu</code>，将categorcies取消注释<br> 4、把文章归入分类只需在文章的顶部标题下方添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中<br> 举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure><h2 id="8、添加标签模块"><a href="#8、添加标签模块" class="headerlink" title="8、添加标签模块"></a>8、添加标签模块</h2><p>1、新建一个标签页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>2、你会发现你的<code>source</code>文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code><br> 3、打开 <strong>主题配置文件</strong> 找到<code>menu</code>，将tags取消注释<br> 4、把文章添加标签只需在文章的顶部标题下方添加<code>tags</code>字段，即可自动创建标签名并归入对应的标签中<br> 举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h2 id="9、添加关于模块"><a href="#9、添加关于模块" class="headerlink" title="9、添加关于模块"></a>9、添加关于模块</h2><p>1、新建一个关于页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>2、你会发现你的<code>source</code>文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。<br> 3、打开 <strong>主题配置文件</strong> 找到<code>menu</code>，将about取消注释</p><h2 id="10、添加搜索功能"><a href="#10、添加搜索功能" class="headerlink" title="10、添加搜索功能"></a>10、添加搜索功能</h2><p>1、安装 <a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fflashlab%2Fhexo-generator-search" target="_blank" rel="noopener">hexo-generator-searchdb</a> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2、打开 <strong>站点配置文件</strong> 找到<code>Extensions</code>在下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>3、打开 <strong>主题配置文件</strong> 找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p><h2 id="11、添加阅读全文按钮"><a href="#11、添加阅读全文按钮" class="headerlink" title="11、添加阅读全文按钮"></a>11、添加阅读全文按钮</h2><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>其后面的部分就不会显示了，只能点击阅读全文才能看</p><h2 id="12、修改文章内链接文本样式"><a href="#12、修改文章内链接文本样式" class="headerlink" title="12、修改文章内链接文本样式"></a>12、修改文章内链接文本样式</h2><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-9cd87c2cc2d0c78f.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/360/format/webp" alt="img"></p><p>效果图</p><p> 打开文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes/next/source/css/_common/components/post/post.styl</span><br></pre></td></tr></table></figure><p>，在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="13、设置网站缩略图标"><a href="#13、设置网站缩略图标" class="headerlink" title="13、设置网站缩略图标"></a>13、设置网站缩略图标</h2><blockquote><p>从网上看了很多设置方法都是说把favicon.ico放到站点目录的source目录下就可以了，可是我试了好多遍，并不行。</p></blockquote><p>我的设置方法是这样的：把你的图片（png或jpg格式，不是favicon.ico）放在<code>themes/next/source/images</code>里，然后打开 <strong>主题配置文件</strong> 找到<code>favicon</code>，将<code>small、medium、apple_touch_icon</code>三个字段的值都设置成<code>/images/图片名.jpg</code>就可以了，其他字段都注释掉。</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-61a0cc555a25548e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/344/format/webp" alt="img"></p><h2 id="14、设置文章字体的颜色、大小"><a href="#14、设置文章字体的颜色、大小" class="headerlink" title="14、设置文章字体的颜色、大小"></a>14、设置文章字体的颜色、大小</h2><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-e471abbb2b1f459f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/477/format/webp" alt="img"></p><p>效果图</p><p>如果想设置某一句的颜色或大小，只需用html语法写出来就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接下来就是见证奇迹的时刻</span><br><span class="line">&lt;font color=&quot;#FF0000&quot;&gt; 我可以设置这一句的颜色哈哈 &lt;/font&gt; </span><br><span class="line">&lt;font size=6&gt; 我还可以设置这一句的大小嘻嘻 &lt;/font&gt; </span><br><span class="line">&lt;font size=5 color=&quot;#FF0000&quot;&gt; 我甚至可以设置这一句的颜色和大小呵呵&lt;/font&gt;</span><br></pre></td></tr></table></figure><h2 id="15、设置文字居中"><a href="#15、设置文字居中" class="headerlink" title="15、设置文字居中"></a>15、设置文字居中</h2><p>设置方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;这一行需要居中&lt;/center&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：简书中此方法无效</p></blockquote><h2 id="16、添加评论系统"><a href="#16、添加评论系统" class="headerlink" title="16、添加评论系统"></a>16、添加评论系统</h2><blockquote><p>目前国内比较有名的多说、网易云跟帖评论系统都已停止服务了，国外的Disqus评论系统还得需要翻墙，所以不推荐使用，剩下的还有搜狐畅言、友言、来必力等。<br> 本来想使用畅言的，结果注册完之后还得要求备案，我只想说F开头的那个单词，果断放弃。<br> 后来选择了友言</p></blockquote><p>1、进入<a href="https://link.jianshu.com?t=http%3A%2F%2Fwww.uyan.cc" target="_blank" rel="noopener">友言官网</a>注册、登录步骤我就不介绍了<br> 2、登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的<code>uid=1234567</code><br> 3、打开 <strong>主题配置文件</strong> 找到<code>youyan_uid</code>将值设置为上面的uid就可以了</p><h2 id="17、添加站点访问计数"><a href="#17、添加站点访问计数" class="headerlink" title="17、添加站点访问计数"></a>17、添加站点访问计数</h2><p>站点访问计数有名的就是<a href="https://link.jianshu.com?t=http%3A%2F%2Fbusuanzi.ibruce.info" target="_blank" rel="noopener">不蒜子</a>，使用起来非常方便<br> 1、安装脚本<br> 打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&apos;display:none&apos;&gt;</span><br><span class="line">    本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt; 次</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot; style=&apos;display:none&apos;&gt;</span><br><span class="line">    有&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人看过我的博客啦</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>添加的位置如下图，可自行根据个人喜好更换位置</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-690e9b69d7901c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/718/format/webp" alt="img"></p><p> 2、以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 </p><p>themes/next/layout/_macro/post.swig</p><p>，在第一行增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_pv</span><br></pre></td></tr></table></figure><p>字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure><p>然后将这段代码插入到里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if is_pv %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">  &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次阅读</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>插入的位置</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-bdbc90ff2c4285a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/631/format/webp" alt="img"></p><p> 然后再打开 </p><p>themes/next/layout/post.swig</p><p>，这个文件是文章的模板，给render方法传入参数（对应刚才添加的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_pv</span><br></pre></td></tr></table></figure><p>字段）</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-8418d415c31ff529.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/659/format/webp" alt="img"></p><p> 最后再打开 </p><p>themes/next/layout/index.swig</p><p>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-5d89c00ea392bf01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/632/format/webp" alt="img"></p><p> OK！设置完毕。</p><h2 id="18、去掉文章目录标题的自动编号"><a href="#18、去掉文章目录标题的自动编号" class="headerlink" title="18、去掉文章目录标题的自动编号"></a>18、去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br> 打开<strong>主题配置文件</strong>，找到</p><p><img src="https:////upload-images.jianshu.io/upload_images/4120931-dcd17d644851e21f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/663/format/webp" alt="img"></p><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><p>即可</p><h2 id="19、添加动态背景"><a href="#19、添加动态背景" class="headerlink" title="19、添加动态背景"></a>19、添加动态背景</h2><p>如果 next 主题在 5.1.1 以上的话，直接在主题配置文件中找到 canvas_nest: false，把它改为 canvas_nest: true 就行了（注意分号后面要加一个空格）。</p><h4 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改<code>_layout.swig</code></h4><p>打开 <code>next/layout/_layout.swig</code><br>在 <code>&lt; /body&gt;</code>之前添加代码(注意不要放在&lt; /head&gt;的后面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开 <code>/next/_config.yml</code>,在里面添加如下代码：(可以放在最后面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><p>到此就结束了，运行 <code>hexo clean</code>，然后运行 <code>hexo g</code>,然后运行 <code>hexo s</code>，最后打开浏览器在浏览器的地址栏输入 <code>localhost:4000</code> 就能看到效果了\（￣︶￣）/</p><hr><h4 id="如果你感觉默认的线条太多的话"><a href="#如果你感觉默认的线条太多的话" class="headerlink" title="如果你感觉默认的线条太多的话"></a>如果你感觉默认的线条太多的话</h4><h5 id="可以这么设置-gt"><a href="#可以这么设置-gt" class="headerlink" title="可以这么设置====&gt;"></a>可以这么设置====&gt;</h5><p>在上一步修改 <code>_layout.swig</code>中，把刚才的这些代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h5><ul><li><code>color</code> ：线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>: 线条的总数量, 默认: <code>150</code></li><li><code>zIndex:</code> 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li></ul><h2 id="20、更多"><a href="#20、更多" class="headerlink" title="20、更多"></a>20、更多</h2><p>1、还有其他更多的主题配置，请查看<a href="https://link.jianshu.com?t=http%3A%2F%2Ftheme-next.iissnan.com%2Ftheme-settings.html" target="_blank" rel="noopener">主题配置</a><br> 2、还有其他更多的插件，请查看<a href="https://link.jianshu.com?t=https%3A%2F%2Fhexo.io%2Fplugins%2F" target="_blank" rel="noopener">Hexo插件</a></p><p>如果你还想知道更多的插件设置你还可以看这个：<a href="https://segmentfault.com/a/1190000009544924。" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924。</a></p><p>插件改的越多出错的bug风险就越大，毕竟对于小白来说可能一不小心两个插件冲突了自己不知道怎么办，所以尽量选择自己喜欢的就好了，网上相似的教程也有很多，大家慢慢找，最后附上一个自己的<a href="https://neil94n.github.io/" target="_blank" rel="noopener">博客地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在正文之前的话：之前已经写了一篇hexo+github搭配个人博客的文章，如果不知道的可以先去看一下，今天写的是关于博客的优化。&lt;/p&gt;
&lt;p&gt;在你存放的Hexo文件夹中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为&lt;strong&gt;站点配置文件&lt;/strong&gt;， 后者称为&lt;strong&gt;主题配置文件&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>一些软件的安装</title>
    <link href="http://yoursite.com/2018/11/01/%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/11/01/一些软件的安装与配置/</id>
    <published>2018-11-01T01:13:53.000Z</published>
    <updated>2018-11-07T07:55:23.252Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Git Bash 的安装与配置</li><li>Node.js 的安装与配置</li><li>Git 的安装与配置</li><li>VSCode 的安装与配置</li></ul><a id="more"></a><h3 id="Git-Bash-的安装与配置"><a href="#Git-Bash-的安装与配置" class="headerlink" title="Git Bash 的安装与配置"></a>Git Bash 的安装与配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>从官网下载（算了，太慢了）</li><li>百度网盘：链接: <a href="https://pan.baidu.com/s/1nu99KWp" target="_blank" rel="noopener">https://pan.baidu.com/s/1nu99KWp</a> 密码: jfdf</li></ol><p>双击安装，注意每一步的选项要参考下面的图（如果没有对应的图，就直接下一步）</p><p><img src="https://jscode.me/uploads/default/original/1X/bc39461fc9f4187a18871c5d4970f32b0adfaca5.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/0cd62e9a327e410bb03c01b547f6ea3338f60bbf.jpg" alt="img"></p><p>下面的路径可以随便填：</p><p><img src="https://jscode.me/uploads/default/original/1X/eaf3227a1d1156cac7e8b16869a5dd834613a620.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/43caebd30d10c44b5229f5b00e321988f5715784.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/0c6c62d592a6c19b5a9d95c91a4d89c8c8c9b16d.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/d576a598c9c6164a2ce2eefe82781232a15805cd.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/5fe46b202e10af544d920925d4a5847c31a81191.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/1X/32e071f4b3179f1262482fbc4eff321ca3d29f24.jpg" alt="img"></p><p>好了，安装完成。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>安装成功之后，需要设置一下外观：</p><p><img src="https://jscode.me/uploads/default/original/2X/9/97da20950abae1f161d480b2bc8599a3b0a95f3e.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/2X/5/5a63af363cb8e01b05283d31d827bf3163aca819.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/2X/4/445f661f9841aa1855e06312b0788f9bd84e7fd6.jpg" alt="img"></p><p><img src="https://jscode.me/uploads/default/original/2X/f/f99beda047c9c97d82a7e64d36f9084d4110a3c9.jpg" alt="img"></p><p>关闭重启 Git Bash 即可。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="第一种使用方式"><a href="#第一种使用方式" class="headerlink" title="第一种使用方式"></a>第一种使用方式</h5><p>找一个目录，在目录上右键点击，然后选中「Git Bash Here」，即可用 Git Bash 打开这个目录。</p><p>试试输入 <code>touch 1.txt</code>，回车后看看目录里是不是多了一个文件。</p><h5 id="第二种使用方式"><a href="#第二种使用方式" class="headerlink" title="第二种使用方式"></a>第二种使用方式</h5><p>直接打开 Git Bash，输入 <code>cd ~/Desktop</code> 即可来到桌面所在的目录。</p><p>试试输入 <code>touch 1.txt</code>，回车后看看桌面上是不是多了一个文件。</p><h5 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h5><p>下节课我们会专门学习命令行，你可以试试下面几个简单的命令：</p><ul><li>创建目录：<code>mkdir my-dir</code></li><li>删除目录：<code>rm -r my-dir</code></li><li>创建文件：<code>echo &quot;hello&quot; &gt; newFile.txt</code></li><li>删除文件：<code>rm newFile.txt</code></li></ul><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p><a href="https://jingyan.baidu.com/article/1876c8529390eb890b1376b6.html" target="_blank" rel="noopener">解决git bash无法复制和黏贴</a></p><h3 id="Node-js-的安装与配置"><a href="#Node-js-的安装与配置" class="headerlink" title="Node.js 的安装与配置"></a>Node.js 的安装与配置</h3><ol><li>从<a href="https://nodejs.org/" target="_blank" rel="noopener">官网</a>下载安装包</li><li>百度网盘下载：链接: <a href="https://pan.baidu.com/s/1cMxJcU" target="_blank" rel="noopener">https://pan.baidu.com/s/1cMxJcU</a> 密码: xfyj</li></ol><p>安装了之后</p><ul><li><strong>千万别</strong> 点击 Node.js 的图标</li><li><strong>千万别</strong> 点击 Node.js 的图标</li><li><strong>千万别</strong> 点击 Node.js 的图标</li></ul><p>别问为什么，别点就是了。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>打开 Git Bash，依次输入以下命令，按回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br><span class="line">npm config set loglevel http</span><br><span class="line">npm config set progress false</span><br></pre></td></tr></table></figure><p>npm 的配置被存储在 <code>~/.npmrc</code>，你可以随时改。</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><h5 id="npm-安装命令行小工具"><a href="#npm-安装命令行小工具" class="headerlink" title="npm 安装命令行小工具"></a>npm 安装命令行小工具</h5><p>装了 Node.js 之后我们就可以在 Git Bash 里面使用 node 和 npm 这两个命令了，试试看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which node</span><br><span class="line">which npm</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>依次输出看看你得到什么结果。</p><p>接下来跟大家展示一下 npm 的威力。我们可以用 npm 的翻译工具做一个随时可用的小字典，这个小工具的名字叫做 fanyi。</p><p>运行 <code>npm i -g fanyi</code> 即可安装 fanyi，安装完成之后，输入 <code>fanyi frontend</code> 就可以看到对应的中文释义了！</p><p>是不是很帅呢？！</p><h5 id="node-的使用"><a href="#node-的使用" class="headerlink" title="node 的使用"></a>node 的使用</h5><ol><li>进入 Git Bash</li><li>输入 <code>node</code>，回车，就可以进入 node 运行环境，这个时候我们就可以写 JS 了</li><li>试试写最简单的 JS 语句，比如 <code>1+2</code>，回车</li><li><code>2 * 8</code>，回车</li></ol><p>这就是 node 的第一种使用方式</p><h5 id="node-的另一种使用方式"><a href="#node-的另一种使用方式" class="headerlink" title="node 的另一种使用方式"></a>node 的另一种使用方式</h5><p>我们可以先创建一个 JS 文件，然后让 node 运行</p><ol><li>来到桌面：<code>cd ~/Desktop</code></li><li>新建一个目录用来玩耍：<code>mkdir hello-node</code></li><li>进入这个目录：<code>cd hello-node</code></li><li>新建一个有内容的 JS 文件：<code>echo &quot;console.log(&#39;Hi, Node.js&#39;)&quot; &gt; main.js</code>，那么 main.js 就新建成功了</li><li>输入 <code>node main.js</code>，回车，node 就会执行这个 main.js 文件，你会看到「Hi, Node.js」字样</li><li>玩完了，删除 hello-node：<code>cd .. ; rm -rf hello-node</code></li></ol><h3 id="Git-的安装与配置"><a href="#Git-的安装与配置" class="headerlink" title="Git 的安装与配置"></a>Git 的安装与配置</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>不需要安装，Git Bash 内置了 Git 命令，Git Bash 还内置了以下命令：</p><ul><li>ls</li><li>mkdir</li><li>cp</li><li>mv</li></ul><p>等等，大概有几十个命令，Git Bash 其实是一个 Bash，不是 Git。</p><p>Git Bash 给我们提供了一个虚拟的 Linux 环境，这样我们就不用忍受 Windows 里面垃圾一般的命令行体验了。</p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>请在命令行运行这五句话！！！一定要运行这五句话，不然 git 就不能用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的英文名字                                      #方便产品经理找（怼）你</span><br><span class="line">git config --global user.email 你的常用邮箱                                      #方便产品经理找（怼）你</span><br><span class="line">git config --global push.default simple                                             # 本来我写的是 matching，不过想了想可能 simple 更好</span><br><span class="line">git config --global core.quotepath false                                           #防止文件名变成数字</span><br><span class="line">git config --global core.editor &quot;vim&quot;                                                   # 使用vim编辑提交信息</span><br></pre></td></tr></table></figure><p>另外很重要的一点！你自己运行 git 的时候注意一下：git remote add origin 后面的地址，不允许使用 https 开头的地址，见下图</p><p><img src="https://video.jirengu.com/xdml/image/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2018-5-27-1-20-38.png" alt="记得点击 SSH">记得点击 SSH</p><h3 id="VSCode-的安装与配置"><a href="#VSCode-的安装与配置" class="headerlink" title="VSCode 的安装与配置"></a>VSCode 的安装与配置</h3><p>从<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网下载</a>安装包</p><p>安装时把以下选项选中：</p><p><img src="https://video.jirengu.com/FjQCNyOKpxFXPlDvhx3XdTHQzicy" alt="图片">图片</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><ol><li>找个地方新建一个目录（目录名不要中文），假设目录名为 vs-demo</li><li>右键点击该目录，open with code</li><li>使用 Ctrl+Shift+E 打开资源管理器，在 vs-demo 目录里新建 HTML 文件，文件名为 index.html</li><li>在 index.html 依次输入：英文感叹号、<kbd>回车</kbd> 键，即可看到一个完整的 HTML 页面<ul><li>由于 vscode 时常更新，如果 <kbd>回车</kbd> 键不行，就试试 <kbd>Tab</kbd> 键</li></ul></li></ol><p>这种快捷写法叫做 Emmet，目前所有的前端编辑器都支持 Emmet。换句话说，如果一个编辑器没有默认支持 Emmet，你就可以卸载这款编辑器了（比如 Sublime Text 括弧笑）。</p><p>关于 Emmet 的更多快捷写法，见：</p><ol><li><a href="https://docs.emmet.io/" target="_blank" rel="noopener">官网的视频介绍</a></li><li><a href="https://docs.emmet.io/cheat-sheet/" target="_blank" rel="noopener">Emmet 作弊表</a></li></ol><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p>VSCode 的配置方式就写编辑一个配置文件，打开「文件 - 首选项 - 设置」，对应快捷键为 <kbd>Ctrl</kbd> + <kbd>,</kbd></p><p><img src="https://video.jirengu.com/FowXVYwXqNE0v2nnsSADpQHeq75T" alt="图片">图片</p><p>左侧为系统默认配置项，右侧为你要覆盖的配置项。把你要修改的项从左边拷贝到右边，然后保存，即可生效。</p><h4 id="设置字体与字号"><a href="#设置字体与字号" class="headerlink" title="设置字体与字号"></a>设置字体与字号</h4><p>在右侧文件中添加一行（注意末尾要有英文逗号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.fontSize&quot;: 18,</span><br></pre></td></tr></table></figure><p>保存，字号就变大了。</p><p>设置字体也是类似，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Consolas, &apos;Courier New&apos;, monospace&quot;,</span><br></pre></td></tr></table></figure><p>即可将字体设置为你想要的。这里推荐「<a href="http://www.iplaysoft.com/top10-programming-fonts.html" target="_blank" rel="noopener">10大最适合编程的字体推荐下载</a>」，够你玩一上午了。我用的编程字体一般是 Source Code Pro 和 M Plus 这两款。</p><p>其实 VSCode 默认的配置就挺好的。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>VSCode 自带 Emmet、Git 继承和 JS 调试功能（后续会讲到），已经十分完善了，但是还是有一些特殊的需求，这个时候我们就可以安装第三方插件了。由于第三方插件不是微软生产的，所以质量良莠不齐，请注意甄别。</p><p>如果你发现 VSCode 没有 Git 功能：</p><p><img src="https://video.jirengu.com/xdml/image/3ac7c224-c23d-491f-84b5-4fabfbeab9b8/2018-10-26-22-48-39.png" alt="截图">截图</p><p>那么你只需要在项目目录运行 git init 来激活 git 功能即可。</p><h4 id="安装-open-in-browser"><a href="#安装-open-in-browser" class="headerlink" title="安装 open in browser"></a>安装 open in browser</h4><p>按 Ctrl + Shift + X 打开扩展面板，然后输入 open in browser，点击第一个结果的「安装」按钮，稍等片刻就安装好了（相比之下 Sublime 的插件安装体验就差很多）。</p><p>然后你在任意 HTML 文件右键，就可以看到 Open In Default Browser 这个按钮了，点就试试看。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Git Bash 的安装与配置&lt;/li&gt;
&lt;li&gt;Node.js 的安装与配置&lt;/li&gt;
&lt;li&gt;Git 的安装与配置&lt;/li&gt;
&lt;li&gt;VSCode 的安装与配置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+Github搭建个人博客</title>
    <link href="http://yoursite.com/2018/10/31/%E4%BD%BF%E7%94%A8Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/10/31/使用Hexo+Github搭建个人博客/</id>
    <published>2018-10-31T00:11:25.000Z</published>
    <updated>2018-11-07T07:55:33.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ul><li><p>GitHub创建个人仓库</p></li><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>更换主题</p></li><li><p>初识MarkDown语法</p></li></ul><p><strong>GitHub创建个人仓库</strong></p><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io,这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：Nein94n.github.io</p><a id="more"></a><p><strong>安装Git</strong></p><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://link.zhihu.com/?target=http%3A//weibo.com/liaoxuefeng" target="_blank" rel="noopener">廖雪峰</a>老师的Git教程：<a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> 从Git官网下载：<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/download/win" target="_blank" rel="noopener">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><p><img src="https://pic1.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_hd.jpg" alt="img"></p><p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码</p><p>运行 <code>cat ~/.ssh/id_rsa.pub</code>，得到一串东西，完整的复制这串东西</p><p>打开<a href="https://link.zhihu.com/?target=https%3A//github.com/settings/keys" target="_blank" rel="noopener">GitHub_Settings_keys</a> 页面，新建new SSH Key</p><p><img src="https://pic3.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_hd.jpg" alt="img"></p><p>Title为标题，任意填即可，在Key里面粘贴你刚才输入命令行得到的那串东西，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，运行 <code>ssh -T git@github.com</code>，你可能会看到这样的提示：</p><p><img src="https://video.jirengu.com/FtfPAJz5jxIhUopvXPmHMAbsolXM" alt="图片">图片</p><p>输入 yes 回车……问你话你就答，别傻在那了</p><p>然后如果你看到 <code>Permission denied (publickey).</code> 就说明你失败了，请重来，是的，重来；如果你看到 <code>Hi Neil94n! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 就说明你成功了！</p><p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><p><strong>安装Node.js</strong></p><p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><p><img src="file:///C:\Users\Administrator\AppData\Roaming\Tencent\Users\417095066\TIM\WinTemp\RichOle\NE}SEV]H{X7S4546E[T}A0Z.png" alt="img"></p><p>检测npm是否安装成功，在命令行中输入npm -v :</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1541296663382.png" alt="1541296663382"></p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><p><strong>安装Hexo</strong></p><ol><li><p>进入一个安全的目录，比如 <code>cd ~/Desktop</code> 或者 <code>cd ~/Documents</code>，别在根目录 / 瞎搞。以后所有的教程第一步都是「进入一个安全的目录，别在根目录瞎搞」，只有 ~ 里面的目录是你能碰的！</p></li><li><p><code>npm install -g hexo-cli</code>，安装 Hexo</p></li><li><p><code>hexo init myBlog</code></p></li><li><p><code>cd myBlog</code></p></li><li><p><code>npm i</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 开博大吉</span><br></pre></td></tr></table></figure><p>，你会看到一个 md 文件的路径</p><p><img src="https://video.jirengu.com/FqHIo4pU6kbk3R66KdlMwYJaAbQn" alt="Windows 的路径中的 \ 需要变成 / 才行哦">Windows 的路径中的 \ 需要变成 / 才行哦</p><p>Windows 的路径中的 \ 需要变成 / 才行哦</p><p>Windows 的路径中的 \ 需要变成 / 才行哦</p><p>Windows 的路径中的 \ 需要变成 / 才行哦</p></li><li><p><code>start xxxxxxxxxxxxxxxxxxx.md</code>，编辑这个 md 文件，内容自己想（Ubuntu 系统用 <code>xdg-open xxxxxxxxxxxxxxxxxxx.md</code> 命令）</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start _config.yml</span><br></pre></td></tr></table></figure><p>，编辑网站配置</p><ol><li>把第 6 行的 title 改成你想要的名字</li><li>把第 9 行的 author 改成你的大名</li><li>把最后一行的 type 改成 <code>type: git</code></li><li>在最后一行后面新增一行，左边与 type 平齐，加上一行 <code>repo: 仓库地址</code> （请将仓库地址改为「你的用户名.github.io」对应的仓库地址，仓库地址以 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: 开头你知道吧？不知道？不知道的话现在你知道了）</li><li>第 4 步的 repo: 后面有个空格，不要眼瞎。</li></ol></li><li><p><code>npm install hexo-deployer-git --save</code>，安装 git 部署插件</p></li><li><p><code>hexo deploy</code></p></li><li><p>进入「你的用户名.github.io」对应的 repo，打开 GitHub Pages 功能，如果已经打开了，你应该会看到一个预览链接</p></li><li><p>用浏览器访问「预览链接/index.html」就应该看到了你的博客！（GitHub Pages 存在延迟，如果没看到，过三分钟再刷新看看）</p></li></ol><p><strong>更换主题</strong></p><ol><li><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a> 上面有主题合集</p></li><li><p>随便找一个主题，进入主题的 GitHub 首页，比如我找的是 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p></li><li><p>复制它的 SSH 地址或 HTTPS 地址，假设地址为 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:iissnan/hexo-theme-next.git</p></li><li><p><code>cd themes</code></p></li><li><p><code>git clone git@github.com:iissnan/hexo-theme-next.git</code></p></li><li><p><code>cd ..</code></p></li><li><p>将 _config.yml 的第 75 行改为 <code>theme: hexo-theme-next</code>，保存</p></li><li><p><code>hexo generate</code></p></li><li><p><code>hexo deploy</code></p></li><li><p>等一分钟，然后刷新你的博客页面，你会看到一个新的外观。如果不喜欢这个主题，就回到第 1 步，重选一个主题。</p></li></ol><p><strong>初识Markdown语法</strong></p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http%3A//www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http%3A//code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http%3A//www.markdownpad.com/" target="_blank" rel="noopener">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><p>如果你觉得这样太简单了，你还可以去看看<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/，小白的话建议还是先把基础功能弄明白了在想着进阶吧。" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/，小白的话建议还是先把基础功能弄明白了在想着进阶吧。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建步骤&quot;&gt;&lt;a href=&quot;#搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建步骤&quot;&gt;&lt;/a&gt;搭建步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub创建个人仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Node.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Hexo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更换主题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初识MarkDown语法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GitHub创建个人仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：&lt;a href=&quot;https://github.com/join?source=header-home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/join?source=header-home&lt;/a&gt; 点击GitHub中的New repository创建新仓库，仓库名应该为：&lt;strong&gt;用户名&lt;/strong&gt;.github.io,这个&lt;strong&gt;用户名&lt;/strong&gt;使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：Nein94n.github.io&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HTTP入门</title>
    <link href="http://yoursite.com/2018/10/30/HTTP%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/10/30/HTTP入门/</id>
    <published>2018-10-30T12:06:06.000Z</published>
    <updated>2018-11-07T07:54:44.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP?"></a>什么是HTTP?</h3><p><strong>超文本传输协议</strong>（<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E6%96%87" target="_blank" rel="noopener">英文</a>：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，<a href="https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB" target="_blank" rel="noopener">缩写</a>：<strong>HTTP</strong>）是一种用于分布式、协作式和<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E5%AA%92%E9%AB%94" target="_blank" rel="noopener">超媒体</a>信息系统的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" target="_blank" rel="noopener">应用层协议</a><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1" target="_blank" rel="noopener">[1]</a>。HTTP是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2" target="_blank" rel="noopener">万维网</a>的数据通信的基础。</p><p>设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML</a>页面的方法。通过HTTP或者HTTPS协议请求的资源由<a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6" target="_blank" rel="noopener">统一资源标识符</a>（Uniform Resource Identifiers，URI）来标识。</p><p>HTTP的发展是由<a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E" target="_blank" rel="noopener">蒂姆·伯纳斯-李</a>于1989年在<a href="https://zh.wikipedia.org/wiki/%E6%AD%90%E6%B4%B2%E6%A0%B8%E5%AD%90%E7%A0%94%E7%A9%B6%E7%B5%84%E7%B9%94" target="_blank" rel="noopener">欧洲核子研究组织</a>（CERN）所发起。HTTP的标准制定由<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2%E5%8D%94%E6%9C%83" target="_blank" rel="noopener">万维网协会</a>（World Wide Web Consortium，W3C）和<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84" target="_blank" rel="noopener">互联网工程任务组</a>（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的<a href="https://zh.wikipedia.org/wiki/RFC" target="_blank" rel="noopener">RFC</a>，其中最著名的是1999年6月公布的 <a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC 2616</a>，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。</p><a id="more"></a><h2 id="协议概述"><a href="#协议概述" class="headerlink" title="协议概述"></a>协议概述</h2><p>HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（<a href="https://zh.wikipedia.org/wiki/TCP" target="_blank" rel="noopener">TCP</a>）。通过使用<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E7%80%8F%E8%A6%BD%E5%99%A8" target="_blank" rel="noopener">网页浏览器</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB" target="_blank" rel="noopener">网络爬虫</a>或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认<a href="https://zh.wikipedia.org/wiki/%E7%AB%AF%E5%8F%A3" target="_blank" rel="noopener">端口</a>为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="noopener">代理服务器</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3" target="_blank" rel="noopener">网关</a>或者<a href="https://zh.wikipedia.org/wiki/%E9%9A%A7%E9%81%93" target="_blank" rel="noopener">隧道</a>（tunnel）。</p><p>尽管<a href="https://zh.wikipedia.org/wiki/TCP/IP" target="_blank" rel="noopener">TCP/IP</a>协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p><p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><ul><li><p>GET</p><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F" target="_blank" rel="noopener">Web Application</a>中。其中一个原因是GET可能会被<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E8%9C%98%E8%9B%9B" target="_blank" rel="noopener">网络蜘蛛</a>等随意访问。参见<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E5%AE%89%E5%85%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">安全方法</a></p></li><li><p>HEAD</p><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</p></li><li><p>POST</p><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p></li><li><p>PUT</p><p>向指定资源位置上传其最新内容。</p></li><li><p>DELETE</p><p>请求服务器删除Request-URI所标识的资源。</p></li><li><p>TRACE</p><p>回显服务器收到的请求，主要用于测试或诊断。</p></li><li><p>OPTIONS</p><p>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</p></li><li><p>CONNECT</p><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</p></li></ul><p>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#405" target="_blank" rel="noopener">状态码405</a>（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#501" target="_blank" rel="noopener">状态码501</a>（Not Implemented）。</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>所有HTTP响应的第一行都是<strong>状态行</strong>，依次是当前HTTP版本号，3位数字组成的<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">状态代码</a>，以及描述状态的短语，彼此由空格分隔。</p><p>状态代码的第一个数字代表当前响应的类型：</p><ul><li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#1xx%E6%B6%88%E6%81%AF" target="_blank" rel="noopener">1xx消息</a>——请求已被服务器接收，继续处理</li><li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#2xx%E6%88%90%E5%8A%9F" target="_blank" rel="noopener">2xx成功</a>——请求已成功被服务器接收、理解、并接受</li><li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#3xx%E9%87%8D%E5%AE%9A%E5%90%91" target="_blank" rel="noopener">3xx重定向</a>——需要后续操作才能完成这一请求</li><li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#4xx%E8%AF%B7%E6%B1%82%E9%94%99%E8%AF%AF" target="_blank" rel="noopener">4xx请求错误</a>——请求含有词法错误或者无法被执行</li><li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF" target="_blank" rel="noopener">5xx服务器错误</a>——服务器在处理某个正确请求时发生错误</li></ul><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>下面是一个HTTP客户端与服务器之间会话的例子，运行于<a href="http://www.baidu.com，端口80。我们可以通过Chrome开发者工具查看HTTP的请求与响应内容。" target="_blank" rel="noopener">www.baidu.com，端口80。我们可以通过Chrome开发者工具查看HTTP的请求与响应内容。</a></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>首先我们需要打开电脑的命令行工具输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H <span class="string">"Neil : xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><h5 id="请求的内容为："><a href="#请求的内容为：" class="headerlink" title="请求的内容为："></a>请求的内容为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.55.1</span><br><span class="line">Accept: */*</span><br><span class="line">Neil: xxx</span><br></pre></td></tr></table></figure><p>我们还可以通过其他的方法来发送请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">"1234567890"</span> -s -v -H <span class="string">"Neil : xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><h5 id="请求的内容为：-1"><a href="#请求的内容为：-1" class="headerlink" title="请求的内容为："></a>请求的内容为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.55.1</span><br><span class="line">Accept: */*</span><br><span class="line">Neil: xxx</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">[10 bytes data]</span><br></pre></td></tr></table></figure><h5 id="请求的格式："><a href="#请求的格式：" class="headerlink" title="请求的格式："></a>请求的格式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure><p>我们可以得出结论一个完整的HTTP请求包含4个部分，分别为请求行、请求头、空行、其他的消息体，其中第四部分有时也可以为空。</p><h4 id="如何用-Chrome-查看请求内容"><a href="#如何用-Chrome-查看请求内容" class="headerlink" title="如何用 Chrome 查看请求内容"></a>如何用 Chrome 查看请求内容</h4><ol><li>打开 Chrome浏览器F12进入开发者工具点击Network</li><li>地址栏输入网址，比如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>在 Network 点击，查看 request，点击「view source」</li><li>如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到了</li></ol><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。</p><h5 id="响应示例"><a href="#响应示例" class="headerlink" title="响应示例"></a>响应示例</h5><p>上面两个请求的响应分别为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2443</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class="line">Etag: &quot;5886041d-98b&quot;</span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">[2443 bytes data]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 17931</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date:  Thu, 01 Nov 2018 13:08:49 GMT</span><br><span class="line">Etag: &quot;54d9749e-460b&quot;</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line"></span><br><span class="line">[3824 bytes data]</span><br></pre></td></tr></table></figure><ol><li>GET 请求和 POST 请求对应的响应可以一样，也可以不一样</li><li>响应的第四部分可以很长很长很长</li></ol><h5 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><h4 id="如何用-Chrome-查看响应内容"><a href="#如何用-Chrome-查看响应内容" class="headerlink" title="如何用 Chrome 查看响应内容"></a>如何用 Chrome 查看响应内容</h4><ol><li>打开 Chrome浏览器F12进入开发者工具点击Network</li><li>地址栏输入网址，比如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>在 Network 点击，查看 Response Headers，点击「view source」</li><li>如果有请求的第四部分，点击查看Response或者Preview就可以了</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是HTTP&quot;&gt;&lt;a href=&quot;#什么是HTTP&quot; class=&quot;headerlink&quot; title=&quot;什么是HTTP?&quot;&gt;&lt;/a&gt;什么是HTTP?&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;超文本传输协议&lt;/strong&gt;（&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%8B%B1%E6%96%87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文&lt;/a&gt;：&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;缩写&lt;/a&gt;：&lt;strong&gt;HTTP&lt;/strong&gt;）是一种用于分布式、协作式和&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B6%85%E5%AA%92%E9%AB%94&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;超媒体&lt;/a&gt;信息系统的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;应用层协议&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[1]&lt;/a&gt;。HTTP是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;万维网&lt;/a&gt;的数据通信的基础。&lt;/p&gt;
&lt;p&gt;设计HTTP最初的目的是为了提供一种发布和接收&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTML&lt;/a&gt;页面的方法。通过HTTP或者HTTPS协议请求的资源由&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;统一资源标识符&lt;/a&gt;（Uniform Resource Identifiers，URI）来标识。&lt;/p&gt;
&lt;p&gt;HTTP的发展是由&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蒂姆·伯纳斯-李&lt;/a&gt;于1989年在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%AD%90%E6%B4%B2%E6%A0%B8%E5%AD%90%E7%A0%94%E7%A9%B6%E7%B5%84%E7%B9%94&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;欧洲核子研究组织&lt;/a&gt;（CERN）所发起。HTTP的标准制定由&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2%E5%8D%94%E6%9C%83&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;万维网协会&lt;/a&gt;（World Wide Web Consortium，W3C）和&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;互联网工程任务组&lt;/a&gt;（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的&lt;a href=&quot;https://zh.wikipedia.org/wiki/RFC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC&lt;/a&gt;，其中最著名的是1999年6月公布的 &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC 2616&lt;/a&gt;，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
