<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil&#39;s Blog</title>
  
  <subtitle>求知若饥 虚心似谷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-07T11:17:11.416Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Neil Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面对JavaScript吧!:07引用类型和深浅拷贝</title>
    <link href="http://yoursite.com/2018/12/07/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A07%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/12/07/面对JavaScript吧！：07引用类型和深浅拷贝/</id>
    <published>2018-12-07T04:02:33.000Z</published>
    <updated>2018-12-07T11:17:11.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本类型VS引用类型"><a href="#一、基本类型VS引用类型" class="headerlink" title="一、基本类型VS引用类型"></a>一、基本类型VS引用类型</h1><p><strong>注：</strong> 这里的内存，为虚拟内存</p><h3 id="1、引用类型："><a href="#1、引用类型：" class="headerlink" title="1、引用类型："></a>1、引用类型：</h3><ul><li>定义：保存在堆内存中的对象，变量中保存的实际上只是一个指针，这个指针执行内存中的另一个位置，由该位置保存对象</li><li>包括：对象、数组、函数、正则<a id="more"></a>假设变量中有一个函数，函数内东西特别多（或者有一个对象，对象里的数据特别大），这里可选堆的空白处存放函数、对象的数据（随机选择未使用的空白堆，随意变大变小），放在堆中的均为引用类型</li></ul><h3 id="2、基本类型（值类型）："><a href="#2、基本类型（值类型）：" class="headerlink" title="2、基本类型（值类型）："></a>2、基本类型（值类型）：</h3><ul><li>定义：指的是保存在栈内存中的简单字段（成块排列，栈，允许放进去拿出来）</li><li>包括：数值(number)、布尔值(boolean)、<code>null</code>、<code>undefined</code>、<code>string</code>(在赋值传递中会以引用类型的方式来处理)</li></ul><p>栈里面仍存有变量，只不过存放的不是数据，而是大数据地址，比如这个地址为<code>0x0011</code>,栈内存放的东西，均为可控、较小容量。从一个变量向另一个变量赋值基本类型时，会在该变量上创建一个新值，然后再把该值复制到为新变量分配的位置上。</p><h3 id="3、实例一：基本类型"><a href="#3、实例一：基本类型" class="headerlink" title="3、实例一：基本类型"></a>3、实例一：基本类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  var a </span><br><span class="line">  var b </span><br><span class="line">  var obj </span><br><span class="line">  var obj2</span><br><span class="line"> </span><br><span class="line"> a =  1;</span><br><span class="line"> b =  2; </span><br><span class="line"> var obj =  &#123; </span><br><span class="line">     name:  &apos;xiaoqin&apos;, </span><br><span class="line">     sex:  &apos;male&apos;, </span><br><span class="line">      age:  30,</span><br><span class="line">      friend:  &#123; </span><br><span class="line">name:  &apos;hello&apos;, age:  100 </span><br><span class="line">      &#125; </span><br><span class="line"> &#125;  </span><br><span class="line">var newObj =  &#123;&#125;</span><br><span class="line">     b = a; </span><br><span class="line">     console.log(b)</span><br><span class="line">  //返回1</span><br></pre></td></tr></table></figure><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908d2458a?w=478&amp;h=372&amp;f=jpeg&amp;s=13231" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908d2458a?w=478&amp;h=372&amp;f=jpeg&amp;s=13231" alt="image"></a></p><p>（1）基本类型的值被赋值给另一个变量，其实就是分配内存空间<br>一开始，<code>a</code>的值为 1 ，当使用<code>a</code> 来初始化<code>b</code>时，<code>b</code>值此时为1。但<code>b</code>中的1与<code>a</code>中的是完全独立的，该值只是<code>a</code>中的值的一个副本。说明在栈里变量再次变化，但这个两个变量可以参加任何操作而相互不受影响。</p><p><strong>总结：</strong><br>一个变量赋值给另一个变量时，其实是分配了一块新的内存空间。按照以上操作，基本类型在赋值操作后，事实上就<code>a</code>分配了一块新内存空间给<code>b</code>，两个变量是相互不受影响。</p><p>（2）基本类型的比较是值的比较 只有在它们的值相等的时候它们才相等。 当比较的两个值的类型不同的时候<code>==</code>运算符会进行类型转换，但是当两个值的类型相同的时候，即使是<code>==</code>也相当于是<code>===</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = true;</span><br><span class="line">console.log(a == b);//true</span><br></pre></td></tr></table></figure><p>（3）基本类型的变量其实就是存放在栈区。结合以上，栈区指内存里的栈内存，但是栈区里包括了变量名和变量值。</p><h3 id="4、实例二：（续上面的例子）引用类型"><a href="#4、实例二：（续上面的例子）引用类型" class="headerlink" title="4、实例二：（续上面的例子）引用类型"></a>4、实例二：（续上面的例子）引用类型</h3><p>（1）引用类型的值是可变的<br>可为引用类型添加属性和方法，也可以删除其属性和方法。<br>看一下这个例子：一个为引用类型的变量赋值给另一个为引用类型的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  var obj2 = obj //控制台测试一下二者的值</span><br><span class="line"> obj</span><br><span class="line">//  &#123;name:  &quot;ruoyu&quot;, sex:  &quot;male&quot;, age:  30, friend:  &#123;…&#125;&#125; </span><br><span class="line">obj2</span><br><span class="line"> // &#123;name:  &quot;ruoyu&quot;, sex:  &quot;male&quot;, age:  30, friend:  &#123;…&#125;&#125;</span><br></pre></td></tr></table></figure><p>值是一样的。因为<code>var obj2=obj</code>，即通过<code>obj</code>的值（一个对象）赋值给<code>obj2</code>，那么<code>obj2</code>的值就是赋值后原本<code>obj</code>对应属性和值。作为一个引用类型，它被放在堆中。所以寻找<code>obj2</code>则在堆里找到，只是换了另一个名字为<code>obj2</code></p><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908e2a777?w=600&amp;h=501&amp;f=jpeg&amp;s=11616" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908e2a777?w=600&amp;h=501&amp;f=jpeg&amp;s=11616" alt="image"></a></p><p><strong>总结：</strong><br>原本在栈中的对象分别指向了同一个堆，那么存放在堆中即为对象的内存地址。引用类型的赋值其实是对象保存在栈区地址指针的赋值，因此两个变量指向同一个对象，任何的操作都会相互影响。</p><p>（2）引用类型的比较是引用的比较<br>A、我们先看一下基本类型值的比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj3 =  &apos;&#123;name: &apos;hello&apos;&#125;&apos;;  </span><br><span class="line">var obj4 =  &apos;&#123;name: &apos;hello&apos;&#125;&apos;;</span><br><span class="line"> console.log( obj3 == obj4 ); </span><br><span class="line"> // true</span><br></pre></td></tr></table></figure><p><strong>总结：</strong><br>可以得出基本类型的比较：当两个比较值的类型相同(如字符串)的时候，相当于是用 <code>===</code> ，所以输出是true。</p><p>B、再来看一下引用类型值的比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj3 =  &#123;name:  &apos;hello&apos;&#125;</span><br><span class="line">var obj4 =  &#123;name:  &apos;hello&apos;&#125;</span><br><span class="line"> obj3 === obj4   </span><br><span class="line"> //返回false，说明二者并不相等</span><br></pre></td></tr></table></figure><p>为什么是false？不相等呢？<br>放在栈中的变量 <code>obj3</code>、<code>obj4</code>，声明前置均为<code>undefined</code>，当两者均被被声明值的时候，是两个对象，引用类型是引用访问，相当于在堆中分别开辟了两个空间，堆中会有对应的属性+值，此时这两个对象在堆中存的便是堆的地址。<code>obj4</code>与<code>obj3</code>一样都开辟了新的堆空间，但是存放的地址也不一样。判断<code>obj3</code>是否与<code>obj4</code>相等，看了分析之后，便知道堆存放的地址并不同，二者也就不相等</p><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c999091f92e7?w=600&amp;h=397&amp;f=jpeg&amp;s=14312" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c999091f92e7?w=600&amp;h=397&amp;f=jpeg&amp;s=14312" alt="image"></a></p><p>（3）引用类型的值是同时保存在栈内存和堆内存中的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function  sum()&#123; </span><br><span class="line">              console.log(&apos;sum...&apos;)</span><br><span class="line">     &#125;  </span><br><span class="line">var sum2 = sum; </span><br><span class="line"> sum2()  </span><br><span class="line">//返回sum... 二者是相等的</span><br></pre></td></tr></table></figure><p>我们可以就此分析，函数<code>function sum()</code>,分别有变量<code>sum</code>和函数对象代码（为引用类型，已放在堆中）。之后sum赋值给<code>sum2</code>，即<code>sum2</code>事实上使用的是赋值后<code>sum</code>所指代堆的内存地址,即后续<code>sum</code>和<code>sum2</code>共用了堆里的代码（变量的内存地址就像指针一样，通过JS自身引擎找到这个堆），一堆东西起了两个不同的名字</p><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908fb2972?w=600&amp;h=291&amp;f=jpeg&amp;s=8420" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c99908fb2972?w=600&amp;h=291&amp;f=jpeg&amp;s=8420" alt="image"></a></p><p><strong>总结：</strong> js不同于其他语言，其不允许直接访问内存中的位置，即不能直接操作对象的内存空间，实际上，是操作对象的引用，所以引用类型的值是按引用访问的。</p><p>准确地说，引用类型的存储需内存的栈区（栈区是指内存里的栈内存）和堆区（堆区是指内存里的堆内存）共同完成，栈区内存保存变量标识符和指向堆内存中该对象的指针，然后，栈区内存地址也可以说是该对象在堆内存的地址。</p><h1 id="二、引用类型的实际应用"><a href="#二、引用类型的实际应用" class="headerlink" title="二、引用类型的实际应用"></a>二、引用类型的实际应用</h1><h3 id="1、函数的参数传递"><a href="#1、函数的参数传递" class="headerlink" title="1、函数的参数传递"></a>1、函数的参数传递</h3><p>第1个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function  inc(n)&#123; </span><br><span class="line">          n++; </span><br><span class="line">        &#125;  </span><br><span class="line">var a =  10; </span><br><span class="line"> inc(a)</span><br><span class="line"> console.log(a)  </span><br><span class="line"> </span><br><span class="line">//返回10  </span><br><span class="line"></span><br><span class="line">/*等同于*/</span><br><span class="line"> function  inc()&#123; </span><br><span class="line">       var n = arguments[0] </span><br><span class="line">       n++ </span><br><span class="line">  &#125; </span><br><span class="line"> //在函数的一开始将var a = 10赋值进var n = arguments[0]，  //n=arguments[0]=10,此时与n++为11并没有返回，所以与a并无关系  </span><br><span class="line"></span><br><span class="line">var a =  10  </span><br><span class="line">inc(a)</span><br><span class="line"> console.log(a)</span><br><span class="line"> </span><br><span class="line"> //返回10</span><br></pre></td></tr></table></figure><p>✨第2个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     function  incObj(obj)&#123;</span><br><span class="line">     //var obj = o     //0x0001 </span><br><span class="line">       obj.n++ </span><br><span class="line">        &#125; </span><br><span class="line">   var o =  &#123;n:  10&#125;    //o = 0x0001  对其做声明，为一个对象  </span><br><span class="line">   incObj(o)</span><br><span class="line">   console.log(o)  </span><br><span class="line"></span><br><span class="line">//等同于  </span><br><span class="line">      function  incObj()&#123; </span><br><span class="line">                var obj =arguments[0] </span><br><span class="line">                 obj.n++  </span><br><span class="line">          &#125; </span><br><span class="line"> //incObj(o) 相当于function incObj()&#123;var obj =arguments[0]；obj.n++&#125;，</span><br><span class="line">  //可知道obj=arguments[0]=o,相当于设obj为临时变量，而o= 0x0001  var o =  &#123;n:  10&#125;  incObj(o) console.log(o)</span><br></pre></td></tr></table></figure><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c9990925cc8d?w=600&amp;h=356&amp;f=jpeg&amp;s=19355" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c9990925cc8d?w=600&amp;h=356&amp;f=jpeg&amp;s=19355" alt="image"></a></p><p><strong>总结：</strong><br>引用类型的本质，变量所存的是这个对象的内存地址指向堆，当去做赋值时是把这个地址进行一个赋值；当去访问的时候是通过这个地址去访问这个对象</p><p>✨第3个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function  squireArr( arr )&#123;  </span><br><span class="line">        //var arr = 0x0011  </span><br><span class="line">           for(var i =  0; i &lt; arr.length; i++)&#123; </span><br><span class="line">                   arr[i]  = arr[i]  * arr[i]; </span><br><span class="line">        &#125;</span><br><span class="line"> &#125; </span><br><span class="line">           var arr =  [2,1,3,6] </span><br><span class="line">           squireArr(arr) </span><br><span class="line">           console.log(arr) </span><br><span class="line">     //(4) [4, 1, 9, 36]</span><br></pre></td></tr></table></figure><p>即把<code>function squireArr(arr){}</code>中的数组<code>squireArr(arr)</code>里的每一项变为原来的平方，即参数<code>arr</code>为数组里的值，用for循环进行操作，外界调用时，只需调用一次<code>squireArr(arr)</code>，事实上数组<code>squireArr(arr)</code>操作就是对<code>arr</code>的操作</p><p>✨第4个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        function  squireArr2( arr )&#123; </span><br><span class="line">                  var newArr =  []; </span><br><span class="line">                   for(var i =  0; i &lt; arr.length; i++)&#123; </span><br><span class="line">                              newArr[i]  = arr[i]  * arr[i]; </span><br><span class="line">                       &#125; </span><br><span class="line">                        return newArr; </span><br><span class="line">                   &#125;  </span><br><span class="line">                  var arr2 =  squireArr2(arr) </span><br><span class="line">                  console.log(arr2)  //返回(4) [16, 1, 81, 1296] </span><br><span class="line"></span><br><span class="line">             arr </span><br><span class="line">            // (4)  [4,  1,  9,  36] </span><br><span class="line">arr2 --&gt;  (4)  [16,  1,  81,  1296]</span><br></pre></td></tr></table></figure><h3 id="2、对象的深浅拷贝"><a href="#2、对象的深浅拷贝" class="headerlink" title="2、对象的深浅拷贝"></a>2、对象的深浅拷贝</h3><p>针对这个例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> var obj;  </span><br><span class="line">var obj2;  </span><br><span class="line"> var obj =  &#123;</span><br><span class="line">          name:  &apos;ruoyu&apos;,</span><br><span class="line">          sex:  &apos;male&apos;,</span><br><span class="line">          age:  30, </span><br><span class="line">          friend:  &#123; </span><br><span class="line">            name:  &apos;hello&apos;,</span><br><span class="line">            age:  100 </span><br><span class="line">               &#125; </span><br><span class="line">       &#125;  </span><br><span class="line">      var obj2 = obj;</span><br></pre></td></tr></table></figure><p>想要创造一个新的b，那么就需要遍历原始a的每一项属性<code>+</code>值，用来获取成为新个体的b所需的东西，并一一对b进行改造，即从一无所有，改造成与a相似的新个体，此为<strong>克隆</strong>。</p><p>如果在遍历的时候，b这个新个体只是遍历a的前半部分或者局部，那么这称之为<strong>浅拷贝</strong>，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function  shallowCopy(oldObj)  &#123; </span><br><span class="line">             var newObj =  &#123;&#125;;  </span><br><span class="line">              for(var i in oldObj)  &#123; </span><br><span class="line">                  if(oldObj.hasOwnProperty(i))  &#123;</span><br><span class="line">                          newObj[i]  = oldObj[i];  </span><br><span class="line">                   &#125; </span><br><span class="line">            &#125;</span><br><span class="line">          return newObj; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>而如果b是遍历原始a的每一项属性和值，但是b又是一个独立个体，与a不相关，当修改b的时候，a仍然不会发生变化，而这叫做<strong>深拷贝</strong>，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function  deepCopy(oldObj)  &#123; </span><br><span class="line">           var newObj =  &#123;&#125;; </span><br><span class="line">            for(var key in oldObj)  &#123; </span><br><span class="line">                    if(typeof oldObj[key]  ===  &apos;object&apos;)  &#123;</span><br><span class="line">                       newObj[key]  =  deepCopy(oldObj[key]); </span><br><span class="line">                   &#125;else&#123; </span><br><span class="line">                      newObj[key]  = oldObj[key]; </span><br><span class="line">                             &#125; </span><br><span class="line">                &#125; </span><br><span class="line">                 return newObj;  </span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p><strong>json——string——对象</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、基本类型VS引用类型&quot;&gt;&lt;a href=&quot;#一、基本类型VS引用类型&quot; class=&quot;headerlink&quot; title=&quot;一、基本类型VS引用类型&quot;&gt;&lt;/a&gt;一、基本类型VS引用类型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 这里的内存，为虚拟内存&lt;/p&gt;
&lt;h3 id=&quot;1、引用类型：&quot;&gt;&lt;a href=&quot;#1、引用类型：&quot; class=&quot;headerlink&quot; title=&quot;1、引用类型：&quot;&gt;&lt;/a&gt;1、引用类型：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义：保存在堆内存中的对象，变量中保存的实际上只是一个指针，这个指针执行内存中的另一个位置，由该位置保存对象&lt;/li&gt;
&lt;li&gt;包括：对象、数组、函数、正则
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:06作用域和作用域链</title>
    <link href="http://yoursite.com/2018/12/06/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A06%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://yoursite.com/2018/12/06/面对JavaScript吧！：06作用域和作用域链/</id>
    <published>2018-12-06T11:12:13.000Z</published>
    <updated>2018-12-07T11:15:57.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是作用域"><a href="#一、什么是作用域" class="headerlink" title="一、什么是作用域"></a>一、什么是作用域</h1><h3 id="1、先看一段简单代码"><a href="#1、先看一段简单代码" class="headerlink" title="1、先看一段简单代码:"></a>1、先看一段简单代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function  fn()  &#123; </span><br><span class="line">         var a =  &apos;miya&apos;; </span><br><span class="line">         console.log(a); </span><br><span class="line"> // 输出&quot;miya&quot; </span><br><span class="line">          &#125;  </span><br><span class="line">     fn();</span><br></pre></td></tr></table></figure><a id="more"></a><p>在fn函数执行的时候，输出一个<code>a</code>变量，那么这个a变量是哪里来?有看到函数第一行有定义a变量的代码<code>var a = &#39;miya&#39;</code></p><h3 id="2、继续看另外一段代码："><a href="#2、继续看另外一段代码：" class="headerlink" title="2、继续看另外一段代码："></a>2、继续看另外一段代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var b =  &apos;programmer&apos;;  function  fn()  &#123; </span><br><span class="line">          console.log(b);  // 输出&quot;programmer&quot;  </span><br><span class="line">       &#125; </span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>同样，在输出b的时候，自己函数内部没有找到变量b，那么就在外层的全局中查找，找到了就停止查找并输出了。</p><h3 id="3、那么，可以注意到以上两段代码都有查找变量。第一段代码是在函数中找到a变量，第二段代码是在全局中找到b变量。当然也要注意：javascript中-并没有带来块级作用域，如："><a href="#3、那么，可以注意到以上两段代码都有查找变量。第一段代码是在函数中找到a变量，第二段代码是在全局中找到b变量。当然也要注意：javascript中-并没有带来块级作用域，如：" class="headerlink" title="3、那么，可以注意到以上两段代码都有查找变量。第一段代码是在函数中找到a变量，第二段代码是在全局中找到b变量。当然也要注意：javascript中{}`并没有带来块级作用域，如："></a>3、那么，可以注意到以上两段代码都有查找变量。第一段代码是在函数中找到a变量，第二段代码是在全局中找到b变量。当然也要注意：javascript中<code>{}`</code>并没有带来块级作用域，如：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    var a=1 </span><br><span class="line"> &#125; </span><br><span class="line">console.log(a) </span><br><span class="line"> //1</span><br><span class="line">/*即使这样的定义，同样能输出：1*/</span><br></pre></td></tr></table></figure><p>javascript的作用域是通过函数来形成，也就是说一个函数内定义的变量，函数外是不可以访问，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function  fn()&#123; </span><br><span class="line"> var a =1; </span><br><span class="line"> &#125;  //js编译器从此函数作用域出来之后，外界的变量函数或者声明变量均与之无关 </span><br><span class="line"> fn(); </span><br><span class="line"> console.log(a);  </span><br><span class="line"> /*&quot;ReferenceError: a is not defined&quot;说明在全局作用域中变量未被声明*/</span><br></pre></td></tr></table></figure><p>接下来，我们在函数、全局，两个概念名分别都加上作用域三个字，是不是又打开一个新世界了？</p><p>关注细节的就知道，作用域，本质是一套规则，用于确定在何处以及如何查找变量（标识符）的规则。关键点在于：查找变量（标识符）。接下来让我们继续探索作用域链。</p><h1 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h1><h3 id="1、还是看刚才这段代码"><a href="#1、还是看刚才这段代码" class="headerlink" title="1、还是看刚才这段代码"></a>1、还是看刚才这段代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var b =  &apos;programmer&apos;; </span><br><span class="line"> function  fn()  &#123; </span><br><span class="line">console.log(b);  // 输出&quot;programmer&quot; </span><br><span class="line"> &#125;  </span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>一般来说，我们在查找b变量时，先在函数作用域中查找，没有找到，再去全局作用域中查找，你会注意到，这是一个往外层查找的过程，即顺着一条链条从下往上查找变量，这条链条，我们就称之为作用域链。</p><h3 id="2、全局作用域，我们先从js页面中同时存在变量fn和变量a所处的位置来看"><a href="#2、全局作用域，我们先从js页面中同时存在变量fn和变量a所处的位置来看" class="headerlink" title="2、全局作用域，我们先从js页面中同时存在变量fn和变量a所处的位置来看"></a>2、全局作用域，我们先从js页面中同时存在变量fn和变量a所处的位置来看</h3><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c94595db729c?w=600&amp;h=462&amp;f=jpeg&amp;s=22567" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c94595db729c?w=600&amp;h=462&amp;f=jpeg&amp;s=22567" alt="image"></a><br>在页面里所写的代码都是出于一个全局作用域下。全局作用域，相当于页面上有一个含有声明变量<code>a</code>或者函数<code>fn</code>的window对象，所声明的全局变量都是window对象下对应的一个属性。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c94595efb1a1?w=600&amp;h=269&amp;f=jpeg&amp;s=18187" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c94595efb1a1?w=600&amp;h=269&amp;f=jpeg&amp;s=18187" alt="image"></a></p><p>还没有接触到ES6的<code>let</code>、<code>const</code>之前，只有函数作用域和全局作用域，函数作用域肯定是在全局作用域里面的，而函数作用域中又可以继续嵌套函数作用域，如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c94596007b4b?w=592&amp;h=638&amp;f=jpeg&amp;s=22248" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c94596007b4b?w=592&amp;h=638&amp;f=jpeg&amp;s=22248" alt="image"></a></p><h1 id="三、从面试题解构作用域和作用域链"><a href="#三、从面试题解构作用域和作用域链" class="headerlink" title="三、从面试题解构作用域和作用域链"></a>三、从面试题解构作用域和作用域链</h1><h3 id="1、解密原理："><a href="#1、解密原理：" class="headerlink" title="1、解密原理："></a>1、解密原理：</h3><ul><li>每当执行完一块作用域里的函数后，它就进入一个新的作用域下（一般从下往上找）</li><li>当你使用一个变量或者给一个变量去赋值时，变量是从当前的作用域找，再从上层作用域（指当前这个函数所声明的作用域里）上找</li></ul><h3 id="2、具体如何运用解密原理"><a href="#2、具体如何运用解密原理" class="headerlink" title="2、具体如何运用解密原理"></a>2、具体如何运用解密原理</h3><p>（0）测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;iceman&apos;</span><br></pre></td></tr></table></figure><p>这段小小的js代码有其编译过程，经历了下面的步骤：<br>A、编译器在当前作用域中声明一个变量name<br>B、运行时引擎在作用域中查找该变量，找到了变量name并为其赋值<br>下面这道题则证明以上说法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(name);   // undefined  </span><br><span class="line">var name =  &apos;miya&apos;;</span><br></pre></td></tr></table></figure><p>在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">编译器工作，是在代码执行前从上到下进行编译，当遇到某个用var声明变量时，先检查在当前作用域下是否存在了该变量。如果存在，则忽略这个声明；如果不存在，则在当前作用域中声明该变量。</span><br><span class="line"></span><br><span class="line">查找的规则：是从当前作用域开始找，如果没找到再到父级作用域中找，一层层往外找，如果在全局作用域如果还没找到的话，就会报错了：</span><br></pre></td></tr></table></figure><p>ReferenceError: 某变量 is not defined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（1）第1题：</span><br></pre></td></tr></table></figure><p>var a = 1<br>function fn1(){<br>function fn2(){<br>console.log(a)<br>}<br>function fn3(){<br>var a = 4<br>fn2()<br>}<br>var a = 2<br>return fn3<br>}<br>var fn = fn1()<br>fn() //输出多少</p><p>//a=2<br>//执行fn2函数，fn2找不到变量a,接着往上在找到创建当前fn2所在的作用域fn1中找到a=2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（2）第2题：</span><br></pre></td></tr></table></figure><p>var a = 1<br>function fn1(){<br>function fn3(){<br>var a = 4<br>fn2()<br>}<br>var a = 2<br>return fn3<br>}<br>function fn2(){<br>console.log(a)<br>}<br>var fn = fn1()<br>fn() //输出多少</p><p>//a=1<br>//最后执行fn2函数，fn2找不到变量a,接着往上在找到创建当前fn2所在的全局作用域中找到a=1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（3）【重点】第3题：</span><br></pre></td></tr></table></figure><p>var a = 1<br>function fn1(){<br>function fn3(){<br>function fn2(){<br>console.log(a)<br>}<br>var a<br>fn2()<br>a = 4<br>}<br>var a = 2<br>return fn3<br>}<br>var fn = fn1()<br>fn() //输出多少</p><p>//undefined<br>//函数fn2在执行的过程中，先从自己内部找变量找不到，再从创建当前函数所在的作用域fn去找,<br>注意此时变量声明前置，a已声明但未初始化为undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">事实上，我发现上一节函数中立刻执行的函数表达式本质上也可以感受一下局部作用域和全局作用域的区别。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（4）再深入看几道网上的经典题，感受一下已经模糊的智商~😂（其实也还好啦~并没有对智商多大的撞击）</span><br><span class="line"></span><br><span class="line">在作用域链中查找过程的伪代码：</span><br><span class="line"></span><br><span class="line">**第1道题：**</span><br></pre></td></tr></table></figure><p>var x = 10<br>bar()<br>function foo() {<br>console.log(x)<br>}<br>function bar(){<br>var x = 30<br>foo()<br>}</p><p>/<em>第2行，bar（）调用bar函数第6行，bar函数里面调用foo函数第3行，foo函数从自己的局部环境里找x，结果没找到第1行，foo函数从上一级环境里找x，即从全局环境里找x，找到了var x=10。foo（）的输出结果为10。</em> /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第2道题：</span><br></pre></td></tr></table></figure><p>var x = 10;<br>bar()<br>function bar(){<br>var x = 30;<br>function foo(){<br>console.log(x)<br>}<br>foo();<br>}<br>/<em>第2行，bar（）调用bar函数第3行，bar函数里面是foo函数foo函数在自己的局部环境里寻找x，没找到foo函数到自己的上一级环境，即bar函数的局部环境里找x，找到var x=30所以第2行的bar（）输出为30</em> /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第3道题：</span><br></pre></td></tr></table></figure><p>var x = 10;<br>bar()<br>function bar(){<br>var x = 30;<br>(function (){<br>console.log(x)<br>})()<br>}<br>/<em>第2行，bar（）调用bar函数第三行，bar函数里的function（）在自己的局部环境里寻找x，但没找到function（）在上级环境即bar的局部环境里寻找x，找到var x=30，于是显示结果为30</em> /<br>`<code></code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、什么是作用域&quot;&gt;&lt;a href=&quot;#一、什么是作用域&quot; class=&quot;headerlink&quot; title=&quot;一、什么是作用域&quot;&gt;&lt;/a&gt;一、什么是作用域&lt;/h1&gt;&lt;h3 id=&quot;1、先看一段简单代码&quot;&gt;&lt;a href=&quot;#1、先看一段简单代码&quot; class=&quot;headerlink&quot; title=&quot;1、先看一段简单代码:&quot;&gt;&lt;/a&gt;1、先看一段简单代码:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function  fn()  &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         var a =  &amp;apos;miya&amp;apos;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         console.log(a); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // 输出&amp;quot;miya&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     fn();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:05声明提前和立即执行函数</title>
    <link href="http://yoursite.com/2018/12/05/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A05%E5%A3%B0%E6%98%8E%E6%8F%90%E5%89%8D%E5%92%8C%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/12/05/面对JavaScript吧！：05声明提前和立即执行函数/</id>
    <published>2018-12-05T11:41:11.000Z</published>
    <updated>2018-12-07T11:15:11.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、声明提前"><a href="#一、声明提前" class="headerlink" title="一、声明提前"></a>一、声明提前</h1><h3 id="1、变量声明提前——变量提升"><a href="#1、变量声明提前——变量提升" class="headerlink" title="1、变量声明提前——变量提升"></a>1、变量声明提前——变量提升</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//先输出a,再声明</span><br><span class="line">var a=3 </span><br><span class="line">console.log(a) //undefined  </span><br><span class="line">var a=3</span><br></pre></td></tr></table></figure><a id="more"></a><p>再如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)//undefined </span><br><span class="line">console.log(b)  //报错 </span><br><span class="line"> var a=3</span><br></pre></td></tr></table></figure><p>为什么<code>console.log(a)</code>输出<code>undefined</code>，而<code>console.log(b)</code> 则会报错呢？<br>出现这样的情况是为什么？实际上JS引擎在一行行执行代码的时候，有一些默认的运行我们并不知道，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a   //undefined,变量a已经前置声明，则结果为undefined console.log（a） //undefined </span><br><span class="line">console.log（b） //报错，没有变量b，引用失败 </span><br><span class="line">a=3</span><br></pre></td></tr></table></figure><p>最后是：变量的声明前置的完整运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a     //undefined,已经前置声明为undefined </span><br><span class="line">console.log(a)     //undefined</span><br><span class="line"> a=3 </span><br><span class="line">console.log(a)  </span><br><span class="line">--&gt; undefined 3</span><br></pre></td></tr></table></figure><h3 id="2、函数的声明前置"><a href="#2、函数的声明前置" class="headerlink" title="2、函数的声明前置"></a>2、函数的声明前置</h3><p>先看这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum(5,3) //放在任何的地方，但是只是一个函数值，并没有打印这个函数出来</span><br><span class="line">function sum(a,b)&#123;</span><br><span class="line">    return a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置两种看两种执行结果：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c90916e1bb4d?w=562&amp;h=406&amp;f=jpeg&amp;s=34814" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c90916e1bb4d?w=562&amp;h=406&amp;f=jpeg&amp;s=34814" alt="image"></a></p><p>看代码，不是没有任何的变量声明？为什么就可以使用函数输出结果？这是因为函数所执行的JS引擎默认操作与变量声明前置机制是类似。相当于：包含变量数据的function函数前置，即以上代码等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function  sum(a,b)&#123; </span><br><span class="line">            return a+b</span><br><span class="line">    &#125;  </span><br><span class="line">      sum(5,3) </span><br><span class="line"> //直接返回8</span><br></pre></td></tr></table></figure><h3 id="3、函数表达式的声明前置"><a href="#3、函数表达式的声明前置" class="headerlink" title="3、函数表达式的声明前置"></a>3、函数表达式的声明前置</h3><p>还是先看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line">var fn = function()&#123;</span><br><span class="line">    console.log(&apos;fn...&apos;)</span><br><span class="line">&#125;</span><br><span class="line">//报错，直接说fn不是一个函数</span><br></pre></td></tr></table></figure><p>这里，function函数是一个变量，相当于把一个数字赋值给<code>fn</code>，而这个function函数表达式，事实上也是有一个声明前置的，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fn   //undefined </span><br><span class="line"> fn()    //此为函数，会执行，但是如果是undefined(),这种是不成立，即报错</span><br><span class="line"> fn =  function()&#123; </span><br><span class="line">          console.log(&apos;fn...&apos;) </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>那么原始代码是怎么执行的？<br>原始代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn()  </span><br><span class="line">sum(3,4) </span><br><span class="line">var fn =  function()&#123; </span><br><span class="line">           console.log(&apos;fn...&apos;)</span><br><span class="line">    &#125;  </span><br><span class="line">           function  sum(a,b)&#123; </span><br><span class="line">          return a+b</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于浏览器来说它做了什么：一个声明前置：包括变量声明前置和函数声明前置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fn //变量声明前置  </span><br><span class="line">         function  sum(a,b)&#123; </span><br><span class="line">         return a+b &#125;  //函数声明前置 </span><br><span class="line">             fn()  </span><br><span class="line">            sum(3,4) </span><br><span class="line">             fn =  function()&#123; </span><br><span class="line">               console.log(&apos;fn...&apos;) </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h1 id="二、立刻执行的函数表达式"><a href="#二、立刻执行的函数表达式" class="headerlink" title="二、立刻执行的函数表达式"></a>二、立刻执行的函数表达式</h1><p><strong>注：关于js的语法规则如何体现？</strong></p><h3 id="1、先看下面这个代码"><a href="#1、先看下面这个代码" class="headerlink" title="1、先看下面这个代码"></a>1、先看下面这个代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">             (function()&#123; console.log(&apos;wangxiaoqin&apos;)  &#125;)() </span><br><span class="line">--&gt;&quot;wangxiaoqin&quot;</span><br></pre></td></tr></table></figure><p>先暂且不管它的结果如何产生。先了解一下JS的语法规则<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c90916deb844?w=600&amp;h=187&amp;f=jpeg&amp;s=15898" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c90916deb844?w=600&amp;h=187&amp;f=jpeg&amp;s=15898" alt="image"></a></p><p>按照这样写，为何只有<code>function(){}</code>单独作为一个变量时，通过模仿语句<code>a( );</code>，<code>function(){}();</code>这个语句则会操作会报错，这是为什么？</p><p>对于JS引擎来说不认为是一个表达式，很像一个函数声明，再加一个括号，即会报错。那么如何让这个语句正常赋值？直接将整个函数声明加一个括号，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;&#125;)()</span><br></pre></td></tr></table></figure><p>由于作为运算符，括号和括号里的内容组合为一个表达式。加上括号之后，会让JS引擎认为它是一个表达式（或引用类型），那么就符合了JS的语法规则。</p><p><strong>总结：</strong><br>当在一个函数声明后加了圆括号（也是一种运算符）后运行的话，会报错。因为这被认为是语法错误。在JS中，以function开头会被认为是语句，而语句不应该以圆括号结尾。所以此时可以选用的解决办法是把整个语句用圆括号包起来。</p><h3 id="2、那么刚才列举的代码："><a href="#2、那么刚才列举的代码：" class="headerlink" title="2、那么刚才列举的代码："></a>2、那么刚才列举的代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123; </span><br><span class="line">              console.log(&apos;wangxiaoqin&apos;)  &#125;)()</span><br><span class="line">  --&gt;&quot;wangxiaoqin&quot;  //即函数表达式，立刻去执行它</span><br><span class="line">     </span><br><span class="line">//等同于  </span><br><span class="line">var fn =  function()&#123;</span><br><span class="line"></span><br><span class="line">   &#125;  </span><br><span class="line">     fn()</span><br></pre></td></tr></table></figure><p>这类型的函数表达式有什么用？这里涉及了函数中所对应的作用域的概念，假设我们在这类函数里添加一个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">          (function()&#123; </span><br><span class="line">              var a =3 console.log(&apos;wangxiaoqin&apos;) </span><br><span class="line">         &#125;)() </span><br><span class="line">          console.log(a)</span><br><span class="line">//运行，后台报错，a是没有被定义的。 </span><br><span class="line"> //因为a变量是不被看到的，因为a在function函数的这个作用域里，与外界无关</span><br></pre></td></tr></table></figure><h3 id="3、立刻执行函数的好处："><a href="#3、立刻执行函数的好处：" class="headerlink" title="3、立刻执行函数的好处："></a>3、立刻执行函数的好处：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fn=function()&#123;&#125;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn()===(函数表达式)()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作为一种运算符，用这种局部作用域的方式将函数引用包裹起来，形成一个立即执行的表达式，好处在于：</span><br><span class="line">A、函数不必再另外命名，避免污染全局，不会在复杂页面协作中造成错乱；</span><br><span class="line"></span><br><span class="line">B、实现一个作用域隔离，封装外部无法读取的私有变量;</span><br><span class="line"></span><br><span class="line">C、避免命名冲突，符合js语法规则，并立刻执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三、命名冲突</span><br><span class="line">当在同一个作用域内定义了名字相同的变量和方法的话，会根据前置顺序产生覆盖</span><br></pre></td></tr></table></figure><p>var fn = 3;<br>function fn(){<br>}<br>console.log(fn);<br>// 3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相当于</span><br></pre></td></tr></table></figure><p>var fn function fn(){} //覆盖上面的 fn = 3 //重新赋值 console.log(fn) //为函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当函数执行有命名冲突的时候，可以认为在还是内部一开始有隐藏的声明变量这个操作</span><br></pre></td></tr></table></figure><p>function fn(fn){<br>console.log(fn);<br>var fn = 3;<br>console.log(fn);<br>}<br>fn(10) //10 3</p><p>//等同于有一个默认的var fn = arguments[0]的操作</p><p>function fn(){<br>var fn = arguments[0] //1、将它先声明前置，再赋值，再输出<br>console.log(fn);<br>var fn = 3; //2、再赋值<br>console.log(fn);<br>} fn(10)</p><p>//10 3<br>`<code></code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、声明提前&quot;&gt;&lt;a href=&quot;#一、声明提前&quot; class=&quot;headerlink&quot; title=&quot;一、声明提前&quot;&gt;&lt;/a&gt;一、声明提前&lt;/h1&gt;&lt;h3 id=&quot;1、变量声明提前——变量提升&quot;&gt;&lt;a href=&quot;#1、变量声明提前——变量提升&quot; class=&quot;headerlink&quot; title=&quot;1、变量声明提前——变量提升&quot;&gt;&lt;/a&gt;1、变量声明提前——变量提升&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//先输出a,再声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a=3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(a) //undefined  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a=3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础面试题（附答案）</title>
    <link href="http://yoursite.com/2018/12/05/HTML%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E9%99%84%E7%AD%94%E6%A1%88%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/05/HTML基础面试题（附答案）/</id>
    <published>2018-12-05T03:51:15.000Z</published>
    <updated>2018-12-05T13:25:11.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义"><a href="#1-DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义" class="headerlink" title="1.DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?"></a>1.DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?</h3><p>（1）&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告诉浏览器的解析器，用什么文档类型规范来解析这个文档。       </html></p><p>（2）严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。<br><a id="more"></a><br>（3）在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。      </p><p>（4）DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</p><p>（5）加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的bug</p><h3 id="2-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#2-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="2.HTML5为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>2.HTML5为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code>？</h3><p>HTML5不基于SGML，因此不需要对DTD进行引用，但是需要DOCTYPE来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；<br>HTML4.01基于SGML，所以需要对DTD进行引用，才能让浏览器知道该文档所使用的文档类型。</p><h3 id="3-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？CSS的盒模型"><a href="#3-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？CSS的盒模型" class="headerlink" title="3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？CSS的盒模型?"></a>3.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？CSS的盒模型?</h3><pre><code>声明：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）行内元素有：a b span img input select strong（强调的语气）</span><br><span class="line">（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</span><br><span class="line">（3）常见的空元素：&lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt; &lt;br&gt;</span><br><span class="line">    鲜为人知的空元素： &lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</span><br></pre></td></tr></table></figure><h3 id="4-CSS引入的方式有哪些-页面导入样式时，使用link和-import有什么区别？"><a href="#4-CSS引入的方式有哪些-页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="4.CSS引入的方式有哪些? 页面导入样式时，使用link和@import有什么区别？"></a>4.CSS引入的方式有哪些? 页面导入样式时，使用link和@import有什么区别？</h3><pre><code>内联, 内嵌 ,外链, 导入。</code></pre><ol><li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS; </li><li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载; </li><li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li></ol><h3 id="5-无样式内容闪烁（FOUC）Flash-of-Unstyle-Content"><a href="#5-无样式内容闪烁（FOUC）Flash-of-Unstyle-Content" class="headerlink" title="5.无样式内容闪烁（FOUC）Flash of Unstyle Content"></a>5.无样式内容闪烁（FOUC）Flash of Unstyle Content</h3><p>@import导入CSS文件会等到文档加载完后再加载CSS样式表。因此，在页面DOM加载完成到CSS导入完成之间会有一段时间页面上的内容是没有样式的。</p><p>解决方法：使用link标签加载CSS样式文件。因为link是顺序加载的，这样页面会等到CSS下载完之后再下载HTML文件，这样先布局好，就不会出现FOUC问题。</p><h3 id="6-介绍一下你对浏览器内核的理解？"><a href="#6-介绍一下你对浏览器内核的理解？" class="headerlink" title="6.介绍一下你对浏览器内核的理解？"></a>6.介绍一下你对浏览器内核的理解？</h3><p>主要分成两部分：渲染引擎(Layout Engine或Rendering Engine)和JS引擎。</p><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>JS引擎：解析和执行javascript来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p><h3 id="7-常见的浏览器内核有哪些？"><a href="#7-常见的浏览器内核有哪些？" class="headerlink" title="7.常见的浏览器内核有哪些？"></a>7.常见的浏览器内核有哪些？</h3><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML] </p><p>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等。</p><p> Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;] </p><p>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）] </p><p>EdgeHTML内核：Microsoft Edge。  [此内核其实是从MSHTML fork而来，删掉了几乎所有的IE私有特性]</p><h3 id="8-HTML5有哪些新特性-移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5？"><a href="#8-HTML5有哪些新特性-移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5？" class="headerlink" title="8.HTML5有哪些新特性,移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5？"></a>8.HTML5有哪些新特性,移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5？</h3><p>新增加了图像、位置、存储、多任务等功能。<br>新增元素：</p><ol><li>canvas</li><li>用于媒介回放的video和audio元素</li><li>本地离线存储。localStorage长期存储数据，浏览器关闭后数据不丢失;sessionStorage的数据在浏览器关闭后自动删除</li><li>语意化更好的内容元素，比如 article footer header nav section</li><li>位置API：Geolocation</li><li>表单控件，calendar date time email url search</li><li>新的技术：web worker(web worker是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行) web socket</li><li>拖放API：drag、drop</li></ol><p>移除的元素：</p><ol><li>纯表现的元素：basefont big center font s strike tt u</li><li>性能较差元素：frame frameset noframes</li></ol><p>区分：</p><ol><li>DOCTYPE声明的方式是区分重要因素</li><li>根据新增加的结构、功能来区分</li></ol><h3 id="9-什么是语义化的HTML，语义化的作用是什么？"><a href="#9-什么是语义化的HTML，语义化的作用是什么？" class="headerlink" title="9.什么是语义化的HTML，语义化的作用是什么？"></a>9.什么是语义化的HTML，语义化的作用是什么？</h3><p>语义化的HTML就是写出的HTML代码，符合内容的结构化（内容语义化），选择合适的标签（代码语义化），能够便于开发者阅读和写出更规范性代码的同时让浏览器的爬虫和机器很好地解析。</p><p>作用：</p><p>a.有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。</p><p>b.在没有CSS的时候能够清晰的看出网页的结构，增强可读性。</p><p>c.便于团队开发和维护，语义化的HTML可以让开发者更容易的看明白，从而提高团队的效率和协调能力。</p><p>d.支持多终端设备的浏览器渲染。</p><h3 id="10-HTML5的文件离线储存怎么使用，工作原理是什么？浏览器是怎么对HTML5的离线存储资源进行管理和加载的？"><a href="#10-HTML5的文件离线储存怎么使用，工作原理是什么？浏览器是怎么对HTML5的离线存储资源进行管理和加载的？" class="headerlink" title="10.HTML5的文件离线储存怎么使用，工作原理是什么？浏览器是怎么对HTML5的离线存储资源进行管理和加载的？"></a>10.HTML5的文件离线储存怎么使用，工作原理是什么？浏览器是怎么对HTML5的离线存储资源进行管理和加载的？</h3><p>在线情况下，浏览器发现HTML头部有manifest属性，它会请求manifest文件，如果是第一次访问，那么浏览器就会根据manifest文件的内容下载相应的资源，并进行离线存储。如果已经访问过并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面。然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不会做任何操作，如果文件改变了，那么就会重新下载文件中的资源，并且进行离线存储。例如，</p><p>在页面头部加入manifest属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html manifest=&apos;cache.manifest&apos;&gt;</span><br></pre></td></tr></table></figure><p>在cache.manifest文件中编写离线存储的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js/app.js</span><br><span class="line">css/style.css</span><br><span class="line">NETWORK:</span><br><span class="line">Resourse/logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line"> //offline.html</span><br></pre></td></tr></table></figure><p>在离线状态时，操作 window.applicationCache 进行需求实现。<br>在线情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p><h3 id="11-cookies，sessionStorage和localStorage的区别？"><a href="#11-cookies，sessionStorage和localStorage的区别？" class="headerlink" title="11.cookies，sessionStorage和localStorage的区别？"></a>11.cookies，sessionStorage和localStorage的区别？</h3><p>共同点：都是保存在浏览器端，且是同源的。</p><p>区别：</p><ol><li>cookies是为了标识用户身份而存储在用户本地终端上的数据，始终在同源http请求中携带，即cookies在浏览器和服务器间来回传递，而sessionstorage和localstorage不会自动把数据发给服务器，仅在本地保存。</li><li>存储大小的限制不同。cookie保存的数据很小，不能超过4k，而sessionstorage和localstorage保存的数据大，可达到5M。</li><li>数据的有效期不同。cookie在设置的cookie过期时间之前一直有效，即使窗口或者浏览器关闭。sessionstorage仅在浏览器窗口关闭之前有效。localstorage始终有效，窗口和浏览器关闭也一直保存，用作长久数据保存。</li><li>作用域不同。cookie在所有的同源窗口都是共享；sessionstorage不在不同的浏览器共享，即使同一页面；localstorage在所有同源窗口都是共享</li></ol><h3 id="12-iframe框架有那些优缺点？"><a href="#12-iframe框架有那些优缺点？" class="headerlink" title="12.iframe框架有那些优缺点？"></a>12.iframe框架有那些优缺点？</h3><p>优点：</p><ol><li>iframe能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</li><li><p>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</p><p>缺点：</p></li><li><p>iframe会阻塞主页面的Onload事件； </p></li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO；</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好通过JavaScript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li></ol><h3 id="13-label的作用是什么-是怎么用的"><a href="#13-label的作用是什么-是怎么用的" class="headerlink" title="13.label的作用是什么? 是怎么用的?"></a>13.label的作用是什么? 是怎么用的?</h3><p>label标签用来定义表单控件间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。label 中有两个属性是非常有用的, FOR和ACCESSKEY。<br>FOR属性功能：表示label标签要绑定的HTML元素，你点击这个标签的时候，所绑定的元素将获取焦点。例如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Label FOR=&quot;InputBox&quot;&gt;姓名&lt;/Label&gt;&lt;input ID=&quot;InputBox&quot; type=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><p>ACCESSKEY属性功能：表示访问label标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点。例如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Label FOR=&quot;InputBox&quot; ACCESSKEY＝&quot;N&quot;&gt;姓名&lt;/Label&gt;&lt;input ID=&quot;InputBox&quot; type=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="14-HTML5的form如何关闭自动完成功能？"><a href="#14-HTML5的form如何关闭自动完成功能？" class="headerlink" title="14.HTML5的form如何关闭自动完成功能？"></a>14.HTML5的form如何关闭自动完成功能？</h3><p>HTML的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了。但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用AJAX技术从数据库搜索并列举而不是在用户的历史记录中搜索。</p><p>方法：</p><ol><li>在IE的internet选项菜单中里的自动完成里面设置</li><li>设置form输入框的autocomplete为on或者off来来开启输入框的自动完成功能</li></ol><h3 id="15-如何实现浏览器内多个标签页之间的通信"><a href="#15-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="15.如何实现浏览器内多个标签页之间的通信?"></a>15.如何实现浏览器内多个标签页之间的通信?</h3><ol><li>WebSocket SharedWorker</li><li>也可以调用 localstorge、cookies 等本地存储方式。 localstorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。</li></ol><p>​      注意：Safari 在无痕模式下设置 localstorge 值时会抛出QuotaExceededError 的异常</p><h3 id="16-webSocket如何兼容低浏览器？"><a href="#16-webSocket如何兼容低浏览器？" class="headerlink" title="16.webSocket如何兼容低浏览器？"></a>16.webSocket如何兼容低浏览器？</h3><ol><li>Adobe Flash Socket ActiveX HTMLFile (IE) 基于 multipart 编码发送 XHR 基于长轮询的 XHR</li><li>引用WebSocket.js这个文件来兼容低版本浏览器。</li></ol><h3 id="17-页面可见性（Page-Visibility）API-可以有哪些用途？"><a href="#17-页面可见性（Page-Visibility）API-可以有哪些用途？" class="headerlink" title="17.页面可见性（Page Visibility）API 可以有哪些用途？"></a>17.页面可见性（Page Visibility）API 可以有哪些用途？</h3><ol><li>通过visibility state的值得检测页面当前是否可见，以及打开网页的时间。</li><li>在页面被切换到其他后台进程时，自动暂停音乐或视频的播放。</li></ol><h3 id="18-如何在页面上实现一个圆形的可点击区域？"><a href="#18-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="18.如何在页面上实现一个圆形的可点击区域？"></a>18.如何在页面上实现一个圆形的可点击区域？</h3><ol><li>map+area或者svg</li><li>border-radius</li><li>纯js实现，一个点不在圆上的算法</li></ol><h3 id="19-实现不使用-border-画出1px高的线，在不同浏览器的Quirks-mode和CSS-Compat模式下都能保持同一效果"><a href="#19-实现不使用-border-画出1px高的线，在不同浏览器的Quirks-mode和CSS-Compat模式下都能保持同一效果" class="headerlink" title="19.实现不使用 border 画出1px高的线，在不同浏览器的Quirks mode和CSS Compat模式下都能保持同一效果"></a>19.实现不使用 border 画出1px高的线，在不同浏览器的Quirks mode和CSS Compat模式下都能保持同一效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="20-网页验证码是干嘛的，是为了解决什么安全问题？"><a href="#20-网页验证码是干嘛的，是为了解决什么安全问题？" class="headerlink" title="20.网页验证码是干嘛的，是为了解决什么安全问题？"></a>20.网页验证码是干嘛的，是为了解决什么安全问题？</h3><ol><li><p>区分用户是计算机还是人的程序;</p></li><li><p>可以防止恶意破解密码、刷票、论坛灌水；</p></li></ol><h3 id="21-title与h1的区别、b与strong的区别、i与em的区别？"><a href="#21-title与h1的区别、b与strong的区别、i与em的区别？" class="headerlink" title="21.title与h1的区别、b与strong的区别、i与em的区别？"></a>21.title与h1的区别、b与strong的区别、i与em的区别？</h3><p>title属性没有明确意义，只表示标题；h1表示层次明确的标题，对页面信息的抓取也有很大的影响<br>strong标明重点内容，语气加强含义；b是无意义的视觉表示<br>em表示强调文本；i是斜体，是无意义的视觉表示<br>视觉样式标签：<code>b i u s</code><br>语义样式标签：<code>strong em ins del code</code></p><h3 id="22-元素的alt和title有什么异同？"><a href="#22-元素的alt和title有什么异同？" class="headerlink" title="22.元素的alt和title有什么异同？"></a>22.元素的alt和title有什么异同？</h3><p>在alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。23.xhtml和html有什么区别?</p><p>区别是：</p><p>XHTML 元素必须被正确地嵌套。</p><p>XHTML 元素必须被关闭。</p><p>标签名必须用小写字母。</p><p>XHTML 文档必须拥有根元素。</p><h3 id="23-对WEB标准以及W3C的理解与认识？"><a href="#23-对WEB标准以及W3C的理解与认识？" class="headerlink" title="23.对WEB标准以及W3C的理解与认识？"></a>23.对WEB标准以及W3C的理解与认识？</h3><p>标签闭合、标签小写、不乱嵌套、提高搜索引擎、使用外链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性.</p><h3 id="24-前端页面有哪三层构成，分别是什么-作用是什么"><a href="#24-前端页面有哪三层构成，分别是什么-作用是什么" class="headerlink" title="24.前端页面有哪三层构成，分别是什么?作用是什么?"></a>24.前端页面有哪三层构成，分别是什么?作用是什么?</h3><p>Hnml结构层，css表示层，js行为层</p><p>作用是：实现分离。使用html去创建文档的结构，使用css去设置文档的呈现效果，使用js脚本去实现文档的行为。</p><h3 id="25-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高"><a href="#25-CSS选择符有哪些-哪些属性可以继承-优先级算法如何计算-内联和important哪个优先级高" class="headerlink" title="25.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?"></a>25.CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?</h3><p>标签选择符 类选择符 id选择符</p><p>继承不如指定 Id&gt;class&gt;标签选择</p><p>后者优先级高</p><h3 id="26-css的基本语句构成是"><a href="#26-css的基本语句构成是" class="headerlink" title="26.css的基本语句构成是?"></a>26.css的基本语句构成是?</h3><p>选择器{属性1:值1;属性2:值2;……}</p><h3 id="27-写出几种IE6-BUG的解决方法"><a href="#27-写出几种IE6-BUG的解决方法" class="headerlink" title="27.写出几种IE6 BUG的解决方法"></a>27.写出几种IE6 BUG的解决方法</h3><p>a.双边距BUG float引起的 使用display</p><p>b.像素问题 使用float引起的 使用dislpay:inline -3px</p><p>c.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active</p><p>d.Ie z-index问题 给父级添加position:relative</p><p>e.Png 透明 使用js代码 改</p><p>f.Min-height 最小高度 ！Important 解决’</p><p>g.select 在ie6下遮盖 使用iframe嵌套</p><p>h.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）</p><h3 id="28-浏览器标准模式和怪异模式之间的区别是什么"><a href="#28-浏览器标准模式和怪异模式之间的区别是什么" class="headerlink" title="28.浏览器标准模式和怪异模式之间的区别是什么?"></a>28.浏览器标准模式和怪异模式之间的区别是什么?</h3><p>盒子模型 渲染模式的不同</p><p>使用 window.top.document.compatMode 可显示为什么模式</p><h3 id="29-你如何对网站的文件和资源进行优化-期待的解决方案包括："><a href="#29-你如何对网站的文件和资源进行优化-期待的解决方案包括：" class="headerlink" title="29.你如何对网站的文件和资源进行优化?期待的解决方案包括："></a>29.你如何对网站的文件和资源进行优化?期待的解决方案包括：</h3><p>文件合并</p><p>文件最小化/文件压缩</p><p>使用CDN托管</p><p>缓存的使用</p><h3 id="30-描述css-reset的作用和用途。"><a href="#30-描述css-reset的作用和用途。" class="headerlink" title="30.描述css reset的作用和用途。"></a>30.描述css reset的作用和用途。</h3><p>Reset重置浏览器的css默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一.</p><h3 id="31-解释css-sprites，如何使用。"><a href="#31-解释css-sprites，如何使用。" class="headerlink" title="31.解释css sprites，如何使用。"></a>31.解释css sprites，如何使用。</h3><p>Css 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量.</p><h3 id="32-清除浮动的几种方式，各自的优缺点"><a href="#32-清除浮动的几种方式，各自的优缺点" class="headerlink" title="32.清除浮动的几种方式，各自的优缺点?"></a>32.清除浮动的几种方式，各自的优缺点?</h3><p>a使用空标签清除浮动 clear:both（理论上能清除任何标签，增加无意义的标签）</p><p>b.使用overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用zoom:1用于兼容IE）</p><p>c.是用afert伪元素清除浮动(用于非IE浏览器</p><h3 id="33-浏览器标准模式和怪异模式之间的区别是什么"><a href="#33-浏览器标准模式和怪异模式之间的区别是什么" class="headerlink" title="33.浏览器标准模式和怪异模式之间的区别是什么?"></a>33.浏览器标准模式和怪异模式之间的区别是什么?</h3><p>盒子模型 渲染模式的不同</p><p>使用 window.top.document.compatMode 可显示为什么模式</p><h3 id="34-如何优化代码？"><a href="#34-如何优化代码？" class="headerlink" title="34.如何优化代码？"></a>34.如何优化代码？</h3><p>​    <strong>a.</strong>代码重用</p><p>​    b.避免全局变量（命名空间，封闭空间，模块化mvc..）</p><p>​    c.拆分函数避免函数过于臃肿</p><p>​    d.注释</p><p>​    e.代码压缩</p><p>​    f.减少http请求</p><p>​    g.图片<a href="http://www.baidu.com/link?url=N9aWYuuRP6WPds44r5pLfyXwxMtp6Ue3qnt2318jkEVYTPsNgTtocT-yVt1a_QxTZXedXavJ2AAvbW1qTZRHLtINKR0stcCvdMU-vL1mtXa" target="_blank" rel="noopener">css sprite</a></p><h3 id="35-什么是媒体查询，如何使用？"><a href="#35-什么是媒体查询，如何使用？" class="headerlink" title="35.什么是媒体查询，如何使用？"></a>35.什么是媒体查询，如何使用？</h3><p>媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成。媒体查询中可用于检测的媒体特性有 width 、 height 和 color （等）。使用媒体查询，可以在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p><p>一，首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;/&gt;</span><br><span class="line"></span><br><span class="line">注意：width=device-width:宽度等于当前设备的宽度</span><br><span class="line"></span><br><span class="line">initial-scale=1：初始的缩放比例（默认为1）</span><br><span class="line"></span><br><span class="line">maximum-scale=1：允许用户缩放到得最大比例（默认为1）</span><br><span class="line"></span><br><span class="line">user-scalable=no：用户不能手动缩放</span><br></pre></td></tr></table></figure><p>二，在CSS文件中写CSS响应式媒体查询 </p><p>例: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:720px) and (min-width:320px)&#123;</span><br><span class="line">  body&#123;</span><br><span class="line">​       background-color:red;</span><br><span class="line">​    &#125;</span><br><span class="line">@media screen and (max-width:320px)&#123;</span><br><span class="line">  body&#123;</span><br><span class="line">​       background-color:blue;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段媒体查询的意思是：当设备屏幕宽度在320px——720px之间时，媒体查询中body的背景色（background-color:red;）会重叠之前的body背景色，当设备屏幕宽度在320px以下时，媒体查询中body的body背景色（background-color:blue;）会重叠之前的body背景色</p><p>怎么样才能做到屏幕适配？</p><p>需要用的是：</p><meta name="viewport" content="width=devive-width"><p>meta viewport 中有6个通用属性： </p><p>1）width 设置layout viewport的宽度 正整数或字符串 ‘width-device’﻿</p><p>2）initial-scale 设置页面的初始缩放值，数字或小数﻿</p><p>3）minimum-scale 允许用户的最小缩放值 数字或小数﻿</p><p>4）maximum-scale 允许用户的最大缩放值 数字或小数﻿</p><p>5）height 设置layout viewport 的高度，这个属性很少用到</p><p>6）user-scaleabel 是否允许用户进行缩放 ‘no’或‘yes’ 还有2个需要特别注意的两个属性﻿</p><p>7）target-densitydpi 在andriod 4.0一下的设备中，不支持设置viewport的width，android 自带浏览器支持设置 target-densitydpi来达到目的；</p><h3 id="36-请说出三种减低页面加载时间的方法"><a href="#36-请说出三种减低页面加载时间的方法" class="headerlink" title="36.请说出三种减低页面加载时间的方法"></a>36.请说出三种减低页面加载时间的方法</h3><p>a、压缩css、js文件</p><p>b、合并js、css文件，减少http请求</p><p>c、外部js、css文件放在最底下</p><p>d、减少dom操作，尽可能用变量替代不必要的dom操作</p><h3 id="37-http和https有什么区别"><a href="#37-http和https有什么区别" class="headerlink" title="37.http和https有什么区别?"></a>37.http和https有什么区别?</h3><p>​     在URL前加https://前缀表明是用SSL加密的。 你的电脑与服务器之间收发的信息传输将更加安全。 Web服务器启用SSL需要获得一个服务器证书并将该证书与要使用SSL的服务器绑定。<br>​     http和https使用的是完全不同的连接方式,用的端口也不一样,前者是80,后者是443。<br>​     http的连接很简单,是无状态的,…<br>​     HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全</p><h3 id="38-浏览器缓存有几种，有什么区别？"><a href="#38-浏览器缓存有几种，有什么区别？" class="headerlink" title="38.浏览器缓存有几种，有什么区别？"></a>38.浏览器缓存有几种，有什么区别？</h3><p>  网站后台缓存 是网站程序产生的一些临时文件，如PHP程序最喜欢。这个文件一般是在网站程序目录。<br>​     服务器缓存是服务器为了提升速度而产生的一些临时文件，如gzip的文件，一般是防在特定的目录。<br>​     浏览器缓存是用户本地浏览器缓存的网页文件，比如我们第一次打开一个网站速度会慢一些，第二次打开就很快，就是缓存在了本地。</p><h3 id="39-有做过页面性能优化么？如何做的？"><a href="#39-有做过页面性能优化么？如何做的？" class="headerlink" title="39.有做过页面性能优化么？如何做的？"></a>39.有做过页面性能优化么？如何做的？</h3><p>​       把样式表置于顶部<br>​       把脚本置于页面底部<br>​       避免使用 CSS 表达式（Expression）<br>​       使用外部 JavaScript 和 CSS<br>​       削减 JavaScript 和 CSS<br>​       用 <link> 代替 @import<br>​       避免使用滤镜<br>​       剔除重复脚本<br>​       减少DOM访问<br>​       开发智能事件处理程序<br>​       Coockie:<br>​       减小Cookie体积<br>​       对于页面内容使用无coockie域名<br>​      图片：<br>​      优化图像<br>​      优化CSS Spirite<br>​      不要在HTML中缩放图像<br>​      favicon.ico要小而且可缓存</p><h3 id="40-XML和JSON的区别？"><a href="#40-XML和JSON的区别？" class="headerlink" title="40.XML和JSON的区别？"></a>40.XML和JSON的区别？</h3><p>(1).数据体积方面。</p><p>JSON相对于XML来讲，数据的体积小，传递的速度更快些。</p><p>(2).数据交互方面。</p><p>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。</p><p>(3).数据描述方面。</p><p>JSON对数据的描述性比XML较差。</p><p>(4).传输速度方面。</p><p>JSON的速度要远远快于XML。</p><h3 id="41-CSS3有哪些新特性？"><a href="#41-CSS3有哪些新特性？" class="headerlink" title="41.CSS3有哪些新特性？"></a>41.CSS3有哪些新特性？</h3><p>CSS3实现圆角（border-radius），阴影（box-shadow），对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform），transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜，增加了更多的CSS选择器  多背景 rgba，在CSS3中唯一引入的伪元素是::selection.，媒体查询，多栏布局，border-image</p><h3 id="未完待续，不定期更新…"><a href="#未完待续，不定期更新…" class="headerlink" title="未完待续，不定期更新…"></a>未完待续，不定期更新…</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义&quot;&gt;&lt;a href=&quot;#1-DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义&quot; class=&quot;headerlink&quot; title=&quot;1.DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?&quot;&gt;&lt;/a&gt;1.DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?&lt;/h3&gt;&lt;p&gt;（1）&amp;lt;!DOCTYPE&amp;gt; 声明位于文档中的最前面，处于 &lt;html&gt; 标签之前。告诉浏览器的解析器，用什么文档类型规范来解析这个文档。       &lt;/html&gt;&lt;/p&gt;
&lt;p&gt;（2）严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。&lt;br&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="html" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/html/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:04函数</title>
    <link href="http://yoursite.com/2018/12/04/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A04%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/12/04/面对JavaScript吧！：04函数/</id>
    <published>2018-12-04T05:11:31.000Z</published>
    <updated>2018-12-07T11:09:47.451Z</updated>
    
    <content type="html"><![CDATA[<h4 id="总结：数字-undefined-Nan"><a href="#总结：数字-undefined-Nan" class="headerlink" title="总结：数字+undefined===Nan"></a>总结：数字+undefined===Nan</h4><h1 id="一、函数的使用"><a href="#一、函数的使用" class="headerlink" title="一、函数的使用"></a>一、函数的使用</h1><h3 id="1、什么是语句：先看这几个概念"><a href="#1、什么是语句：先看这几个概念" class="headerlink" title="1、什么是语句：先看这几个概念"></a>1、什么是语句：先看这几个概念</h3><p>表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=1 a+b</span><br><span class="line">typeof</span><br></pre></td></tr></table></figure><a id="more"></a><p>语句：代表一定功能的表达式的组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a+b;</span><br></pre></td></tr></table></figure><h3 id="2、但是特定功能需要几条语句实现，太复杂"><a href="#2、但是特定功能需要几条语句实现，太复杂" class="headerlink" title="2、但是特定功能需要几条语句实现，太复杂"></a>2、但是特定功能需要几条语句实现，太复杂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">statement1; </span><br><span class="line">statement2;</span><br><span class="line"> statement3;</span><br></pre></td></tr></table></figure><p>那么，可以将语句打包成一个函数，然后调用这个函数即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function  doSomething()&#123; statement1; statement2; statement3;  &#125;</span><br></pre></td></tr></table></figure><p>调用这个函数。调用函数通过<strong>函数名称( )</strong>的形式调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething();  //需要的时候就调用</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function  sum()&#123; </span><br><span class="line">          console.log(&apos;hello&apos;)</span><br><span class="line">          console.log(&apos;wangxiaoqin&apos;) </span><br><span class="line">         &#125;  sum()  </span><br><span class="line">//返回</span><br><span class="line">//&quot;hello&quot; </span><br><span class="line">//&quot;wangxiaoqin&quot;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h1 id="二、声明函数"><a href="#二、声明函数" class="headerlink" title="二、声明函数"></a>二、声明函数</h1><p>ECMAScript规定三种声明函数方式</p><h3 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//使用function关键字可以声明一个函数  </span><br><span class="line">//printName()   即函数名称() ，可调用  </span><br><span class="line">function  printName()&#123;</span><br><span class="line">          console.log(&apos;世界&apos;)；</span><br><span class="line">    &#125; </span><br><span class="line"> printName()；</span><br></pre></td></tr></table></figure><h3 id="2、函数表达式"><a href="#2、函数表达式" class="headerlink" title="2、函数表达式"></a>2、函数表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 通过var 进行一个声明变量，这里的  变量  等同于 函数表达式*/</span><br><span class="line"> var printName =  function()&#123;</span><br><span class="line">             console.log(&apos;饥人谷&apos;) </span><br><span class="line">      &#125;；</span><br><span class="line"> printName() </span><br><span class="line"></span><br><span class="line"> //等同于 </span><br><span class="line"> var printName =  3；</span><br></pre></td></tr></table></figure><p><strong>函数声明VS函数表达式</strong></p><h3 id="3、构造函数（不常用）"><a href="#3、构造函数（不常用）" class="headerlink" title="3、构造函数（不常用）"></a>3、构造函数（不常用）</h3><p>通过构造函数，使用<code>new</code>来创建一个函数对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var printName =  new  Function(&quot;console.log(&apos;Byron&apos;);&quot;);</span><br></pre></td></tr></table></figure><h1 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数"></a>三、参数</h1><h3 id="1、只使用定义函数较为僵化，可通过参数方式让函数调用、复用。"><a href="#1、只使用定义函数较为僵化，可通过参数方式让函数调用、复用。" class="headerlink" title="1、只使用定义函数较为僵化，可通过参数方式让函数调用、复用。"></a>1、只使用定义函数较为僵化，可通过参数方式让函数调用、复用。</h3><p>举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   function  printName(name)&#123; </span><br><span class="line">  //括号中的name为函数的参数 </span><br><span class="line">     console.log(name) </span><br><span class="line">        &#125;  </span><br><span class="line">printName(&apos;hunger&apos;)  </span><br><span class="line">printName(&apos;valley)  //等同于在函数设置变量  </span><br><span class="line">function  printName()&#123;  //括号为空括号 </span><br><span class="line">   var name = arguments[0]</span><br><span class="line">   console.log(name);  </span><br><span class="line">    &#125; </span><br><span class="line">   printName(&apos;hunger&apos;); </span><br><span class="line"></span><br><span class="line">  //假设没有传递参数 </span><br><span class="line">   function  printName()&#123;  //括号为空括号 </span><br><span class="line">  var name = arguments[0] </span><br><span class="line">   console.log(name);  </span><br><span class="line">       &#125;  </span><br><span class="line">      printName();  //arguments[0] 为undefined，name=undefined ,那么结果为undefined </span><br><span class="line"></span><br><span class="line"> //函数在定义的时候可以写多个参数  </span><br><span class="line">      function  printPersonInfo(name, age, sex)&#123; </span><br><span class="line">         console.log(name)</span><br><span class="line">         console.log(age)</span><br><span class="line">          console.log(sex)  &#125;</span><br></pre></td></tr></table></figure><h3 id="2、Arguments传参数"><a href="#2、Arguments传参数" class="headerlink" title="2、Arguments传参数"></a>2、Arguments传参数</h3><p>通过函数内部的<code>arguments</code>对象获取到该函数的所有传入参数（按顺序传入），通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(arguments)  //输出每一个参数的值</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function  printPersonInfo(name, age, sex)&#123; console.log(name) console.log(age) console.log(sex) console.log(arguments) 即：</span><br><span class="line">console.log(arguments[0]===name) console.log(arguments.length) console.log(arguments[1]  === age)  &#125;</span><br></pre></td></tr></table></figure><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><p>例1：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19aeacb56?w=600&amp;h=338&amp;f=jpeg&amp;s=21407" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19aeacb56?w=600&amp;h=338&amp;f=jpeg&amp;s=21407" alt="image"></a></p><p>例2：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19ae9258a?w=600&amp;h=124&amp;f=jpeg&amp;s=10691" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19ae9258a?w=600&amp;h=124&amp;f=jpeg&amp;s=10691" alt="image"></a></p><p>例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function  getInfo(name, age, sex)&#123; </span><br><span class="line">           console.log(&apos;name:&apos;,name);</span><br><span class="line">           console.log(&apos;age:&apos;, age); </span><br><span class="line">           console.log(&apos;sex:&apos;, sex);</span><br><span class="line">           console.log(arguments); </span><br><span class="line">            arguments[0]  =  &apos;valley&apos;; </span><br><span class="line">            console.log(&apos;name&apos;, name);  </span><br><span class="line">          &#125;  </span><br><span class="line"> getInfo(&apos;小明&apos;,  2,  &apos;男&apos;); </span><br><span class="line"> getInfo(&apos;小小明&apos;,  3); </span><br><span class="line"> getInfo(&apos;男&apos;);</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function  getInfo(name, age, sex)&#123; </span><br><span class="line">            console.log(&apos;name:&apos;,name); </span><br><span class="line">            console.log(&apos;age:&apos;, age); </span><br><span class="line">            console.log(&apos;sex:&apos;, sex); </span><br><span class="line">            console.log(arguments);</span><br><span class="line">            arguments[0]  =  &apos;valley&apos;; </span><br><span class="line">            console.log(&apos;name&apos;, name); </span><br><span class="line">     &#125; </span><br><span class="line"> getInfo(&apos;小明&apos;,  2,  &apos;男&apos;); </span><br><span class="line"></span><br><span class="line">传递的参数：最终获得的值</span><br><span class="line">name:小明 //函数内部对参数无赋值，所以选择输入的值。 </span><br><span class="line">age:  2  //理由同上 </span><br><span class="line">sex: 男 //理由同上  </span><br><span class="line">0:valley //console.log(arguments)表示输出每一个参数的值。 </span><br><span class="line">于是先读取getInfo函数自己的局部环境，读取到了valley。</span><br><span class="line">于是显示valley。 </span><br><span class="line">1:  2  //先读取getInfo函数自己的局部环境，没读取到值。于是向上找，找到了输入的值2。  </span><br><span class="line">3: 男 //理由同上 </span><br><span class="line">name: valley //在getInfo函数的局部环境里向上读取，在上方发现了name赋值，所以显示valley。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function  getInfo(name, age, sex)&#123; </span><br><span class="line">             console.log(&apos;name:&apos;,name); </span><br><span class="line">             console.log(&apos;age:&apos;, age);</span><br><span class="line">            console.log(&apos;sex:&apos;, sex); </span><br><span class="line">            console.log(arguments); </span><br><span class="line">            arguments[0]  =  &apos;valley&apos;; </span><br><span class="line">             console.log(&apos;name&apos;, name);</span><br><span class="line">  &#125; </span><br><span class="line"> getInfo(&apos;小小明&apos;,  3); </span><br><span class="line"></span><br><span class="line">name: 小小明 //函数内部对参数无赋值，所以选择输入的值。 </span><br><span class="line">age:  3  //理由同上。 </span><br><span class="line">sex: undefined //第三个参数没有输入，所以显示undefined。  </span><br><span class="line">0: valley //console.log(arguments)表示输出每一个参数的值。于是先读取getInfo函数自己的局部环境，  //读取到了valley。于是显示valley。  </span><br><span class="line">1:  3  //函数内部对参数无赋值，所以选择输入的值。 </span><br><span class="line">name: valley //在函数局部环境内向上读取发现已经对name赋值，所以显示valley。</span><br><span class="line">function  getInfo(name, age, sex)&#123;  </span><br><span class="line">               console.log(&apos;name:&apos;,name); </span><br><span class="line">               console.log(&apos;age:&apos;, age); </span><br><span class="line">               console.log(&apos;sex:&apos;, sex);</span><br><span class="line">               console.log(arguments);</span><br><span class="line">               arguments[0]  =  &apos;valley&apos;; </span><br><span class="line">               console.log(&apos;name&apos;, name); \</span><br><span class="line"> &#125;  </span><br><span class="line">getInfo(&apos;男&apos;); </span><br><span class="line"></span><br><span class="line">name: 男 //在自己的局部环境的上方没有读取到值，所以向上一级读取，显示为男。</span><br><span class="line">age:undefined //整个环境内都没有赋值，所以显示为undefined sex:undefined //整个环境内都没有赋值，所以显示为undefined  </span><br><span class="line">0: valley //console.log(arguments)表示输出每一个参数的值。于是先读取getInfo函数自己的局部环境， 读取到了valley。于是显示valley。</span><br><span class="line">name:valley //在函数局部环境内向上读取发现已经对name赋值，所以显示valley。</span><br></pre></td></tr></table></figure><p><strong>题外话：</strong><br>函数是有参数的，在声明函数的时候可以在定义的函数旁加一个参数，当你要执行的时候，需要调用带有该参数的函数，如果没有传递这个参数的话，相当于这个带有参数的函数结果就为：<code>undefined</code><br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function  printName()&#123; </span><br><span class="line">          var name = arguments[0]</span><br><span class="line">          console.log(name);  </span><br><span class="line">      &#125;</span><br><span class="line"> printName() </span><br><span class="line"></span><br><span class="line">--&gt;输出：undefined</span><br></pre></td></tr></table></figure><p>图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19b1e6a81?w=600&amp;h=195&amp;f=jpeg&amp;s=11952" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19b1e6a81?w=600&amp;h=195&amp;f=jpeg&amp;s=11952" alt="image"></a></p><h3 id="5、函数返回值"><a href="#5、函数返回值" class="headerlink" title="5、函数返回值"></a>5、函数返回值</h3><p>函数，即把一段语句包装起来，调用函数的参数的时候，就会执行这些语句，更多的是得到一些结果。就像表达式给一个结果，希望函数执行后给一个反馈，我们可以通过<code>return</code>来实现<br>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function  sum(a,b,c)&#123; </span><br><span class="line">        console.log(a+b)  //只是把计算的结果展示在控制台，无其他事（用户若不打开控制台无意义）  </span><br><span class="line">         return a+b &#125;</span><br><span class="line">  var result =  sum(4,6) </span><br><span class="line">       console.log(result)  //返回10</span><br></pre></td></tr></table></figure><p><strong>假设：没有return，会出现什么结果呢？</strong><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19b21ed69?w=600&amp;h=289&amp;f=jpeg&amp;s=16245" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8e19b21ed69?w=600&amp;h=289&amp;f=jpeg&amp;s=16245" alt="image"></a></p><p>以上结果以说明，<code>console.log(a+b)</code>，输出10，只是把计算结果呈现在控制台，表示它做了这件事情，只不过没有把结果返回。但是<code>console.log(a+b)</code>本身也是一个函数，整个函数本质上执行的结果为<code>undefined</code>，调用<code>result</code>，结果也是<code>undefined</code></p><p>❌错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function  sum(a,b,c)&#123; </span><br><span class="line">             return console.log(a+b) </span><br><span class="line">     &#125;  </span><br><span class="line">       var result =  sum(4,6) </span><br><span class="line">        console.log(result)  </span><br><span class="line">//返回10  </span><br><span class="line">//undefined</span><br></pre></td></tr></table></figure><p>但是有这样的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">         function  fn(score)&#123; </span><br><span class="line">                    if(score&lt;0) </span><br><span class="line">                     return console.log(score)</span><br><span class="line">           &#125; </span><br><span class="line">               fn(-3)  </span><br><span class="line"></span><br><span class="line">//等同于 </span><br><span class="line"></span><br><span class="line">            function  fn(score)&#123; </span><br><span class="line">                    if(score&lt;0)  &#123; </span><br><span class="line">                        return undefined </span><br><span class="line">           &#125; </span><br><span class="line">              console.log(score) </span><br><span class="line">     &#125;    </span><br><span class="line">             fn(-3)  </span><br><span class="line"></span><br><span class="line">    //等同于 </span><br><span class="line">               function  fn(score)&#123;  </span><br><span class="line">                         if(score&lt;0)  &#123;</span><br><span class="line">                        &#125; </span><br><span class="line">                    else&#123; </span><br><span class="line">                         console.log(score)  </span><br><span class="line">                    &#125; </span><br><span class="line">              &#125; </span><br><span class="line">             fn(-3)</span><br></pre></td></tr></table></figure><h1 id="四、重载"><a href="#四、重载" class="headerlink" title="四、重载"></a>四、重载</h1><h3 id="1、什么是函数重载"><a href="#1、什么是函数重载" class="headerlink" title="1、什么是函数重载"></a>1、什么是函数重载</h3><p>重载是很多面向对象语言实现多态的手段之一，在静态语言中确定一个函数的手段是靠方法签名——函数名+参数列表，也就是说相同名字的函数参数个数不同或者顺序不同都被认为是不同的函数，称为函数重载。</p><h3 id="2、JS没有函数重载"><a href="#2、JS没有函数重载" class="headerlink" title="2、JS没有函数重载"></a>2、JS没有函数重载</h3><p>在JavaScript中没有函数重载的概念，函数通过名字确定唯一性，参数不同也被认为是相同的函数，后面的覆盖前面。函数调用没必要把所有参数都传入，只要你函数体内做好处理就行，但前提是传的参数永远被当做前几个<br>传递不同的参数，做不同的事情，根据函数中参数类型和个数去进行逻辑判断。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;总结：数字-undefined-Nan&quot;&gt;&lt;a href=&quot;#总结：数字-undefined-Nan&quot; class=&quot;headerlink&quot; title=&quot;总结：数字+undefined===Nan&quot;&gt;&lt;/a&gt;总结：数字+undefined===Nan&lt;/h4&gt;&lt;h1 id=&quot;一、函数的使用&quot;&gt;&lt;a href=&quot;#一、函数的使用&quot; class=&quot;headerlink&quot; title=&quot;一、函数的使用&quot;&gt;&lt;/a&gt;一、函数的使用&lt;/h1&gt;&lt;h3 id=&quot;1、什么是语句：先看这几个概念&quot;&gt;&lt;a href=&quot;#1、什么是语句：先看这几个概念&quot; class=&quot;headerlink&quot; title=&quot;1、什么是语句：先看这几个概念&quot;&gt;&lt;/a&gt;1、什么是语句：先看这几个概念&lt;/h3&gt;&lt;p&gt;表达式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a=1 a+b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeof&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:03流程控制判断</title>
    <link href="http://yoursite.com/2018/12/03/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A03%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2018/12/03/面对JavaScript吧！：03流程控制判断/</id>
    <published>2018-12-03T01:47:26.000Z</published>
    <updated>2018-12-06T13:48:40.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、if语句"><a href="#一、if语句" class="headerlink" title="一、if语句"></a>一、if语句</h1><p>if语句是编程语言最常用的语句，</p><h3 id="1、语法："><a href="#1、语法：" class="headerlink" title="1、语法："></a>1、语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(condition)&#123;  </span><br><span class="line">           //true statement  </span><br><span class="line">&#125;else  &#123; </span><br><span class="line"> //false statement </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>其中condition可以是任意表达式，结果不一定是布尔值，JavaScript解释器会自动调用<code>Boolean()</code>将表达式结果转为布尔值，如果表达式为真，执行第一个代码块内语句；如果为假，执行第二个代码块内语句</p><p>if语句可以单独使用，也可以和多个<code>else</code>连续使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 满足这些条件做对应的事情*/</span><br><span class="line">  if(a &gt;  2)&#123;</span><br><span class="line">  // statement </span><br><span class="line"> &#125; </span><br><span class="line"> if( a ==  1)&#123; </span><br><span class="line"> &#125;else </span><br><span class="line"> if(a ==  2)&#123;  </span><br><span class="line">&#125;else </span><br><span class="line"> if(a ==  3  )&#123; </span><br><span class="line"> &#125;else&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子:"></a>2、例子:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =  1</span><br><span class="line">  if(a ===  1)&#123;</span><br><span class="line"> console.log(&apos;ok&apos;) </span><br><span class="line"> &#125;else&#123; </span><br><span class="line">console.log(&apos;not ok&apos;) </span><br><span class="line"> &#125;  </span><br><span class="line">---&gt;&quot;ok&quot;</span><br></pre></td></tr></table></figure><h1 id="二、switch语句"><a href="#二、switch语句" class="headerlink" title="二、switch语句"></a>二、switch语句</h1><p><strong>注：</strong> JavaScript switch语句虽然参考的C语言的写法，但是有特殊性</p><ul><li><code>switch</code>和<code>case</code>可以使用任意表达式，不一定是常量</li><li>switch语句进行比较的时候是全等于（<code>===</code>）操作，不会发生类型转换</li></ul><h3 id="1、语法：-1"><a href="#1、语法：-1" class="headerlink" title="1、语法："></a>1、语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(expresstion)&#123;</span><br><span class="line">        case value1:  //该条件：（满足）这个值</span><br><span class="line">           statement;  //则执行该语句 </span><br><span class="line">                 break;  //强制输出  </span><br><span class="line">       case value2: </span><br><span class="line">          statement;  </span><br><span class="line">                 break;  </span><br><span class="line">              default: </span><br><span class="line">                  statement;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、例子："><a href="#2、例子：" class="headerlink" title="2、例子："></a>2、例子：</h3><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8745224a275?w=600&amp;h=355&amp;f=jpeg&amp;s=26678" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8745224a275?w=600&amp;h=355&amp;f=jpeg&amp;s=26678" alt="image"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var score =prompt(&apos;请输入分数&apos;)  </span><br><span class="line">switch  (score)&#123;  </span><br><span class="line">        case  100: console.log(&apos;100分&apos;)  </span><br><span class="line">            break;  </span><br><span class="line">        case  99:  consolelog(&apos;99分&apos;)  </span><br><span class="line">            break;  </span><br><span class="line">        default:</span><br><span class="line">             console.log(&apos;其他分数&apos;)  &#125;  </span><br><span class="line">     --&gt;可弹出一个表单输入框输入分数</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c8745236d5d3?w=600&amp;h=230&amp;f=jpeg&amp;s=16408" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c8745236d5d3?w=600&amp;h=230&amp;f=jpeg&amp;s=16408" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c874523939bd?w=600&amp;h=274&amp;f=jpeg&amp;s=17178" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c874523939bd?w=600&amp;h=274&amp;f=jpeg&amp;s=17178" alt="image"></a></p><p><strong>题外话：</strong><br><code>break</code>，如果表达式等于case的值，对应的语句就会执行，<code>break</code>关键字会使程序跳出switch语句，很多编程规范强调必须添加<code>break</code>，不添加不会有语法错误，程序会多次判断<code>case</code>，进入相应流程。</p><p>当没有一个值符合<code>case</code>或者没有<code>break</code>，流程则进入<code>default</code>子句，很多规范也强调必须添加<code>default</code>部分<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c874526b7f37?w=600&amp;h=450&amp;f=jpeg&amp;s=27021" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c874526b7f37?w=600&amp;h=450&amp;f=jpeg&amp;s=27021" alt="image"></a></p><p><strong>break VS continue</strong><br>break关键字在<code>switch</code>语句中已经见过，这两个关键字多用在循环语句中</p><ul><li><code>break</code> 用于强制退出循环体，执行循环后面的语句</li><li><code>continue</code> 用于退出本次循环，执行下次循环</li></ul><p>例子：</p><ul><li><p><strong>break</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i =  1; i&lt;  10;    //第一步   i++   //第三步（2）（如果不符合函数：i % 4 === 0，继续循环）)&#123; </span><br><span class="line">            if(i %  4  ===  0)&#123;  </span><br><span class="line">            break;  &#125;//第二步</span><br><span class="line">                   console.log(i);     //第三步（1）（如果符合函数：i % 4 === 0，输出相应值，；如果不符合， 输出当值，继续执行第三步（2）） </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>continue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i =  1; i&lt;  10; i++)&#123;</span><br><span class="line">                 if(i %  4  ===  0)&#123; </span><br><span class="line">                            continue;  //如果符合函数条件：i % 4 === 0，那么则直接退出本循环，不输出（跳过） 此次结果，继续执行i&lt;  10这个条件的循环 &#125; </span><br><span class="line">                 console.log(i); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c874524bc969?w=600&amp;h=239&amp;f=jpeg&amp;s=9681" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c874524bc969?w=600&amp;h=239&amp;f=jpeg&amp;s=9681" alt="image"></a></p><h1 id="三、循环语句：while和do-while"><a href="#三、循环语句：while和do-while" class="headerlink" title="三、循环语句：while和do-while"></a>三、循环语句：<code>while</code>和<code>do-while</code></h1><h3 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a>1、while循环</h3><blockquote><p>先条件判断，后执行</p></blockquote><p>while 语句，属于前测试循环语句，也就是在循环体内的代码被执行之前，就会对条件求值，不符合的话就不会执行<br>（1）语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(expression)&#123; </span><br><span class="line">          statement;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>（2）例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var i =  10;  while(i &gt;  0)&#123;</span><br><span class="line">             console.log(i);</span><br><span class="line">              i--; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c874526b3eda?w=600&amp;h=285&amp;f=jpeg&amp;s=8893" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c874526b3eda?w=600&amp;h=285&amp;f=jpeg&amp;s=8893" alt="image"></a></p><h3 id="2、do-while循环"><a href="#2、do-while循环" class="headerlink" title="2、do-while循环"></a>2、<code>do-while</code>循环</h3><blockquote><p>先执行，后条件判断</p></blockquote><p>do-while是后测试循环语句，在出口条件判断之前就会执行一次代码<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  do&#123; </span><br><span class="line">      statement;</span><br><span class="line">&#125;while(expression);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i =  4; </span><br><span class="line"> do&#123; </span><br><span class="line">        console.log(i); i--; </span><br><span class="line">        &#125;while(i &gt;  5);  </span><br><span class="line">   --&gt;4</span><br></pre></td></tr></table></figure><h3 id="3、for循环"><a href="#3、for循环" class="headerlink" title="3、for循环"></a>3、for循环</h3><p>（1）for语句，前测试循环语句。具备在执行循环代码以前初始化变量和定义循环后要执行代码的能力，改造一下while语句<br>A、语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i =  10; i &gt;  0;//第一步 i-- //第三步)&#123; </span><br><span class="line">                  console.log(i);//第二步</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>（2）<code>for-in</code>语句<br>for-in是一种迭代语句，用于枚举对象的属性<br>A、语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   for(property in object)&#123; </span><br><span class="line">                statement </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B、例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var prop in window)&#123; </span><br><span class="line">                 console.log(prop); </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为ECMAScript规定对象中的属性没有顺序，所以<code>for-in</code>遍历出来的属性的顺序也不是固定的（虽然大部分浏览器是按属性名称排序，我们不能依赖这个）</p><h1 id="四、label语句"><a href="#四、label语句" class="headerlink" title="四、label语句"></a>四、label语句</h1><p>label语句是很多熟练的jser都会忽略的知识，我们可以为代码添加标签，方便后续使用。label语句单独使用的时候没有什么作用几乎，经常和其它语句结合使用。</p><h3 id="1、语法：-2"><a href="#1、语法：-2" class="headerlink" title="1、语法："></a>1、语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelname: statement;</span><br></pre></td></tr></table></figure><h3 id="2、例子：-1"><a href="#2、例子：-1" class="headerlink" title="2、例子："></a>2、例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =  1,</span><br><span class="line"> b =  2,</span><br><span class="line"> c =  3, </span><br><span class="line"> d =  4, </span><br><span class="line"> e =  5,</span><br><span class="line"> f =  6; </span><br><span class="line">a:b:c:d:e:f:7;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、if语句&quot;&gt;&lt;a href=&quot;#一、if语句&quot; class=&quot;headerlink&quot; title=&quot;一、if语句&quot;&gt;&lt;/a&gt;一、if语句&lt;/h1&gt;&lt;p&gt;if语句是编程语言最常用的语句，&lt;/p&gt;
&lt;h3 id=&quot;1、语法：&quot;&gt;&lt;a href=&quot;#1、语法：&quot; class=&quot;headerlink&quot; title=&quot;1、语法：&quot;&gt;&lt;/a&gt;1、语法：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(condition)&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           //true statement  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else  &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //false statement &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:02数据类型、运算符、运算符优先级</title>
    <link href="http://yoursite.com/2018/12/02/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A02%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://yoursite.com/2018/12/02/面对JavaScript吧！：02数据类型、运算符、运算符优先级/</id>
    <published>2018-12-02T07:24:53.000Z</published>
    <updated>2018-12-05T14:02:37.262Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>最近在学习javascript中数据类型、运算符，以及运算符优先级等相关基础知识，相对简单、基础但也很重要。加上老师的推荐看了阮一峰老师所写的《javascript教程》。从中刷新了过往认知的概念和固有的规则，明白了javascript的出现会打破以往的惯性思维。<a id="more"></a> 在这里<code>1+1</code>不再一定等于<code>2</code>，你常见的算数符号也不是你通常认为的那种作用，一个数字可以是表达式，同时一个表达式也是一个值。。。所以学习这样一种新知识，你要学会先接受，然后敢于去打破自身的思维惯性，之后才能勇于迎接更多挑战。</p><h1 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h1><h3 id="1、调试"><a href="#1、调试" class="headerlink" title="1、调试"></a>1、调试</h3><p>打开chrome开发工具：右键——检查——console（esc键调取另一个console）</p><ul><li>Win F12</li><li>Mac   Command + Option + I</li><li>Windows / Linux   Ctrl + Shift + I</li></ul><h3 id="2、语句"><a href="#2、语句" class="headerlink" title="2、语句"></a>2、语句</h3><p>（1）语句 VS 表达式<br>A、区别：</p><ul><li>语句，主要为了进行某种任务而进行的操作，一般情况下不需要返回值；</li><li>表达式，为了得到返回值的计算式，一定会返回一个值。凡是JavaScript语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式</li></ul><p>B、例子：</p><ul><li>赋值语句：<code>var a = 1 + 3;</code> //先用var命令，声明了变量<code>a</code>，然后将<code>1 + 3</code>的运算结果赋值给变量a</li><li>表达式：<code>1 + 3</code></li></ul><p>（2）分号<br>分号前面可以没有任何内容，JavaScript引擎将其视为空语句。<code>;;;</code><br>A、语句，以分号结尾。<br>一个分号就表示一个语句结束。多个语句可以写在一行内。不需要加分号，换行默认上一行为语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a =  1  +  3  ;  </span><br><span class="line">var b =  &apos;abc&apos;; </span><br><span class="line">/*或*/</span><br><span class="line">var a =  3 </span><br><span class="line">var b =  4  </span><br><span class="line">var c = a+b</span><br></pre></td></tr></table></figure><p>B、表达式不需要分号结尾。一旦在表达式后面添加分号，则JavaScript引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。下面两行语句有返回值，但是没有任何意义，因为只是返回一个单纯的值，没有任何其他操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1  +  3;  //语句，但无任何意义 </span><br><span class="line"> &apos;abc&apos;;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aabc568a4?w=472&amp;h=182&amp;f=jpeg&amp;s=6726" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aabc568a4?w=472&amp;h=182&amp;f=jpeg&amp;s=6726" alt="image"></a></p><h3 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h3><p>（1）定义<br>最前面的var是变量声明命令。它表示通知解释引擎，要创建一个变量a（相当于申请了1个内存放在变量a这里）。<br>变量是对“值”的引用，使用变量等同于引用一个值。每一个变量都有一个变量名。如：<br><code>var a = 1;</code></p><p>（2）变量提升<br>A、定义：<br>变量提升（hoisting），即JavaScript引擎的工作方式是：先解析代码获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有变量的声明语句，都会被提升到代码的头部，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//假设 </span><br><span class="line">var a = 1</span><br><span class="line"></span><br><span class="line">/*这里会产生一个变量提升*/</span><br><span class="line">var a ;</span><br><span class="line">a =1;</span><br><span class="line"></span><br><span class="line">/* 或*/</span><br><span class="line">a = 3</span><br><span class="line">var a</span><br><span class="line">/* 控制台显示并不会报错，只要有var变量命令的声明，默认情况下就会自动提升到最前面，之后再作赋值*/</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 变量提升只对var命令声明的变量有效，如果一个变量不是用var命令声明的，就不会发生变量提升。</p><p>B、说说变量提升的几种场景<br><strong>第1种场景：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);  var a =  1;</span><br></pre></td></tr></table></figure><p>代码首先使用<code>console.log</code>方法，在控制台显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为有var存在，即也存在变量提升，引擎中真正运行的是下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a; console.log(a); a =  1;</span><br></pre></td></tr></table></figure><p>最后的结果是显示<code>undefined</code>，表示变量a已声明，且位于最前面，但还未赋值。<br><strong>注：</strong> 这种变量提升的技巧很重要，与之后函数作用，复杂函数执行时所出现的一些情况都可解释</p><p><strong>第2种场景：</strong><br><code>console.log(b); b = 1;</code><br>语句将会报错，提示<code>“ReferenceError:b is not defined”</code>，即变量b未声明，这是因为b不是用<code>var</code>命令声明的，JavaScript引擎不会将其提升，而只是视为对顶层对象的b属性的赋值。</p><h3 id="4、标识符"><a href="#4、标识符" class="headerlink" title="4、标识符"></a>4、标识符</h3><p>（1）定义：<br>标识符（identifier），用来识别具体对象的一个名称。最常见标识符：变量名、函数名。<br><strong>注：</strong> JavaScript语言的标识符对大小写敏感，所以a和A是两个不同的标识符。</p><p>（2）标识符命名规则<br>A、第一个字符，可以是任意Unicode字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。<br>B、第二个字符及后面的字符，除了Unicode字母、美元符号和下划线，还可以用数字0-9。<br>C、一些命名实例：</p><ul><li><p>下面这些都是合法的标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arg0</span><br><span class="line">_tmp</span><br><span class="line">$elem</span><br><span class="line">π</span><br></pre></td></tr></table></figure></li><li><p>下面这些则是不合法的标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1a  // 第一个字符不能是数字</span><br><span class="line">23  // 同上</span><br><span class="line">***  // 标识符不能包含星号</span><br><span class="line">a+b  // 标识符不能包含加号</span><br><span class="line">-d  // 标识符不能包含减号或连词线</span><br></pre></td></tr></table></figure></li><li><p>中文是合法的标识符，可以用作变量名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 临时变量 = 1;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript有一些保留字，不能用作标识符：</p><blockquote><p>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield</p></blockquote></li><li><p>三个词具有特别含义，也不应该用作标识符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Infinity</span><br><span class="line">NaN</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure></li></ul><h3 id="5、注释："><a href="#5、注释：" class="headerlink" title="5、注释："></a>5、注释：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这是单行注释</span><br><span class="line">/*</span><br><span class="line"> 这是</span><br><span class="line"> 多行</span><br><span class="line"> 注释</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//历史上JavaScript兼容HTML代码的注释，所以&lt;!--和--&gt;也被视为单行注释。</span><br><span class="line">x = 1; &lt;!-- x = 2;--&gt; x = 3;</span><br></pre></td></tr></table></figure><h3 id="6、区块"><a href="#6、区块" class="headerlink" title="6、区块"></a>6、区块</h3><p>（1）定义 JavaScript使用大括号，将多个相关的语句组合在一起，称为区块（<code>block</code>）。<br>（2）与大多数编程语言不一样，JavaScript的区块不构成单独的作用域（<code>scope</code>）。即区块中的变量与区块外的变量，属于同一个作用域。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line">a // 1</span><br></pre></td></tr></table></figure><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>JS语言的每一个值，都属于某一种数据类型。</p><h3 id="2、值所属的数据类型分类"><a href="#2、值所属的数据类型分类" class="headerlink" title="2、值所属的数据类型分类"></a>2、值所属的数据类型分类</h3><p>JavaScript 的数据类型，共有6种：</p><p><strong>注：</strong> ES6 又新增了第七种 Symbol 类型的值<br>（1）数值（number）：值为整数和小数（比如1和3.14）<br>（2）字符串（string）：值为字符组成的文本（比如<code>&quot;Hello World&quot;</code>）<br>（3）布尔值（boolean）：值判定为true（真）和false（假）两个特定值</p><p><strong>注：</strong> 用于询问的便可用boolean进行变量命名,如：<br><code>var isBoy = true</code></p><p>（4）<code>undefined</code>：值判定为未处理，未定义或不存在。目前未定义所以此处暂时没有任何值，但之后可以去放东西。<br><strong>注：</strong> 一个变量没有赋值，只能是<code>undefined</code>，不会是<code>null</code></p><p>（5）<code>null</code>：值为表示经过处理之后的无值，即此处的值就是“无”的状态。</p><p>（6）对象（object）：或称“引用类型”，各种值组成的集合。对象=属性+值<br>对象又可以分成三个子类型：</p><ul><li>狭义的对象（object）</li><li>数组（array）</li><li>函数（function）</li></ul><h3 id="3、typeof-运算符（用来确定值所属的数据类型）"><a href="#3、typeof-运算符（用来确定值所属的数据类型）" class="headerlink" title="3、typeof 运算符（用来确定值所属的数据类型）"></a>3、<code>typeof</code> 运算符（用来确定值所属的数据类型）</h3><p>（1）三种运算符用来确定数据类型<br>运算符，用于连接简单表达式，组成一个复杂的表达式（即通过一个关键字，后面加一个变量或值，得出一个结果）</p><p>JavaScript有三种方法，可以确定一个值到底属于什么类型。</p><ul><li><code>typeof</code>运算符</li><li><code>instanceof</code>运算符</li><li><code>Object.prototype.toString</code>方法</li></ul><p>（2）作用<br>用<code>typeof</code>可以判断一个变量或可以返回一个值为哪种数据类型，如：<br>※数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//数值、字符串、布尔值分别返回number、string、boolean。</span><br><span class="line">typeof  123// &quot;number&quot;</span><br><span class="line">typeof  &apos;123&apos;// &quot;string&quot;</span><br><span class="line">typeof  false// &quot;boolean&quot;</span><br></pre></td></tr></table></figure><p>※函数返回function。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">typeof f</span><br><span class="line">// &quot;function&quot;</span><br></pre></td></tr></table></figure><p>※ <code>undefined</code>返回 <code>undefined</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof  undefined</span><br><span class="line">// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>※ 利用这一点，<code>typeof</code>用来检查一个没有声明的变量，而不报错。如代码中变量v没有用var命令声明，直接使用就会报错；但放在<code>typeof</code>后面就不报错了，而是返回<code>undefined</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v</span><br><span class="line">// ReferenceError: v is not defined  </span><br><span class="line"></span><br><span class="line">typeof v</span><br><span class="line">// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>※实际编程中，变量v要用var命令声明，这个特点通常用在判断语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 错误的写法</span><br><span class="line">if (v) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">// ReferenceError: v is not defined</span><br><span class="line"></span><br><span class="line">// 正确的写法</span><br><span class="line">if (typeof v === &quot;undefined&quot;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※除此以外，其他情况都返回<code>object</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//除此以外，其他情况都返回object</span><br><span class="line">typeof window   // &quot;object&quot;</span><br><span class="line">typeof &#123;&#125;      // &quot;object&quot;</span><br><span class="line">typeof []     // &quot;object&quot;</span><br><span class="line">typeof null   // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>实际操作中：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac04e098?w=442&amp;h=630&amp;f=jpeg&amp;s=25888" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac04e098?w=442&amp;h=630&amp;f=jpeg&amp;s=25888" alt="image"></a></p><p>如何判断一个变量是否为函数？<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac1f100a?w=340&amp;h=154&amp;f=jpeg&amp;s=6932" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac1f100a?w=340&amp;h=154&amp;f=jpeg&amp;s=6932" alt="image"></a></p><h3 id="4、布尔值"><a href="#4、布尔值" class="headerlink" title="4、布尔值"></a>4、布尔值</h3><p>（1）作用<br>布尔值代表“真”和“假”两个状态。“真”用关键字true表示，“假”用关键字false表示。布尔值只有这两个值。<br>（2）下列运算符会返回布尔值<br>A、两元逻辑运算符：<code>&amp;&amp;</code>(And)，<code>||</code>(Or)<br>B、前置逻辑运算符：<code>!</code>(Not)<br>C、相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code><br>D、比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code><br>如：<code>4&gt;3--&gt;true</code></p><p>（3）如果JavaScript预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六种值被转为false，其他值都视为true。</p><ul><li><code>undefined</code> –&gt;<code>false</code></li><li><code>null</code> –&gt;<code>false</code></li><li><code>false</code> –&gt;<code>false</code></li><li><code>+0</code>，<code>-0</code>，<code>NaN</code> –&gt; <code>false</code>【其他number（数字）为true】</li><li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）–&gt;<code>false</code>【其他string（字符串,包含<code>&quot; &quot;</code>空白字符串）为true】</li></ul><p>A、关于<code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）布尔值往往用于程序流程的控制，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (&apos;&apos;) &#123;</span><br><span class="line">  console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">/* 没有任何输出*/</span><br><span class="line">/*上面代码的if命令后面的判断条件，预期应该是一个布尔值，所以JavaScript自动将空字符串，转为布尔值false，导致程序不会进入代码块，所以没有任何输出*/</span><br></pre></td></tr></table></figure><p>B、空数组（<code>[]</code>）和空对象（<code>{}</code>）对应的布尔值，都是true。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ([]) &#123;</span><br><span class="line">  console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">if (&#123;&#125;) &#123;</span><br><span class="line">  console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">// true</span><br></pre></td></tr></table></figure><h1 id="三、数据类型转换解密"><a href="#三、数据类型转换解密" class="headerlink" title="三、数据类型转换解密"></a>三、数据类型转换解密</h1><blockquote><p>总结：js的数据类型如何判断，即任何表达式先转字符串再转数字</p></blockquote><h3 id="1、if判断"><a href="#1、if判断" class="headerlink" title="1、if判断"></a>1、if判断</h3><p>（1）js如何转换判断<br>从面试题说说if的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 题目1：如下代码输出什么?</span><br><span class="line">if (&quot;hello&quot;) &#123;</span><br><span class="line">    console.log(&quot;hello&quot;)</span><br><span class="line">&#125;    //true</span><br><span class="line"></span><br><span class="line">// 题目2：如下代码输出什么?</span><br><span class="line">if (&quot;&quot;) &#123;</span><br><span class="line">    console.log(&apos;empty&apos;)</span><br><span class="line">&#125;//空字符串，代表里面什么都没有 //false</span><br><span class="line"></span><br><span class="line">// 题目3：如下代码输出什么?</span><br><span class="line">if (&quot; &quot;) &#123;</span><br><span class="line">    console.log(&apos;blank&apos;)</span><br><span class="line">&#125;//空白字符串，仍然代表一个值，只不过是空值 //true</span><br><span class="line"></span><br><span class="line">// 题目4：如下代码输出什么?</span><br><span class="line">if ([0]) &#123;</span><br><span class="line">    console.log(&apos;array&apos;)//对象 true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if（[]）&#123;</span><br><span class="line">  console.log(&apos;hahah&apos;)</span><br><span class="line">&#125;   //特殊对象 true</span><br><span class="line"></span><br><span class="line">// 题目5：如下代码输出什么?</span><br><span class="line">if(&apos;0.00&apos;)&#123;</span><br><span class="line">  console.log(&apos;0.00&apos;)</span><br><span class="line">&#125;       //字符串（除空字符串外）true</span><br><span class="line"></span><br><span class="line">if（+0.00）&#123;</span><br><span class="line">  console.log(&apos;hahah&apos;)</span><br><span class="line">&#125;       //false</span><br></pre></td></tr></table></figure><p>（2）判断原理：<br>对于<code>if（）</code>里括号的表达式（如以下），会被强制转换为布尔类型</p><ul><li><code>undefined</code> –&gt; <code>false</code></li><li><code>null</code> –&gt;<code>false</code></li><li><code>false`</code> –&gt;<code>false</code></li><li><code>+0</code>，<code>-0</code> ，<code>NaN</code> –&gt;<code>false</code> 【其他number（数字）为true】</li><li><code>&quot;&quot;</code>或<code>&#39;&#39;</code>（空字符串）–&gt;<code>false</code>【其他string（字符串,包含” “空白字符串）为true】</li></ul><h3 id="2、-判断"><a href="#2、-判断" class="headerlink" title="2、==判断"></a>2、<code>==</code>判断</h3><p>（1）js处理 <code>==</code>的表达式 判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot; == 0  //题目1   &quot;&quot;空字符串===false===0  0==0  //true</span><br><span class="line">&quot; &quot; == 0  //题目2   Number(&apos;   &apos;)--&gt;0===false 0==0 //true</span><br><span class="line">&quot;&quot; == true  //题目3   0===1 //false</span><br><span class="line">&quot;&quot; == false  //题目4  0===0 //true</span><br><span class="line">&quot; &quot; == true  //题目5  false===0 0==1 //false</span><br><span class="line"></span><br><span class="line">!&quot; &quot; == true  //题目6      &quot;  &quot;空白字符串===true !0===false===0  0不等于true  //false</span><br><span class="line">!&quot; &quot; == false  //题目7       false==false //true</span><br><span class="line">*&quot;hello&quot; == true  //题目8    字母字符串===Nan  Nan不等于1 //fasle</span><br><span class="line">*&quot;hello&quot; == false //题目9    字母字符串===Nan  Nan不等于0  //fasle</span><br><span class="line">&quot;0&quot; == true  //题目10        &quot;0&quot;（数字字符串）===0不等于1  //false</span><br><span class="line">&quot;0&quot; == false  //题目11       &quot;0&quot;（数字字符串）===0===0    //true</span><br><span class="line">&quot;00&quot; == false  //题目12     &quot;00&quot;（数字字符串）===00===0   //true</span><br><span class="line">&quot;0.00&quot; == false  //题目13    &quot;0.00&quot;（数字字符串）===0===0  //true</span><br><span class="line">undefined == null  //题目14   undefined===Nan===null //true</span><br><span class="line">&#123;&#125; == true  //题目15           &#123;&#125;===object（没有字符串）不等于true  //fasle</span><br><span class="line"></span><br><span class="line">[] == true  //题目16           []（空数组）===object（没有字符串）不等于true   //fasle</span><br><span class="line"></span><br><span class="line">var obj = &#123; </span><br><span class="line">  a: 0, </span><br><span class="line">  valueOf: function()&#123;return 1&#125; </span><br><span class="line">&#125; </span><br><span class="line">obj == &quot;[object Object]&quot;  //题目17  //false</span><br><span class="line">obj == 1  //题目18                  //true</span><br><span class="line">obj == true  //题目19               //true</span><br></pre></td></tr></table></figure><p>（2）判断原理<br>两图对照，就能判断表达式的数据类型：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac27ffd8?w=600&amp;h=200&amp;f=jpeg&amp;s=9068" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac27ffd8?w=600&amp;h=200&amp;f=jpeg&amp;s=9068" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac2f63aa?w=600&amp;h=197&amp;f=jpeg&amp;s=9729" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac2f63aa?w=600&amp;h=197&amp;f=jpeg&amp;s=9729" alt="image"></a></p><h1 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h1><h3 id="1、作用："><a href="#1、作用：" class="headerlink" title="1、作用："></a>1、作用：</h3><p>运算符，主要用于连接简单表达式，组成一个复杂的表达式<br>如<code>typeof</code>，为运算符。即<code>typeof 100 === &#39;numeber&#39;</code> 是一个值为字符串<code>&#39;numeber&#39;</code>的表达式<br>再如：</p><ul><li><code>3</code> ： 表达式</li><li><code>3+4</code>：表达式<br><code>+</code> :为运算符</li><li><code>（1+2）*5</code>：表达式。<br><code>+</code>和<code>*</code> : 均为运算符</li></ul><h3 id="2、判断参考标准："><a href="#2、判断参考标准：" class="headerlink" title="2、判断参考标准："></a>2、判断参考标准：</h3><p>（1）有些操作符对不同的数据类型有不同的含义，比如<code>+</code>,在两个操作数都是数字的时候，会做加法运算<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac37bee1?w=600&amp;h=179&amp;f=jpeg&amp;s=13261" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61aac37bee1?w=600&amp;h=179&amp;f=jpeg&amp;s=13261" alt="image"></a></p><p>（2）两个参数都是字符串或在有一个参数是字符串的情况下会把另外一个参数转换为字符串,做字符串拼接<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ace90110d?w=600&amp;h=168&amp;f=jpeg&amp;s=14179" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ace90110d?w=600&amp;h=168&amp;f=jpeg&amp;s=14179" alt="image"></a></p><p>（3）在参数有对象的情况下会调用其valueOf或toString的函数（两者同时使用，注意优先级）<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad41d9bec?w=600&amp;h=281&amp;f=jpeg&amp;s=24637" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad41d9bec?w=600&amp;h=281&amp;f=jpeg&amp;s=24637" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad81a9f23?w=600&amp;h=305&amp;f=jpeg&amp;s=25720" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad81a9f23?w=600&amp;h=305&amp;f=jpeg&amp;s=25720" alt="image"></a></p><p>（4）在只有一个字符串参数的时候会尝试将其转换为数字<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad4ccac5d?w=600&amp;h=309&amp;f=jpeg&amp;s=25305" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61ad4ccac5d?w=600&amp;h=309&amp;f=jpeg&amp;s=25305" alt="image"></a></p><p><strong>注：</strong> 如果字符串无法转换成数字，那么则转换失败，通常结果为：<code>Nan</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b007ff5ae?w=600&amp;h=317&amp;f=jpeg&amp;s=28349" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b007ff5ae?w=600&amp;h=317&amp;f=jpeg&amp;s=28349" alt="image"></a></p><p>（5）在只有一个数字参数的时候返回其正数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(2+4);   //6     加法运算</span><br><span class="line">console.log(&quot;2&quot;+&quot;4&quot;); //&quot;24&quot;为字符串  字符串的拼接</span><br><span class="line">console.log(2+&quot;4&quot;);  //&quot;24&quot;           一个数字+字符串，会把数字转化成字符串，然后再进行拼接，</span><br><span class="line">不是一个连读的数字24，而是2和4的分开读</span><br><span class="line">console.log(2+new Date());//&quot;2Mon Jan 20 2014 17:15:01 GMT+0800                               (China Standard Time)&quot;</span><br><span class="line"></span><br><span class="line">/* 一个数字+一个对象，会调用这个对象的valueOf或toString这个方法*/</span><br><span class="line">console.log(+&quot;4&quot;);//4</span><br></pre></td></tr></table></figure><h3 id="3、常见类型："><a href="#3、常见类型：" class="headerlink" title="3、常见类型："></a>3、常见类型：</h3><ul><li>算数表达式</li><li>比较表达式</li><li>逻辑表达式</li><li>赋值表达式</li><li>单目运算符</li><li>关键字作为运算符，如<code>typeof</code>、<code>delete</code>、<code>instanceof</code>等</li></ul><p>（1）算数表达式<br>A、加法运算符（Addition）：<code>x + y</code><br>B、减法运算符（Subtraction）：<code>x - y</code><br>C、乘法运算符（Multiplication）：<code>x * y</code><br>D、除法运算符（Division）：<code>x / y</code><br>加减乘除的运算，这里会尽可能将字符串转化成数字，如果转换不了数字，则会得出<code>Nan</code>这个结果<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b032cfef7?w=600&amp;h=318&amp;f=jpeg&amp;s=21225" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b032cfef7?w=600&amp;h=318&amp;f=jpeg&amp;s=21225" alt="image"></a></p><p>E、余数运算符（Remainder）：<code>x % y</code> 用于循环语句<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b05683d9a?w=600&amp;h=359&amp;f=jpeg&amp;s=28151" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b05683d9a?w=600&amp;h=359&amp;f=jpeg&amp;s=28151" alt="image"></a></p><p>F、自增运算符（Increment）：<code>x ++</code>或者<code>++x</code></p><ul><li><code>x++</code>,由简单表达式（<code>x</code>）和运算符（<code>++</code>）组成一个复杂的表达式，一个表达式本身整体，就是一个值，那么<code>x++</code>的值就是x的原始值;</li><li><code>x++</code>，作为表达式的结果是是它自己本身，同一作用域中的下一个变量，则是<code>x++</code>内部又自增了1，即<code>x=x+1</code></li></ul><p><strong>注：</strong></p><ul><li><code>x++</code>：是自增前x的原始值</li><li><code>++x</code>：是自增后下一个x变量的值<br>如：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b0f619a49?w=600&amp;h=196&amp;f=jpeg&amp;s=16930" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b0f619a49?w=600&amp;h=196&amp;f=jpeg&amp;s=16930" alt="image"></a></li></ul><p>而<code>++ e</code>则是自增后的那个值，图1所示，自增+1的<code>e ===10</code>，那么<code>++e === 11</code></p><ul><li>自减运算符（Decrement）：<code>--x</code>或者 <code>x--</code><br>同上可得</li><li>求负运算符（Negate）：<code>-x</code></li><li>数值运算符（Convert to number）：<code>+x</code></li></ul><p>（2）赋值运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x += y // 等同于 x = x + y</span><br><span class="line">x -= y // 等同于 x = x - y</span><br><span class="line">x *= y // 等同于 x = x * y</span><br><span class="line">x /= y // 等同于 x = x / y</span><br><span class="line">x %= y // 等同于 x = x % y</span><br><span class="line">x &gt;&gt;= y // 等同于 x = x &gt;&gt; y</span><br><span class="line">x &lt;&lt;= y // 等同于 x = x &lt;&lt; y</span><br><span class="line">x &gt;&gt;&gt;= y // 等同于 x = x &gt;&gt;&gt; y</span><br><span class="line">x &amp;= y // 等同于 x = x &amp; y</span><br><span class="line">x |= y // 等同于 x = x | y</span><br><span class="line">x ^= y // 等同于 x = x ^ y</span><br></pre></td></tr></table></figure><p>（3）比较运算符<br>比较运算符比较两个值，然后返回一个布尔值（实际上是ture或false），表示是否满足比较条件。JavaScript提供了8个比较运算符。<br>A、<code>=</code> 赋值<br><code>=</code> 为赋值运算符，连接两个简单的表达式构成复杂的表达式，如<code>x=y</code>即为表达式，若将其看成一个整体，即会输出一个值，这个值则为最终赋的值，如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b145f6c54?w=600&amp;h=172&amp;f=jpeg&amp;s=19799" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b145f6c54?w=600&amp;h=172&amp;f=jpeg&amp;s=19799" alt="image"></a></p><p>B、<code>==</code> 相等<br>这里的相等是，近似相等，后台得到的值则是ture或者false如数字和字符串的比较，后台会将字符串做一个类型转换：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b303aa7e5?w=600&amp;h=206&amp;f=jpeg&amp;s=22734" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b303aa7e5?w=600&amp;h=206&amp;f=jpeg&amp;s=22734" alt="image"></a></p><p>C、<code>===</code>严格相等<br>这里的相等则更严格，值和类型的严格相等</p><p><strong>题外话：</strong> <code>===</code> VS <code>==</code></p><ul><li><code>===</code>叫做严格运算符</li><li><code>==</code> 叫做相等运算符</li></ul><p>关于这两者的区别我在知乎上看到一篇文章：<a href="https://www.zhihu.com/question/31442029/answer/53641960" target="_blank" rel="noopener">Javascript 中 == 和 === 区别是什么？</a></p><p>a、严格运算符的运算规则如下：<br>(1)不同类型值<br>如果两个值的类型不同，直接返回<code>false</code>。<br>(2)同一类的原始类型值<br>同一类型的原始类型的值(数值、字符串、布尔值)比较时，值相同就返回true，值不同就返回<code>false</code>。<br>(3)同一类的复合类型值<br>两个复合类型(对象、数组、函数)的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。<br>(4)<code>undefined</code>和<code>null</code><br><code>undefined</code> 和 <code>null</code>与自身严格相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">null  === null  //true</span><br><span class="line">undefined === undefined  // true</span><br></pre></td></tr></table></figure><p>b、相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如~下:<br>(1)原始类型的值<br>原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值，所以题主的问题中会有第二个string输出。<br>(2)对象与原始类型值比较<br>对象(这里指广义的对象，包括数值和函数)与原始类型的值比较时，对象转化成原始类型的值，再进行比较。<br>(3)<code>undefined</code>和 <code>null</code><br><code>undefined</code>和<code>null</code>与其他类型的值比较时，结果都为false, 它们互相比较时结果为true。<br>(4)相等运算符的缺点<br>相等运算符隐藏的类型转换，会带来- -些违反直觉的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">== &apos;0&apos;                 // false</span><br><span class="line">0 ==                   // true</span><br><span class="line">0 ==                   // true</span><br><span class="line">false == &apos;false&apos;       // false</span><br><span class="line">false == &apos;0&apos;           //true</span><br><span class="line">false == undefined     // false</span><br><span class="line">false == null          // false</span><br><span class="line">null == undefined      // true</span><br><span class="line">&apos;  \t\r\n  &apos;  == 0     // true</span><br></pre></td></tr></table></figure><p>这就是为什么建议尽量不要使用相等运算符。至于使用相等运算符会不会对后续代码造成意外影响，答案是有可能会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> var a = undefined;</span><br><span class="line">if(!a)&#123;</span><br><span class="line">  console.log(&quot;1&quot;);   </span><br><span class="line">&#125;</span><br><span class="line">//1</span><br><span class="line"></span><br><span class="line">  var a = undefined;</span><br><span class="line">if(a == null)&#123;</span><br><span class="line">  console.log(&quot;1&quot;);    </span><br><span class="line">&#125;</span><br><span class="line"> //1</span><br><span class="line"></span><br><span class="line">  var a = undefined;</span><br><span class="line">if(a  === null)&#123;</span><br><span class="line">  console.log(&quot;1&quot;);  </span><br><span class="line">&#125;</span><br><span class="line"> // 无输出</span><br></pre></td></tr></table></figure><p>也就是说当a为<code>undefined</code>时，输出的值会有变化，而在编程中对象变成<code>undefined</code>实在是太常见了。<br>D、 <code>!=</code> 不相等<br>E 、<code>!==</code> 严格不相等<br>F、 <code>&lt;</code> 小于<br>G、 <code>&lt;=</code> 小于或等于<br>H、 <code>&gt;</code> 大于<br>I 、 <code>&gt;=</code> 大于或等于</p><p>（5）布尔运算符<br>A、<code>!</code> 取反运算符<br>B、<code>&amp;&amp;</code> 且运算符<br>表达式<code>&amp;&amp;</code>表达式 会自动地转化成ture或者false 进行比较。或判断一个东西是否存在，是否满足条件<br>C、<code>||</code> 或运算符<br>初始化赋值的时候可用</p><p><strong>题外话：</strong><br><code>&amp;&amp;</code> <strong>且</strong> 运算符 VS <code>||</code><strong>或</strong> 运算符<br>a、<strong>且</strong>——<code>&amp;&amp;</code> ：用于判断一个东西是否存在，或是否满足条件（有false就判断）<br>如果第一个为true，第二个也为true，最终值就是第二个值；<br>如：<code>var a = “hello”</code>，那么<code>a&amp;&amp;console.log（a）</code>就能进行判断，第二个值的最终结果为true</p><ul><li>如果第一个为true，再看第二个是否为false，那最终的值就是为第一个值；</li><li>如果第一个为false，那就不用再判断第二个，就是第一个值<br><strong>总结：</strong> 如果是false就不用再看了；如果有true，再看第二个</li></ul><p>b、<strong>或</strong>——<code>||</code>: 用于初始化值<br>如果第一个为true，后面就不用再管；如果第一个为false，再看第二个<br><strong>总结：</strong> 如果是true，就不会再管了；如果有false，再看第二个。只要一项为真，那就不用管,如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b1b409da3?w=600&amp;h=615&amp;f=jpeg&amp;s=39167" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b1b409da3?w=600&amp;h=615&amp;f=jpeg&amp;s=39167" alt="image"></a><br>第二个cc为<code>undefined</code>，转化为Boolean类型为false，||中还会看第二个，0为true，那么结果就为0。将0赋值给第一个cc，那么cc则有了初始值。假如<code>cc=100</code>，再执行<code>cc=cc||0</code>，那么cc仍然等于100，转换为boolean类型为true，那么则不需要在看第二个数<br>如果cc之前没有声明的话，得到的是一个默认值；如果cc之前声明过，值还保持不变。</p><p>D、<code>condition? true case : false case</code>三元条件运算符<br><strong>题外话：</strong> 三目运算符 <code>Condition？true case：false case</code><br>这里有一个条件判断，如果条件判断为真的话，那么整个表达式的结果就是<code>true case</code>执行的结果；如果条件判断为假的话，那么整个表达式的结果就是<code>false case</code>执行的结果，当然，<code>false case</code>还是会再做一些执行，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (a &gt; 10) &#123;</span><br><span class="line"> b = a</span><br><span class="line">&#125; </span><br><span class="line">else &#123;</span><br><span class="line"> b = a - 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答：<code>b = a&gt;10? a : a-2</code></p><p>（5）位运算符<br>必要时看看二进制转换对照表也行：<br><a href="https://blog.csdn.net/liwei3gjob/article/details/8624381?ticket=ST-265586-zZrl4AMpe7hEMoB9JCI9-passport.csdn.net" target="_blank" rel="noopener">二进制转换对照表</a></p><p>A、或运算（or）：符号为<code>|</code>，表示两个二进制位中有一个为1，则结果为1，否则为0。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b37ad7a2a?w=600&amp;h=258&amp;f=jpeg&amp;s=12539" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b37ad7a2a?w=600&amp;h=258&amp;f=jpeg&amp;s=12539" alt="image"></a><br>B、与运算（and）：符号为<code>&amp;</code>，表示两个二进制位都为1，则结果为1，否则为0。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b3eef6134?w=600&amp;h=186&amp;f=jpeg&amp;s=10450" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b3eef6134?w=600&amp;h=186&amp;f=jpeg&amp;s=10450" alt="image"></a><br>C、否运算（not）：符号为<code>～</code>，表示将一个二进制位变成相反值。<br>D、异或运算（xor）：符号为<code>ˆ</code>，表示两个二进制位中有且仅有一个为1时，结果为1，否则为0。<br>E、左移运算（left shift）：符号为<code>&lt;&lt;</code><br>F、右移运算（right shift）：符号为<code>&gt;&gt;</code><br>J、带符号位的右移运算（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code></p><p>（6）其它运算符（考虑优先级）<br>A、小括号<br>在JavaScript中，圆括号是一种运算符，它有两种用法：<br>如果把表达式放在圆括号之中，作用是求值；如果跟在函数的后面，作用是调用函数。<br>B、<code>void</code><br>void运算符的作用是执行一个表达式，然后返回<code>undefined</code>。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b43bed2d9?w=466&amp;h=308&amp;f=jpeg&amp;s=12062" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b43bed2d9?w=466&amp;h=308&amp;f=jpeg&amp;s=12062" alt="image"></a><br>C、逗号运算符<br>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b41378a76?w=552&amp;h=242&amp;f=jpeg&amp;s=10838" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b41378a76?w=552&amp;h=242&amp;f=jpeg&amp;s=10838" alt="image"></a></p><h1 id="五、运算符优先级和结合性"><a href="#五、运算符优先级和结合性" class="headerlink" title="五、运算符优先级和结合性"></a>五、运算符优先级和结合性</h1><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p>结合性是指多个具有同样优先级的运算符表达式中的运算顺序</p><h3 id="2、实践——理论："><a href="#2、实践——理论：" class="headerlink" title="2、实践——理论："></a>2、实践——理论：</h3><p>（1）有的运算符是左结合的，即运算从左到右执行，下面两个运算是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = x + y + z;</span><br><span class="line">w = (x + y) + z;</span><br></pre></td></tr></table></figure><p>（2）有的运算符是右结合的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w = x = y = z;</span><br><span class="line">w = (x = (y = z));</span><br><span class="line">w = a: b: c ? d : e? f : g;</span><br><span class="line">w = a? b : (c? d: (e? f : g));</span><br></pre></td></tr></table></figure><p>如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b488eb8b6?w=600&amp;h=332&amp;f=jpeg&amp;s=22847" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b488eb8b6?w=600&amp;h=332&amp;f=jpeg&amp;s=22847" alt="image"></a></p><ul><li>最高：<code>typeof</code></li><li>最低：<code>，</code></li></ul><h3 id="3、理论——实践"><a href="#3、理论——实践" class="headerlink" title="3、理论——实践"></a>3、理论——实践</h3><blockquote><p>几个优先级从高到低： <code>typrof （） ++ -- ！ +-*% &amp;&amp; || =</code></p></blockquote><p>（1）typeof的优先级相当的高，比加减乘除都优先，所以虽然是操作符，但在复杂表达式的时候我们还是习惯加括号，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof 2*3;//NaN</span><br><span class="line">typeof (2*3);//&quot;number&quot;</span><br><span class="line">typeof 2+3;// &quot;number3&quot;</span><br></pre></td></tr></table></figure><p><strong>题外话：</strong> <code>NanN</code>（即not and number）<br>定义：是一个数字类型，不过它不是一个有效的数，表示为错误数字。<br>通过number函数可以把一个数字的字符创转化成数字，不过无法将一个字母的字符串转化成数字，得出结果为NaN。当<code>NaN===NaN—&gt;false</code>，一个数字与自己不相等，作为一个数字，二者对等与否对方均无从得知，没有突出一个数字的识别性。如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b5bfe9e08?w=600&amp;h=373&amp;f=jpeg&amp;s=22012" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b5bfe9e08?w=600&amp;h=373&amp;f=jpeg&amp;s=22012" alt="image"></a></p><p>（2）<code>++</code>、<code>--</code>是右结合的操作符（优先级最高的几个都是右结合），而且比加减乘除优先级高。同时自增、自减运算符的运算数得是左值（可以放在赋值符号左边的值），而不能是常数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4++; //ReferenceError: Invalid left-hand side expression in postfix operation</span><br><span class="line">var a=0,b=0;//, 忽略第一个操作数，返回第二个操作数L(往左运算）</span><br><span class="line">a+++b;//0</span><br><span class="line">a;//1，++优先级比+高，所以相当于(a++)+b</span><br><span class="line">b;//0</span><br></pre></td></tr></table></figure><p>（3）赋值运算符的优先级相当的低<br><code>a = b == c; //等同于a = (b==c)</code></p><p>（4）逻辑<code>非!</code>也在优先级队列的前端，比加减乘除高，但逻辑与、逻辑或优先级很低，不如加减乘除<br><code>!2*0; //0, 等价于(!2)*0</code></p><p>（5）一个关于逻辑运算符的有意思地方是其“短路”功能，会结合表达式计算值来判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &amp;&amp; 3;</span><br><span class="line">1 &amp;&amp; &quot;foo&quot; || 0;</span><br><span class="line">1 || &quot;foo&quot; &amp;&amp; 0</span><br></pre></td></tr></table></figure><p>如：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b5b41ee22?w=436&amp;h=210&amp;f=jpeg&amp;s=6224" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c61b5b41ee22?w=436&amp;h=210&amp;f=jpeg&amp;s=6224" alt="image"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;最近在学习javascript中数据类型、运算符，以及运算符优先级等相关基础知识，相对简单、基础但也很重要。加上老师的推荐看了阮一峰老师所写的《javascript教程》。从中刷新了过往认知的概念和固有的规则，明白了javascript的出现会打破以往的惯性思维。
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面对JavaScript吧!:01了解JS（包括白屏和fouc）</title>
    <link href="http://yoursite.com/2018/12/01/%E9%9D%A2%E5%AF%B9JavaScript%E5%90%A7%EF%BC%81%EF%BC%9A01%E4%BA%86%E8%A7%A3JS%EF%BC%88%E5%8C%85%E6%8B%AC%E7%99%BD%E5%B1%8F%E5%92%8Cfouc%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/01/面对JavaScript吧！：01了解JS（包括白屏和fouc）/</id>
    <published>2018-12-01T02:30:13.000Z</published>
    <updated>2018-12-05T13:50:41.282Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>面对疾风吧！咳咳…不对是面对JavaScript吧！开始学javascript了，HTML和CSS学完但是感觉自己并没有记住啥，还需要系统的梳理大量的练习！！！学习JavaScript，大家都安利阮一峰的教程，好吧我就从阮一峰老师的新手教程开始学习好了，冲鸭！面对JavaScript吧！<br><a id="more"></a> </p><h1 id="一、网页的构成"><a href="#一、网页的构成" class="headerlink" title="一、网页的构成"></a>一、网页的构成</h1><ul><li>网页 = Html+CSS+JavaScript</li><li>Html: 网页元素内容</li><li>CSS: 控制网页样式</li><li>JavaScript：操作网页内容，实现功能或者效果</li><li>浏览器端（web应用）、服务端（nodejs）。。。</li></ul><h1 id="二、JavaScirpt-发展历史"><a href="#二、JavaScirpt-发展历史" class="headerlink" title="二、JavaScirpt 发展历史"></a>二、JavaScirpt 发展历史</h1><blockquote><p>参考：阮一峰js标准教程</p></blockquote><ul><li>1995年5月，Brendan Eich只用了10天，就设计完成了这种语言的第一版。</li><li>1996年8月，微软模仿JavaScript开发了一种相近的语言，取名为JScript（JavaScript是Netscape网景公司的注册商标，微软不能用），首先内置于IE 3.0。</li><li>1996年11月，Netscape公司决定将JavaScript提交给国际标准化组织ECMA（European Computer Manufacturers Association），希望JavaScript能够成为国际标准，以此抵抗微软。</li><li>1997年7月，ECMA组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为ECMAScript。这个版本就是ECMAScript 1.0版。<br>基本上，JavaScript这个名字的原意是“很像Java的脚本语言”。在JavaScript语言中，函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与Java语法最大的两点区别。JavaScript语法要比Java自由得多。</li><li>1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持。</li><li>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA开会决定，中止ECMAScript 4.0的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为ECMAScript 3.1，会后不久，ECMAScript 3.1就改名为ECMAScript 5。</li><li>2009年12月，ECMAScript 5.0版正式发布。<br>Harmony项目则一分为二，一些较为可行的设想定名为JavaScript.next继续开发，后来演变成ECMAScript 6；</li><li>2006年，jQuery函数库诞生，作者为John Resig。jQuery为操作网页DOM结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让JavaScript语言的应用难度大大降低，推动了这种语言的流行。</li><li>2009年，Node.js项目诞生，创始人为Ryan Dahl，它标志着JavaScript可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。</li><li>2012年，微软发布TypeScript语言。该语言被设计成JavaScript的超集，这意味着所有JavaScipt程序，都可以不经修改地在TypeScript中运行。同时，TypeScript添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成JavaScript运行。</li><li>2013年5月，Facebook发布UI框架库React，引入了新的JSX语法，使得UI层可以用组件开发。</li><li>2015年4月，Angular框架宣布，2.0版将基于微软公司的TypeScript语言开发，这等于为JavaScript语言引入了强类型。</li></ul><h1 id="三、JS引入使用"><a href="#三、JS引入使用" class="headerlink" title="三、JS引入使用"></a>三、JS引入使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;标题&lt;/title&gt;</span><br><span class="line">    /*这里引入css代码*/</span><br><span class="line">   &lt;link href=&quot;index.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       body&#123;</span><br><span class="line">           background: red;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">       &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">       /*一般来说，这里引入js代码*/</span><br><span class="line">       &lt;script src=&quot;index.js&quot;&gt;/*空*/&lt;/script&gt;</span><br><span class="line">        或</span><br><span class="line">       &lt;script&gt;</span><br><span class="line">           alert(1);</span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="四、浏览器渲染机制"><a href="#四、浏览器渲染机制" class="headerlink" title="四、浏览器渲染机制"></a>四、浏览器渲染机制</h1><p>你所看到的浏览器网页，浏览器是经历了什么你才能看到？</p><ul><li><p>解析 HTML 标签, 构建 DOM 树<br>⏬</p></li><li><p>解析 CSS 标签, 构建 CSSOM 树<br>⏬</p></li><li><p>把 DOM 和 CSSOM 组合成 渲染树 (render tree)<br>⏬</p></li><li><p>在渲染树的基础上进行布局, 计算每个节点的几何结构</p><p>⏬</p></li><li><p>把每个节点绘制到屏幕上 (painting)</p></li></ul><p>当发一个请求到服务器之后，服务器会把页面上的html发给浏览器，浏览器收到之后则会解析该html标签，解析的过程中遇到了类似需要加载的样式，如link，则会再次发送请求到服务器。这样一来，如此循环，标签属性的请求不断被发出到服务器，资源不断被获取<br>资源获取之后，如何被用户看见？</p><p>首先，先对html标签进行解析。解析成一个dom树（即类似于树状结构，dom，即文档、模型）同时，也对css样式进行解析，同时也解析成cssom树，将css样式（默认+添加）汇聚一起形成css树——dom树元素和css树元素结合起来获得一个对象，该对象所拥有的元素和具体位置都有其相互关系，对应节点和对应数据形成一个渲染树——执行layout（布局）计算它的位置和样式——绘制——排列形成页面</p><h1 id="五、浏览器引起的Repaint-和-Reflow问题"><a href="#五、浏览器引起的Repaint-和-Reflow问题" class="headerlink" title="五、浏览器引起的Repaint 和 Reflow问题"></a>五、浏览器引起的Repaint 和 Reflow问题</h1><h3 id="1、Repaint问题："><a href="#1、Repaint问题：" class="headerlink" title="1、Repaint问题："></a>1、Repaint问题：</h3><p>重新绘制。将css样式改变的话，其他元素并未改变，只需要重新绘制某一处就行。</p><h3 id="2、Reflow问题："><a href="#2、Reflow问题：" class="headerlink" title="2、Reflow问题："></a>2、Reflow问题：</h3><p>重新回流，重新计算。即自身位置发生变化，给其他元素带来了影响，要重新进行计算。</p><p>从一个外网中截取出来的关于Repaint 和 Reflow分辨片段：</p><blockquote><p>Anything that changes input information used to construct the rendering tree can cause a repaint or a reflow, for example:<br>Adding, removing, updating DOM nodes<br>Hiding a DOM node with display: none (reflow and repaint) or visibility: hidden(repaint only, because no geometry changes)<br>Moving, animating a DOM node on the page<br>Adding a stylesheet, tweaking style properties<br>User action such as resizing the window, changing the font size, or (oh, OMG, no!) scrollin</p></blockquote><p>Let’s see a few examples:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var bstyle = document.body.style; // cache</span><br><span class="line"></span><br><span class="line">bstyle.padding = &quot;20px&quot;; // reflow, repaint</span><br><span class="line"></span><br><span class="line">bstyle.border = &quot;10px solid red&quot;; // another reflow and a repaint</span><br><span class="line"></span><br><span class="line">bstyle.color = &quot;blue&quot;; // repaint only, no dimensions changed</span><br><span class="line"></span><br><span class="line">bstyle.backgroundColor = &quot;#fad&quot;; // repaint</span><br><span class="line"></span><br><span class="line">bstyle.fontSize = &quot;2em&quot;; // reflow, repaint</span><br><span class="line"></span><br><span class="line">/* new DOM element - reflow, repaint */</span><br><span class="line">document.body.appendChild(document.createTextNode(&apos;dude!&apos;));</span><br></pre></td></tr></table></figure><h1 id="六、白屏和FOUC"><a href="#六、白屏和FOUC" class="headerlink" title="六、白屏和FOUC"></a>六、白屏和FOUC</h1><h3 id="1、即指影响浏览器页面加载顺序的两种场景"><a href="#1、即指影响浏览器页面加载顺序的两种场景" class="headerlink" title="1、即指影响浏览器页面加载顺序的两种场景"></a>1、即指影响浏览器页面加载顺序的两种场景</h3><ul><li>白屏：<br>特指一种场景，打开页面是一片白色，突然页面出现，样式正确。那么一片白色的时间，则称之为白屏。</li><li>FOUC (Flash of UnstyledContent)：<br>无样式内容闪烁，网速情况差，打开页面时仍有样式，之后样式时有时无，甚至一开始并无出现样式，突然样式恢复。（常出现在firefox浏览器）<br>此类现象，在不同浏览器进行的资源加载和页面渲染时，所采用的不同的处理方式，并不是bug。</li></ul><h3 id="2、写一个server，验证白屏和fouc效果"><a href="#2、写一个server，验证白屏和fouc效果" class="headerlink" title="2、写一个server，验证白屏和fouc效果"></a>2、写一个server，验证白屏和fouc效果</h3><p>在index.html中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;fouc &amp; 白屏&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--在下面模拟一个延时装置--&gt;  </span><br><span class="line">     &lt;link rel=&quot;stylesheet&quot; href=&quot;b.css?t=10&quot;&gt; //设置这个工具，当请求该文件时，服务器会延迟请求10s再去加载这个资源，以此可以模拟一个网速特别慢的情况</span><br><span class="line">     &lt;link rel=&quot;stylesheet&quot; href=&quot;a.css?t=3&quot;&gt; </span><br><span class="line">  </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;hello&lt;/p&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;p&gt;饥人谷&lt;/p&gt;</span><br><span class="line">&lt;!--   &lt;script src=&quot;A.js?t=5&quot;&gt;&lt;/script&gt; </span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/15/1653c442f35af77c?w=211&amp;h=200&amp;f=png&amp;s=8004&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--   &lt;link rel=&quot;stylesheet&quot; href=&quot;c.css?t=6&quot;&gt;  --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--   &lt;script src=&quot;http://a.jrg.com:8080/B.js?t=4&quot; &gt;&lt;/script&gt;  </span><br><span class="line">  &lt;script src=&quot;http://b.jrg.com:8080/A.js?t=8&quot; &gt;&lt;/script&gt;   --&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>（1）关于白屏，<br>需要注意的是，浏览器对于样式和js的处理，即CSS和JS放置顺序。推荐：将样式放在 <code>head</code>里面,将JS放在<code>body</code>内部下方。如上面代码所示，html页面里引入了两个css：<code>a.css</code>和<code>b.css</code>。<code>b.css</code>引用<code>了c.ss</code>（<code>@import&quot;./c.css?t=5&quot;;</code>）<code>b.css</code>中加入了一个10s的延时文件（<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;b.css?t=10&quot;&gt;</code>），加载这个10s的css样式文件，浏览器是如何完成加载工作，有两种方式：<br><strong>第1种：</strong> html解析完成，此时10s延时的css文件先不管，先展示<code>body</code>里所展示的内容，等css文件全加载后再去计算样式，再去重新渲染一次；<br><strong>第2种：</strong> 即使html的dom树已经解析、渲染都完成，对未加载完成的样式都必须等待，即css样式要全部加载、获取，img资源加载完成，此时底部JS立刻执行，才一次性展示出页面。例子中展示这种方法，即为白屏很久的原因。</p><p>（2）不同浏览器的不同处理机制所出现的场景不同<br>A、<strong>白屏场景（常出现在chrome）：</strong><br>打开一个国外网站，使用国外服务器，嵌在css的字体使用的是谷歌字体，运行特别慢，等了好久突然出现页面样式效果。这是因为页面需要等待css样式加载所有完成，甚至出现404加载失败，最后才展示出页面。那么那段加载时间，等待了几秒左右的白色一片的页面，就是<strong>白屏</strong><br>B、<strong>Fouc场景（常出现在Firefox）：</strong><br>一开始的时候，先让你看见样式，如字的小号样式，样式加载完后看到所规定字号的大字。对用户来说，同样的样式，突然从小变大，则这个场景就是Fouc（无样式内容闪烁）。<br><strong>总结：</strong> 不管是css样式，还是js文件，只要加长延时，都会造成白屏</p><p>（3）CSS 和 JS 最佳放置顺序</p><ul><li>使用 link 标签将样式表放在顶部</li><li>将JS放在底部<br>（3.1）场景：假设JS文件页面顶部：</li><li>JS脚本会阻塞后面内容的呈现</li><li>JS脚本会阻塞其后组件（如图片）的下载</li><li>JS加载时间过长，css需等待，则会出现一段时间白屏</li><li>场景说明：引入一个JS文件在顶部，设置一个延时时间。</li><li>加载顺序：css—js—img—全部获取到展现页面效果<br>此时，img和css加载时会并发加载，即如一个域名下同时加载两个文件（并发是有限度的），加载在顶部的js时，会禁用并发img和css，并阻止其他内容下载和渲染。</li></ul><p>js并不影响css加载，但是会影响css样式的一个计算。当js加载时，css已经获取到（不过此时页面还是一片空白），直到js获取立即执行后，图片立刻出现，页面才展示效果。所以js文件放入页面顶部<code>head</code>里，也会导致白屏现象出现</p><p>（3.2）JS加载特点总结<br>A、优先加载js文件，加载后js立刻去执行，展示页面（CSS样式则是全部加载完，然后一次性展示出页面）<br><strong>注：</strong></p><ul><li>css放前面，优先加载；</li><li>若放后面，其他资源则会阻碍css加载，那么时机就太晚。</li></ul><p>B、由于渲染线程和js脚本线程是互斥的，白屏是渲染进程被阻塞的原因，当碰到<code>script</code>标签的时候，会先执行js脚本，然后再渲染。</p><ul><li>（放顶部时）JS加载时机过晚导致一系列问题，脚本会阻塞后面内容的呈现、脚本会阻塞其后组件的下载（主要指img资源下载）、白屏等。<ul><li>（放底部）则可以先让其他先加载完成，JS立刻执行的特点可以“扫尾”最后的页面效果</li></ul></li></ul><p>C、JS脚本操作页面上的html+css元素，（放顶部时）JS先执行，元素都未加载到（即不存在），未出现在文档流中【加载，这里指资源加载和资源是否出现在文档流中】，所以也不能操作相应JS功能，此时后台将会报错。<br>D、（放顶部时）其他JS若作为一种框架语言，则能提前形成一个初步的框架有效构成页面结构。</p><h1 id="七、JS脚本的异步加载"><a href="#七、JS脚本的异步加载" class="headerlink" title="七、JS脚本的异步加载"></a>七、JS脚本的异步加载</h1><h3 id="1、一个问题？"><a href="#1、一个问题？" class="headerlink" title="1、一个问题？"></a>1、一个问题？</h3><p>即一个放在<code>head</code>的js文件，如下：<br><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code><br>原本放在顶部的这个js文件，会提前加载，如何使它在顶部仍然稍后加载呢？</p><h3 id="2、解决方法：async和defer"><a href="#2、解决方法：async和defer" class="headerlink" title="2、解决方法：async和defer"></a>2、解决方法：<code>async</code>和<code>defer</code></h3><p>（1）作用：<br>没有 <code>defer</code> 或<code>async</code>，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该<code>script</code>标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。也就是说，使用<code>defer</code>或<code>async</code>后能够改变这种加载、执行的时机。常应用在引用了广告和统计的页面中，不会影响、堵塞，更不会影响到到页面其他元素</p><p>（2）<code>async</code><br>HTML5里为<code>script</code>标签里新增了<code>async</code>属性，用于异步加载脚本：不保证顺序（独立的个体）<br><code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>或<code>&lt;script type=&quot;text/javascript&quot; src=&quot;alert.js&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</code><br>浏览器解析到HTML里的该行script标签，发现指定为<code>async</code>，会异步下载解析执行脚本（即加载后续文档元素的过程将和<code>script.js</code>的加载并行进行）。</p><p>页面的DOM结构里假设<code>&lt;script&gt;</code>在img之前，如果你的浏览器支持<code>async</code>的话，就会异步加载脚本。此时DOM里已经有img了，所以脚本里能顺利取到img的<code>src</code>并弹框。</p><p>（3）<code>defer</code><br><code>script</code>标签里可以设置<code>defer</code>，表示延迟加载脚本：脚本先不执行，延迟到文档解析和显示后执行，有顺序<br><code>&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>或<code>&lt;script type=&quot;text/javascript&quot; src=&quot;alert.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code><br>浏览器解析到HTML里该行<code>script</code>标签，发现指定为<code>defer</code>，会暂缓下载解析执行脚本，等到页面文档解析并加载执行完毕后，才会加载该脚本（更精确地说，是在DOM树构建完成后，在<code>DOMContentLoaded</code>事件触发前，加载<code>`</code>defer`的脚本）。</p><p>页面的DOM结构里假设<code>script</code>在img图片之前，如果你的浏览器支持defer的话，就会延迟到页面加载完后才下载脚本。此时DOM里已经有img元素了，所以脚本里能顺利取到img的src并弹框。</p><p><strong>总结：</strong> JS实质采用一种可以更自由地选择加载时机和任何位置，让处于顶部的js文件能够像在底部时，在页面必要元素加载完成时进行“异步”加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;面对疾风吧！咳咳…不对是面对JavaScript吧！开始学javascript了，HTML和CSS学完但是感觉自己并没有记住啥，还需要系统的梳理大量的练习！！！学习JavaScript，大家都安利阮一峰的教程，好吧我就从阮一峰老师的新手教程开始学习好了，冲鸭！面对JavaScript吧！&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（一）入门篇</title>
    <link href="http://yoursite.com/2018/11/19/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://yoursite.com/2018/11/19/JavaScript学习笔记（一）入门篇/</id>
    <published>2018-11-19T02:30:13.000Z</published>
    <updated>2018-11-28T12:09:54.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><h3 id="什么是-JavaScript-语言？"><a href="#什么是-JavaScript-语言？" class="headerlink" title="什么是 JavaScript 语言？"></a>什么是 JavaScript 语言？</h3><p>JavaScript 是一门动态类型，面向对象的脚本语言，同时也是一种嵌入式（embedded）语言。主要依靠嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。<br><a id="more"></a><br>JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如<code>Array</code>、<code>Date</code>、<code>Math</code>等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p><ul><li>浏览器控制类：操作浏览器</li><li>DOM 类：操作网页的各种元素</li><li>Web 类：实现互联网的各种功能</li></ul><p>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。</p><h3 id="为什么学习-JavaScript？"><a href="#为什么学习-JavaScript？" class="headerlink" title="为什么学习 JavaScript？"></a>为什么学习 JavaScript？</h3><ul><li><p>操控浏览器的能力</p></li><li><p>广泛的使用领域</p></li><li><p>易学性</p></li><li><p>强大的性能</p></li><li><p>开放性</p></li><li><p>社区支持和就业机会</p></li></ul><h3 id="JavaScript-与-Java-的关系"><a href="#JavaScript-与-Java-的关系" class="headerlink" title="JavaScript 与 Java 的关系?"></a>JavaScript 与 Java 的关系?</h3><p>它们是两种不一样的语言，但是彼此存在联系。JavaScript 语法要比 Java 自由得多。另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。</p><h3 id="JavaScript-与-ECMAScript-的关系"><a href="#JavaScript-与-ECMAScript-的关系" class="headerlink" title="JavaScript 与 ECMAScript 的关系?"></a>JavaScript 与 ECMAScript 的关系?</h3><p>1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。</p><p>1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。</p><p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。</p><p>语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 + 3;</span><br></pre></td></tr></table></figure><p>这条语句先用<code>var</code>命令，声明了变量<code>a</code>，然后将<code>1 + 3</code>的运算结果赋值给变量<code>a</code>。</p><p><code>1 + 3</code>叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p><p>语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 + 3 ; var b = &apos;abc&apos;;</span><br></pre></td></tr></table></figure><p>分号前面可以没有任何内容，JavaScript 引擎将其视为空语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;;;</span><br></pre></td></tr></table></figure><p>上面的代码就表示3个空语句。</p><p>表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 + 3;</span><br><span class="line">&apos;abc&apos;;</span><br></pre></td></tr></table></figure><p>上面两行语句只是单纯地产生一个值，并没有任何实际的意义。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><p>上面的代码先声明变量<code>a</code>，然后在变量<code>a</code>与数值1之间建立引用关系，称为将数值1“赋值”给变量<code>a</code>。以后，引用变量名<code>a</code>就会得到数值1。最前面的<code>var</code>，是变量声明命令。它表示通知解释引擎，要创建一个变量<code>a</code>。</p><p>注意，JavaScript 的变量名区分大小写，<code>A</code>和<code>a</code>是两个不同的变量。</p><p>变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure><p>如果只是声明变量而没有赋值，则该变量的值是<code>undefined</code>。<code>undefined</code>是一个特殊的值，表示“无定义”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a // undefined</span><br></pre></td></tr></table></figure><p>如果变量赋值的时候，忘了写<code>var</code>命令，这条语句也是有效的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">// 基本等同</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure><p>但是，不写<code>var</code>的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用<code>var</code>命令声明变量。</p><p>如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x</span><br><span class="line">// ReferenceError: x is not defined</span><br></pre></td></tr></table></figure><p>上面代码直接使用变量<code>x</code>，系统就报错，告诉你变量<code>x</code>没有声明。</p><p>可以在同一条<code>var</code>命令中声明多个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a, b;</span><br></pre></td></tr></table></figure><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">a = &apos;hello&apos;;</span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>a</code>起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量<code>a</code>已经存在，所以不需要使用<code>var</code>命令。</p><p>如果使用<code>var</code>重新声明一个已经存在的变量，是无效的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var x;</span><br><span class="line">x // 1</span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>x</code>声明了两次，第二次声明是无效的。</p><p>但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var x = 2;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"></span><br><span class="line">var x = 1;</span><br><span class="line">var x;</span><br><span class="line">x = 2;</span><br></pre></td></tr></table></figure><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><p>上面代码首先使用<code>console.log</code>方法，在控制台（console）显示变量<code>a</code>的值。这时变量<code>a</code>还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">console.log(a);</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure><p>最后的结果是显示<code>undefined</code>，表示变量<code>a</code>已声明，但还未赋值。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以<code>a</code>和<code>A</code>是两个不同的标识符。</p><p>标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。</p><p>简单说，标识符命名规则如下。</p><ul><li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。</li><li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字<code>0-9</code>。</li></ul><p>下面这些都是合法的标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arg0</span><br><span class="line">_tmp</span><br><span class="line">$elem</span><br><span class="line">π</span><br></pre></td></tr></table></figure><p>下面这些则是不合法的标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1a  // 第一个字符不能是数字</span><br><span class="line">23  // 同上</span><br><span class="line">***  // 标识符不能包含星号</span><br><span class="line">a+b  // 标识符不能包含加号</span><br><span class="line">-d  // 标识符不能包含减号或连词线</span><br></pre></td></tr></table></figure><p>中文是合法的标识符，可以用作变量名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 临时变量 = 1;</span><br></pre></td></tr></table></figure><blockquote><p>JavaScript 有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。Javascript 提供两种注释的写法：一种是单行注释，用<code>//</code>起头；另一种是多行注释，放在<code>/*</code>和<code>*/</code>之间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 这是单行注释</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 这是</span><br><span class="line"> 多行</span><br><span class="line"> 注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<code>&lt;!--</code>和<code>--&gt;</code>也被视为合法的单行注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 1; &lt;!-- x = 2;</span><br><span class="line">--&gt; x = 3;</span><br></pre></td></tr></table></figure><p>上面代码中，只有<code>x = 1</code>会执行，其他的部分都被注释掉了。</p><p>需要注意的是，<code>--&gt;</code>只有在行首，才会被当成单行注释，否则会当作正常的运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function countdown(n) &#123;</span><br><span class="line">  while (n --&gt; 0) console.log(n);</span><br><span class="line">&#125;</span><br><span class="line">countdown(3)</span><br><span class="line">// 2</span><br><span class="line">// 1</span><br><span class="line">// 0</span><br></pre></td></tr></table></figure><p>上面代码中，<code>n --&gt; 0</code>实际上会当作<code>n-- &gt; 0</code>，因此输出2、1、0。</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。</p><p>对于<code>var</code>命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a // 1</span><br></pre></td></tr></table></figure><p>上面代码在区块内部，使用<code>var</code>命令声明并赋值了变量<code>a</code>，然后在区块外部，变量<code>a</code>依然有效，区块对于<code>var</code>命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如<code>for</code>、<code>if</code>、<code>while</code>、<code>function</code>等。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>JavaScript 提供<code>if</code>结构和<code>switch</code>结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。</p><h4 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h4><p><code>if</code>结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，<code>true</code>表示真，<code>false</code>表示<code>伪</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (布尔值)</span><br><span class="line">  语句;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">if (布尔值) 语句;</span><br></pre></td></tr></table></figure><p>上面是<code>if</code>结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为<code>true</code>，就执行紧跟在后面的语句；如果结果为<code>false</code>，则跳过紧跟在后面的语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (m === 3)</span><br><span class="line">  m = m + 1;</span><br></pre></td></tr></table></figure><p>上面代码表示，只有在<code>m</code>等于3时，才会将其值加上1。</p><p>这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在<code>if</code>的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (m === 3) &#123;</span><br><span class="line">  m += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议总是在<code>if</code>语句中使用大括号，因为这样方便插入语句。</p><p>注意，<code>if</code>后面的表达式之中，不要混淆赋值表达式（<code>=</code>）、严格相等运算符（<code>===</code>）和相等运算符（<code>==</code>）。尤其是赋值表达式不具有比较作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var y = 2;</span><br><span class="line">if (x = y) &#123;</span><br><span class="line">  console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;2&quot;</span><br></pre></td></tr></table></figure><p>上面代码的原意是，当<code>x</code>等于<code>y</code>的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将<code>y</code>赋值给变量<code>x</code>，再判断变量<code>x</code>的值（等于2）的布尔值（结果为<code>true</code>）。</p><p>这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (x = 2) &#123; // 不报错</span><br><span class="line">if (2 = x) &#123; // 报错</span><br></pre></td></tr></table></figure><p>至于为什么优先采用“严格相等运算符”（<code>===</code>），而不是“相等运算符”（<code>==</code>），请参考《运算符》章节。</p><h4 id="if…else-结构"><a href="#if…else-结构" class="headerlink" title="if…else 结构"></a>if…else 结构</h4><p><code>if</code>代码块后面，还可以跟一个<code>else</code>代码块，表示不满足条件时，所要执行的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (m === 3) &#123;</span><br><span class="line">  // 满足条件时，执行的语句</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 不满足条件时，执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码判断变量<code>m</code>是否等于3，如果等于就执行<code>if</code>代码块，否则执行<code>else</code>代码块。</p><p>对同一个变量进行多次判断时，多个<code>if...else</code>语句可以连写在一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (m === 0) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125; else if (m === 1) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125; else if (m === 2) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>else</code>代码块总是与离自己最近的那个<code>if</code>语句配对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var m = 1;</span><br><span class="line">var n = 2;</span><br><span class="line"></span><br><span class="line">if (m !== 1)</span><br><span class="line">if (n === 2) console.log(&apos;hello&apos;);</span><br><span class="line">else console.log(&apos;world&apos;);</span><br></pre></td></tr></table></figure><p>上面代码不会有任何输出，<code>else</code>代码块不会得到执行，因为它跟着的是最近的那个<code>if</code>语句，相当于下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (m !== 1) &#123;</span><br><span class="line">  if (n === 2) &#123;</span><br><span class="line">    console.log(&apos;hello&apos;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&apos;world&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想让<code>else</code>代码块跟随最上面的那个<code>if</code>语句，就要改变大括号的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (m !== 1) &#123;</span><br><span class="line">  if (n === 2) &#123;</span><br><span class="line">    console.log(&apos;hello&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&apos;world&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// world</span><br></pre></td></tr></table></figure><h4 id="switch-结构"><a href="#switch-结构" class="headerlink" title="switch 结构"></a>switch 结构</h4><p>多个<code>if...else</code>连在一起使用的时候，可以转为使用更方便的<code>switch</code>结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch (fruit) &#123;</span><br><span class="line">  case &quot;banana&quot;:</span><br><span class="line">    // ...</span><br><span class="line">    break;</span><br><span class="line">  case &quot;apple&quot;:</span><br><span class="line">    // ...</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码根据变量<code>fruit</code>的值，选择执行相应的<code>case</code>。如果所有<code>case</code>都不符合，则执行最后的<code>default</code>部分。需要注意的是，每个<code>case</code>代码块内部的<code>break</code>语句不能少，否则会接下去执行下一个<code>case</code>代码块，而不是跳出<code>switch</code>结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line"></span><br><span class="line">switch (x) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">    console.log(&apos;x 等于1&apos;);</span><br><span class="line">  case 2:</span><br><span class="line">    console.log(&apos;x 等于2&apos;);</span><br><span class="line">  default:</span><br><span class="line">    console.log(&apos;x 等于其他值&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// x等于1</span><br><span class="line">// x等于2</span><br><span class="line">// x等于其他值</span><br></pre></td></tr></table></figure><p>上面代码中，<code>case</code>代码块之中没有<code>break</code>语句，导致不会跳出<code>switch</code>结构，而会一直执行下去。正确的写法是像下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch (x) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">    console.log(&apos;x 等于1&apos;);</span><br><span class="line">    break;</span><br><span class="line">  case 2:</span><br><span class="line">    console.log(&apos;x 等于2&apos;);</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    console.log(&apos;x 等于其他值&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>语句部分和<code>case</code>语句部分，都可以使用表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (1 + 3) &#123;</span><br><span class="line">  case 2 + 2:</span><br><span class="line">    f();</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    neverHappens();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<code>default</code>部分，是永远不会执行到的。</p><p>需要注意的是，<code>switch</code>语句后面的表达式，与<code>case</code>语句后面的表示式比较运行结果时，采用的是严格相等运算符（<code>===</code>），而不是相等运算符（<code>==</code>），这意味着比较时不会发生类型转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line"></span><br><span class="line">switch (x) &#123;</span><br><span class="line">  case true:</span><br><span class="line">    console.log(&apos;x 发生类型转换&apos;);</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    console.log(&apos;x 没有发生类型转换&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// x 没有发生类型转换</span><br></pre></td></tr></table></figure><p>上面代码中，由于变量<code>x</code>没有发生类型转换，所以不会执行<code>case true</code>的情况。这表明，<code>switch</code>语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。</p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符 ?:"></a>三元运算符 ?:</h4><p>JavaScript 还有一个三元运算符（即该运算符需要三个运算子）<code>?:</code>，也可以用于逻辑判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件) ? 表达式1 : 表达式2</span><br></pre></td></tr></table></figure><p>上面代码中，如果“条件”为<code>true</code>，则返回“表达式1”的值，否则返回“表达式2”的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var even = (n % 2 === 0) ? true : false;</span><br></pre></td></tr></table></figure><p>上面代码中，如果<code>n</code>可以被2整除，则<code>even</code>等于<code>true</code>，否则等于<code>false</code>。它等同于下面的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var even;</span><br><span class="line">if (n % 2 === 0) &#123;</span><br><span class="line">  even = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  even = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个三元运算符可以被视为<code>if...else...</code>的简写形式，因此可以用于多种场合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var myVar;</span><br><span class="line">console.log(</span><br><span class="line">  myVar ?</span><br><span class="line">  &apos;myVar has a value&apos; :</span><br><span class="line">  &apos;myVar does not have a value&apos;</span><br><span class="line">)</span><br><span class="line">// myVar does not have a value</span><br></pre></td></tr></table></figure><p>上面代码利用三元运算符，输出相应的提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var msg = &apos;数字&apos; + n + &apos;是&apos; + (n % 2 === 0 ? &apos;偶数&apos; : &apos;奇数&apos;);</span><br></pre></td></tr></table></figure><p>上面代码利用三元运算符，在字符串之中插入不同的值。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句用于重复执行某个操作，它有多种形式。</p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p><code>While</code>语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">  语句;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">while (条件) 语句;</span><br></pre></td></tr></table></figure><p><code>while</code>语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (条件) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<code>while</code>语句的一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">while (i &lt; 100) &#123;</span><br><span class="line">  console.log(&apos;i 当前为：&apos; + i);</span><br><span class="line">  i = i + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将循环100次，直到<code>i</code>等于100为止。</p><p>下面的例子是一个无限循环，因为循环条件总是为真。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">  console.log(&apos;Hello, world&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p><code>for</code>语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (初始化表达式; 条件; 递增表达式)</span><br><span class="line">  语句</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">for (初始化表达式; 条件; 递增表达式) &#123;</span><br><span class="line">  语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>语句后面的括号里面，有三个表达式。</p><ul><li>初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。</li><li>条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。</li><li>递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。</li></ul><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">for (var i = 0; i &lt; x; i++) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure><p>上面代码中，初始化表达式是<code>var i = 0</code>，即初始化一个变量<code>i</code>；测试表达式是<code>i &lt; x</code>，即只要<code>i</code>小于<code>x</code>，就会执行循环；递增表达式是<code>i++</code>，即每次循环结束后，<code>i</code>增大1。</p><p>所有<code>for</code>循环，都可以改写成<code>while</code>循环。上面的例子改为<code>while</code>循环，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">while (i &lt; x) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for ( ; ; )&#123;</span><br><span class="line">  console.log(&apos;Hello World&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码省略了<code>for</code>语句表达式的三个部分，结果就导致了一个无限循环。</p><h4 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h4><p><code>do...while</code>循环与<code>while</code>循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">  语句</span><br><span class="line">while (条件);</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">do &#123;</span><br><span class="line">  语句</span><br><span class="line">&#125; while (条件);</span><br></pre></td></tr></table></figure><p>不管条件是否为真，<code>do...while</code>循环至少运行一次，这是这种结构最大的特点。另外，<code>while</code>语句后面的分号注意不要省略。</p><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; while(i &lt; x);</span><br></pre></td></tr></table></figure><h4 id="break-语句和-continue-语句"><a href="#break-语句和-continue-语句" class="headerlink" title="break 语句和 continue 语句"></a>break 语句和 continue 语句</h4><p><code>break</code>语句和<code>continue</code>语句都具有跳转作用，可以让代码不按既有的顺序执行。</p><p><code>break</code>语句用于跳出代码块或循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">while(i &lt; 100) &#123;</span><br><span class="line">  console.log(&apos;i 当前为：&apos; + i);</span><br><span class="line">  i++;</span><br><span class="line">  if (i === 10) break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码只会执行10次循环，一旦<code>i</code>等于10，就会跳出循环。</p><p><code>for</code>循环也可以使用<code>break</code>语句跳出循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  if (i === 3)</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><p>上面代码执行到<code>i</code>等于3，就会跳出循环。</p><p><code>continue</code>语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">while (i &lt; 100)&#123;</span><br><span class="line">  i++;</span><br><span class="line">  if (i % 2 === 0) continue;</span><br><span class="line">  console.log(&apos;i 当前为：&apos; + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码只有在<code>i</code>为奇数时，才会输出<code>i</code>的值。如果<code>i</code>为偶数，则直接进入下一轮循环。</p><p>如果存在多重循环，不带参数的<code>break</code>语句和<code>continue</code>语句都只针对最内层循环。</p><h4 id="标签（label）"><a href="#标签（label）" class="headerlink" title="标签（label）"></a>标签（label）</h4><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line">  语句</span><br></pre></td></tr></table></figure><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p><p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) break top;</span><br><span class="line">      console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br></pre></td></tr></table></figure><p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p><p>标签也可以用于跳出代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo: &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  break foo;</span><br><span class="line">  console.log(&apos;本行不会输出&apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(2);</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure><p>上面代码执行到<code>break foo</code>，就会跳出区块。</p><p><code>continue</code>语句也可以与标签配合使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) continue top;</span><br><span class="line">      console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br><span class="line">// i=2, j=0</span><br><span class="line">// i=2, j=1</span><br><span class="line">// i=2, j=2</span><br></pre></td></tr></table></figure><p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p><p>本文截取阮一峰老师JavaScript入门教程，原文请查看<a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">JavaScript 教程</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导论&quot;&gt;&lt;a href=&quot;#导论&quot; class=&quot;headerlink&quot; title=&quot;导论&quot;&gt;&lt;/a&gt;导论&lt;/h2&gt;&lt;h3 id=&quot;什么是-JavaScript-语言？&quot;&gt;&lt;a href=&quot;#什么是-JavaScript-语言？&quot; class=&quot;headerlink&quot; title=&quot;什么是 JavaScript 语言？&quot;&gt;&lt;/a&gt;什么是 JavaScript 语言？&lt;/h3&gt;&lt;p&gt;JavaScript 是一门动态类型，面向对象的脚本语言，同时也是一种嵌入式（embedded）语言。主要依靠嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构入门</title>
    <link href="http://yoursite.com/2018/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/11/18/数据结构入门/</id>
    <published>2018-11-18T01:06:22.000Z</published>
    <updated>2018-11-27T14:00:13.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简要介绍各种数据结构，算是入门吧：</p></blockquote><ul><li>哈希表</li><li>队列</li><li>栈</li><li>链表</li><li>树</li><li>堆排序<a id="more"></a></li></ul><h2 id="1-哈希表（Hash-Table）"><a href="#1-哈希表（Hash-Table）" class="headerlink" title="1.哈希表（Hash Table）"></a><strong>1.哈希表（Hash Table）</strong></h2><ul><li><ul><li><p>符合键值对关系都是哈希，数组，对象都是哈希</p></li><li><p>计数排序中的桶（复杂度 O(n+max)，比快排（复杂度 nlogn）还快，缺点：计数排序无法负数和小数</p></li><li><p><a href="http://link.zhihu.com/?target=http%3A//bubkoo.com/2014/01/15/sort-algorithm/bucket-sort/" target="_blank" rel="noopener">桶排序</a> 与计数排序的区别，</p></li><li><ul><li>桶排序是计数排序的改良版</li><li>一个桶放一个范围内的数字，范围自定义，第一个桶永远不会与其他的桶内数字进行比较，桶内的数字可以使用快排或者再使用桶排序。。</li><li>桶排序相对节约空间，但桶里面的数据需要二次排序，浪费时间</li></ul></li><li><p><a href="http://link.zhihu.com/?target=http%3A//bubkoo.com/2014/01/15/sort-algorithm/radix-sort/" target="_blank" rel="noopener">基数排序</a> 与计数排序的区别</p></li><li><ul><li>计数数组适合10以内的排序，大于10的用基数排序</li><li>十进制的基数为10，拿出十个桶，每次从个位数开始入桶，到十位，百位，千位，循环完所有数字，之后每次通过先进先出从桶里拿出来完成排序。</li><li>基数排序可以适应特别大的数字，且比桶排序节约桶</li></ul></li><li><p>排序的原则 要么浪费空间，要么浪费时间，只能选一个进行优化</p></li></ul></li></ul><h2 id="2-队列（Queue）"><a href="#2-队列（Queue）" class="headerlink" title="2.队列（Queue）"></a><strong>2.队列（Queue）</strong></h2><ul><li><ul><li>先进先出</li><li>可以用数组实现， push与shift</li><li>举例：排队</li></ul></li></ul><h2 id="3-栈（Stack）"><a href="#3-栈（Stack）" class="headerlink" title="3.栈（Stack）"></a><strong>3.栈（Stack）</strong></h2><ul><li><ul><li>先进后出</li><li>可以用数组实现，push与pop</li><li>举例：盗梦空间</li></ul></li></ul><h2 id="4-链表（Linked-List）"><a href="#4-链表（Linked-List）" class="headerlink" title="4.链表（Linked List）"></a><strong>4.链表（Linked List）</strong></h2><ul><li><ul><li>数组无法<strong>直接</strong>删除中间的一项，链表（多个哈希连起来的）可以改变指向，进行数据的删除</li></ul></li></ul><p><img src="https://i.loli.net/2018/11/27/5bfd47f83f5f6.png" alt="TIM图片20181127212553.png"></p><p><img src="https://i.loli.net/2018/11/27/5bfd47f93ac50.png" alt="TIM图片20181127213308.png"></p><ul><li><ul><li>用哈希（JS里面用对象表示哈希）实现链表</li><li>链表头称为head、链节称为node</li></ul></li></ul><h2 id="5-树（tree）"><a href="#5-树（tree）" class="headerlink" title="5.树（tree）"></a><strong>5.树（tree）</strong></h2><ul><li><ul><li>由链表构成的树，层级结构、DOM</li><li>层数、深度、节点数</li><li><a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E4%25BA%258C%25E5%258F%2589%25E6%25A0%2591" target="_blank" rel="noopener">二叉树</a>（每次最多分两个叉）第i层有2^i个节点，总共有2^(i+1)-1个节点</li></ul></li></ul><p><img src="https://i.loli.net/2018/11/27/5bfd47f8b41ad.png" alt="TIM图片20181127212604.png"></p><ul><li><ul><li>满二叉树（每次都是两个分支）</li></ul></li></ul><p><img src="https://i.loli.net/2018/11/27/5bfd47f8c03fa.jpg" alt="TIM图片20181127212607.jpg"></p><ul><li><ul><li>完全二叉树（右边连续的没有长叶子）</li></ul></li></ul><p><img src="https://i.loli.net/2018/11/27/5bfd47f93c658.png" alt="TIM图片20181127212621.png"></p><ul><li><ul><li>数组可以表示完全二叉树和满二叉树，不能表示三叉树，四叉树，。。。其他树可以用哈希（对象）实现</li><li>操作：增删改查</li><li>堆排序用到了 tree</li><li>其他：<a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/B%25E6%25A0%2591" target="_blank" rel="noopener">B树</a>、<a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25BA%25A2%25E9%25BB%2591%25E6%25A0%2591" target="_blank" rel="noopener">红黑树</a>、<a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/AVL%25E6%25A0%2591" target="_blank" rel="noopener">AVL树</a></li></ul></li></ul><h2 id="6-堆排序：头狼之争（复杂度-nlogn）"><a href="#6-堆排序：头狼之争（复杂度-nlogn）" class="headerlink" title="6.堆排序：头狼之争（复杂度 nlogn）"></a><strong>6.堆排序：头狼之争（复杂度 nlogn）</strong></h2><ul><li><ul><li>堆是一种特殊的树，父节点永远大于子节点</li><li>最大堆：最大元素在根节点</li></ul></li></ul><p><img src="https://pic2.zhimg.com/80/v2-df13238e7692b37d4e044af392c7a79d_hd.jpg" alt="img"></p><ul><li><ul><li>最大堆调整：图下的 4 不符合最大堆概念，找他的子节点中最大的替换，再去检查替换后位置的子节点，发现8&gt;4,将4 与 8 替换，由于替换后的4没有子节点，此时这个堆是最大堆</li></ul></li></ul><p><img src="https://i.loli.net/2018/11/27/5bfd497a21125.jpg" alt="TIM图片20181127214000.jpg"></p><ul><li><ul><li>堆排序：将数组表示成完全二叉树，从他的叶子开始最大堆调整，使所有的树苗都是最大堆，只要整个二叉树是一个绝对最大堆，拿到当前堆里面的最大数（顶端head），把这个数放在数组最右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，然后进行调整得到第二个最大堆，拿到最大值放在数组右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，。。。。。直到只剩一个数为止。</li></ul></li></ul><p>堆排序查看 ：<a href="https://neil94n.github.io/2018/11/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A0%86%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">排序算法入门（二）堆排序</a></p><p>计数排序，桶排序查看：<a href="https://neil94n.github.io/2018/11/17/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%8C%E6%A1%B6%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">排序算法入门(三) 计数排序，桶排序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文简要介绍各种数据结构，算是入门吧：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;堆排序
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>排序算法入门(三) 计数排序，桶排序</title>
    <link href="http://yoursite.com/2018/11/17/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%8C%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/11/17/排序算法入门（三）计数排序，桶排序/</id>
    <published>2018-11-17T14:36:24.000Z</published>
    <updated>2018-11-27T13:57:19.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计数排序："><a href="#计数排序：" class="headerlink" title="计数排序："></a><strong>计数排序</strong>：</h2><p>原理：与比较排序注重于元素之间的比较不同，计数排序专注于找准自己的位置，而不关心自己比谁小，比谁大。其核心在于，对于任意一个属于数组array的元素number，统计其在array内出现的次数，将其以键值对的形式保存在hash，如果hash没有number，使hash[nmber] = 1,并且与max做对比是否需要重置max（max是hash的最大键，也可以理解为共有多少的桶。。），否则hash[number]++,形成hash后，将其按顺序push到新数组newArr。<br><a id="more"></a></p><blockquote><p>计数排序可视化：<a href="http://link.zhihu.com/?target=https%3A//visualgo.net/zh/sorting" target="_blank" rel="noopener">https://visualgo.net/zh/sorting</a> 点击COU</p></blockquote><p>流程图：<br><img src="https://i.loli.net/2018/11/26/5bfbf75b86f44.jpg" alt="计数顺序.jpg"><br>计数排序伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- &#123;</span><br><span class="line">&apos;0&apos;:0,</span><br><span class="line">&apos;1&apos;:2,</span><br><span class="line">&apos;2&apos;:1,</span><br><span class="line">&apos;3&apos;:56,</span><br><span class="line">&apos;4&apos;:4,</span><br><span class="line">&apos;5&apos;:67,</span><br><span class="line">&apos;6&apos;:3,</span><br><span class="line">&apos;length:7&apos;</span><br><span class="line">&#125; //构建数组a</span><br><span class="line">hash &lt;- &#123;&#125; //构建哈希</span><br><span class="line">index &lt;- 0 //初始值底标</span><br><span class="line">while index &lt; a[&apos;length&apos;] //遍历数组a</span><br><span class="line">number &lt;- a[index] //将数组a的每个值记下来</span><br><span class="line">if hash[number] == undefined //该值在 hash[number] 中还不存在</span><br><span class="line">hash[number] = 1 //将该值记入hash中，并标记出现了1次</span><br><span class="line">else</span><br><span class="line">hash[number] &lt;- hash[number] + 1 //每多出现一次加次1</span><br><span class="line">end</span><br><span class="line">index &lt;- index + 1 //遍历所有底标</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">index2 &lt;- 0 //定义一个新的底标</span><br><span class="line">max &lt;- findMax(a) //最大值67</span><br><span class="line">newArr &lt;- &#123;&#125; //定义一个新数组</span><br><span class="line">while index2 &lt;= max //遍历原数组的所有值 </span><br><span class="line">count &lt;- hash[index2] //将hash的每个底标所对应的数提取出来</span><br><span class="line">if count != undefined //如果该数（count） 存在</span><br><span class="line">countIndex &lt;- 0 //给该值初始一个新底标值0</span><br><span class="line">while countIndex &lt; count //遍历该值所对应的个数</span><br><span class="line">newArr.push(index2) //将所有该值输入到新数组中</span><br><span class="line">countIndex &lt;- countIndex + 1 </span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">index2 &lt;- index2 + 1 //对应 while index2 &lt;= max，遍历数组所有底标</span><br><span class="line">end</span><br><span class="line">print newArr</span><br></pre></td></tr></table></figure></p><p>1、先将数组a，用”值：值出现的次数“的形式，写入hash表；</p><ul><li>遍历数组a，提取键名，</li><li>提取键名出现的次数，</li></ul><p>2、再将hash表中的值展开放到一个新数组中；</p><ul><li>找出hash中的最大值，从零开始，0-max，</li><li>依次确认是否出现过和出现的次数，出现几次就依次加入到新数组中几次，</li></ul><p>3、打印该数组。</p><p>javascript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @i 原数组索引 </span></span><br><span class="line"><span class="comment"> * @hashIndex hash内键值对的键</span></span><br><span class="line"><span class="comment"> * @countIndex hash内键值对的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CountingSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = &#123;&#125;,</span><br><span class="line">        max = array[<span class="number">0</span>],</span><br><span class="line">        newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> number = array[i];</span><br><span class="line">        <span class="keyword">if</span> (hash[number]) &#123;</span><br><span class="line">            hash[number]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[number] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; max) &#123;</span><br><span class="line">                max = number</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> hashIndex = <span class="number">0</span>; hashIndex &lt; max + <span class="number">1</span>; hashIndex++) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = hash[hashIndex];</span><br><span class="line">        <span class="keyword">if</span> (count) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> countIndex = <span class="number">0</span>; countIndex &lt; count; countIndex++) &#123;</span><br><span class="line">                newArr.push(hashIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(CountingSort([<span class="number">3</span>, <span class="number">0</span>,<span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure><hr><h2 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a><strong>桶排序</strong>：</h2><p>原理：将数组按照步长放在不同的桶里，桶的数量根据数组长度和步长确定，数组全部入桶之后，每个桶内进行排序，按顺序将所有桶的数据合并。</p><p>难点：桶的数量，左右边缘的计算</p><blockquote><p>桶排序可视化：<a href="http://link.zhihu.com/?target=https%3A//www.cs.usfca.edu/%7Egalles/visualization/BucketSort.html" target="_blank" rel="noopener">Bucket Sort Visualization</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @array 原始数组</span></span><br><span class="line"><span class="comment"> * @step 每个桶的步长：比如step = 3;表示一个桶放连续的3个数字，比如 0,1,2 | 3,4,5 |6,7,8</span></span><br><span class="line"><span class="comment"> * @bucket 二维数组保存数组 </span></span><br><span class="line"><span class="comment"> * @bucketCount 桶的数量</span></span><br><span class="line"><span class="comment"> * @bucketL 每个桶的长度</span></span><br><span class="line"><span class="comment"> * @max 数组最大值</span></span><br><span class="line"><span class="comment"> * @min 数组最小值 </span></span><br><span class="line"><span class="comment"> * @ i 原数组索引</span></span><br><span class="line"><span class="comment"> * @ j 桶的索引</span></span><br><span class="line"><span class="comment"> * @ z bucket的索引</span></span><br><span class="line"><span class="comment"> * @temp 临时保存每一项</span></span><br><span class="line"><span class="comment"> * @newArr 新数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BucketSort</span>(<span class="params">array, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp,</span><br><span class="line">        bucketL = <span class="number">0</span>,</span><br><span class="line">        bucket = [],</span><br><span class="line">        l = array.length,</span><br><span class="line">        max = <span class="built_in">Math</span>.max(...array),</span><br><span class="line">        min = <span class="built_in">Math</span>.min(...array),</span><br><span class="line">        bucketCount = <span class="built_in">Math</span>.ceil((max - min + <span class="number">1</span>) / step),</span><br><span class="line">        newArr = [];</span><br><span class="line">    <span class="comment">// 入桶</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        temp = array[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucketCount; j++) &#123;</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (!bucket[j]) &#123;</span><br><span class="line">                bucket[j] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            bucketL = bucket[j].length;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;= min + j * step &amp;&amp; temp &lt;= min + j * step + step - <span class="number">1</span>) &#123;</span><br><span class="line">                bucket[j].push(temp);</span><br><span class="line">                <span class="keyword">if</span> (bucketL &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 桶内排序 插入排序 </span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> k = bucketL - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp &lt; bucket[j][k]) &#123;</span><br><span class="line">                            bucket[j].splice(k, <span class="number">0</span>, temp);</span><br><span class="line">                            bucket[j].splice(k + <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出桶 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> z = <span class="number">0</span> ; z&lt;bucket.length;z++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bucket[z])&#123;</span><br><span class="line">            newArr.push(...bucket[z])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(BucketSort([ <span class="number">12</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>, <span class="number">7</span>], <span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>参考：<a href="http://link.zhihu.com/?target=http%3A//bubkoo.com/2014/01/15/sort-algorithm/bucket-sort/" target="_blank" rel="noopener">常见排序算法 - 桶排序 (Bucket Sort)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;计数排序：&quot;&gt;&lt;a href=&quot;#计数排序：&quot; class=&quot;headerlink&quot; title=&quot;计数排序：&quot;&gt;&lt;/a&gt;&lt;strong&gt;计数排序&lt;/strong&gt;：&lt;/h2&gt;&lt;p&gt;原理：与比较排序注重于元素之间的比较不同，计数排序专注于找准自己的位置，而不关心自己比谁小，比谁大。其核心在于，对于任意一个属于数组array的元素number，统计其在array内出现的次数，将其以键值对的形式保存在hash，如果hash没有number，使hash[nmber] = 1,并且与max做对比是否需要重置max（max是hash的最大键，也可以理解为共有多少的桶。。），否则hash[number]++,形成hash后，将其按顺序push到新数组newArr。&lt;br&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法入门（二）堆排序</title>
    <link href="http://yoursite.com/2018/11/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/11/16/排序算法入门（二）堆排序/</id>
    <published>2018-11-16T05:16:04.000Z</published>
    <updated>2018-11-27T13:46:15.535Z</updated>
    
    <content type="html"><![CDATA[<p>原理：将数组表示成完全二叉树，从他的叶子开始最大堆调整，使所有的树苗都是最大堆，只要整个二叉树是一个绝对最大堆，拿到当前堆里面的最大数（顶端head），把这个数放在数组最右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，然后进行调整得到第二个最大堆，拿到最大值放在数组右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，。。。。。直到只剩一个数为止。<br><a id="more"></a><br>堆排序可视化：<a href="http://link.zhihu.com/?target=https%3A//www.cs.usfca.edu/%7Egalles/visualization/HeapSort.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/HeapSort.html</a>：务必打开。<br>array = [804,264,825,175,282,910,914,920,928,179,339,347,161,999,993] ;<br>将数组表示为完全二叉树：</p><p><img src="https://i.loli.net/2018/11/27/5bfd3f1a24f9f.png" alt="TIM图片20181127204811.png"></p><p>第一轮 ：从二叉树倒数第一层和第二层构成的小堆开始进行最大堆调整，就是图中框里的堆</p><p><img src="https://i.loli.net/2018/11/27/5bfd3f1a30bc0.png" alt="TIM图片20181127204828.png"></p><ol><li>maxHeapify 最大堆调整函数： 将堆的末端子节点作调整，使得子节点永远小于父节点</li><li>array 为 需要排序的原始数组</li><li>index ：第一轮里面传入的index ，第一次调整时 最后一个框的 347的索引6就是传入的index，</li><li>heapsize：当前数组长度，第一轮就是原始数组array的长度，之后依次减一</li><li>iMax : 保存当前堆内最大值索引，初始化为 index，</li><li>左边节点索引iLeft小于heapsize，意思就是计算出来的索引务必在数组的长度范围内，如果左节点值（993）大于当前节点值（347），说明这不是一个最大堆，将最大值索引重置为index</li><li>如果计算出来的右节点索引在长度范围内，且值（999）大于当前堆内最大值（347）就替换，框1不替换</li><li>如果计算出来的最大值索引不是index，替换iMax与index的值，重置iMax为index，向下递归</li><li>反之，退出循环，如框1中 993与347替换后index重置为13，但是13下面没有节点,iMax == index,退出。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/ **</span><br><span class="line"> * 从 index 开始检查并保持最大堆性质</span><br><span class="line"> *</span><br><span class="line"> * @array</span><br><span class="line"> *</span><br><span class="line"> * @index 检查的起始下标</span><br><span class="line"> *</span><br><span class="line"> * @heapSize 堆大小</span><br><span class="line"> *</span><br><span class="line"> **/</span><br><span class="line">function maxHeapify(array, index, heapSize) &#123;</span><br><span class="line">  var iMax, iLeft, iRight;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    iMax = index;</span><br><span class="line">    //index下 左边节点</span><br><span class="line">    iLeft = 2 * index + 1;</span><br><span class="line">    //index下 右边节点</span><br><span class="line">    iRight = 2 * (index + 1);</span><br><span class="line">    //左节点存在且大于父节点</span><br><span class="line">    if (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</span><br><span class="line">      iMax = iLeft;</span><br><span class="line">    &#125;</span><br><span class="line">    //右节点存在且大于当前最大值</span><br><span class="line">    if (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</span><br><span class="line">      iMax = iRight;</span><br><span class="line">    &#125;</span><br><span class="line">    if (iMax != index) &#123;</span><br><span class="line">    //如果最大值不是自己，那么将自己与最大值替换</span><br><span class="line">      [array[iMax],array[index]] = [array[index],array[iMax]]</span><br><span class="line">    //重置当前节点为最大值的索引，递归向下调整，使父节点永远大于子节点</span><br><span class="line">      index = iMax;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      //如果最大值是自己，说明已经是最大堆或者该节点下没有子节点</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面仅叙述了堆1的最大堆调整，接着还需要依次向左，再向上，如图 从堆1&gt;2&gt;3&gt;4&gt;5&gt;6&gt;7 一个一个调整</p><p><img src="https://i.loli.net/2018/11/27/5bfd3f1a5caa6.png" alt="TIM图片20181127204836.png"></p><ol><li>buildMaxHeap函数用来创建整个二叉树的最大堆，</li><li>iParent就是需要传入maxHeapify的index，用来与两个子节点比较，依次是 6 5 4 3 2 1 0</li><li>i 从 6 递减到 0 的过程中，就是堆1 到 堆7的最大堆调整</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function buildMaxHeap(array) &#123;</span><br><span class="line">   var i,</span><br><span class="line">     iParent = Math.floor(array.length / 2) - 1;</span><br><span class="line">   for (i = iParent; i &gt;= 0; i--) &#123;</span><br><span class="line">     maxHeapify(array, i, array.length);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意，堆6，堆5的二级又分别包含三级节点，这里就用到maxHeapify的递归，向下继续调整，直到子节点永远小于父节点，如下，堆6的调整过程，不仅179与347替换，替换后的179影响的堆1原来的秩序，所以还要调整第二轮到最后一轮：第一轮调整到堆7时，二叉树顶端产生最大值，需要将其与最后一个值替换，然后取出， 将剩余的堆继续调整为最大堆， 再次将堆顶的最大数替换取出，这个过程持续到剩余数只有一个时结束</p><p>sort函数 ：移除根节点的最大值，并做最大堆调整的递归运算</p><p>每次从最后一个堆开始调整，形成最大堆后，移除最大值，循环数组长度减一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function sort(array) &#123;</span><br><span class="line">   buildMaxHeap(array);</span><br><span class="line">   for (var i = array.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">     swap(array, 0, i);</span><br><span class="line">     maxHeapify(array, 0, i);</span><br><span class="line">   &#125;</span><br><span class="line">   return array;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">完整javascript：</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">maxHeapify</span>(<span class="params">array, index, heapSize</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> iMax,</span><br><span class="line">                    iLeft,</span><br><span class="line">                    iRight;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    iMax = index;</span><br><span class="line">                    <span class="comment">//index下 左边节点, 这规律真是千奇百怪！！！才疏学浅见识少啊。。</span></span><br><span class="line">                    iLeft = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//index下 右边节点</span></span><br><span class="line">                    iRight = <span class="number">2</span> * (index + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 左节点存在且大于父节点</span></span><br><span class="line">                    <span class="keyword">if</span> (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</span><br><span class="line">                        iMax = iLeft;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 右节点存在且大于当前最大值</span></span><br><span class="line">                    <span class="keyword">if</span> (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</span><br><span class="line">                        iMax = iRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (iMax != index) &#123;</span><br><span class="line">                        <span class="comment">// 如果最大值不是自己，那么将自己与最大值替换</span></span><br><span class="line">                        [array[iMax], array[index]] = [array[index], array[iMax]]</span><br><span class="line">                        <span class="comment">// 重置当前节点为最大值的索引，递归向下调整，使父节点永远大于子节点</span></span><br><span class="line">                        index = iMax;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果最大值是自己，说明已经是最大堆或者该节点下没有子节点</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> i,</span><br><span class="line">                    iParent = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = iParent; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    maxHeapify(array, i, array.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">                buildMaxHeap(array); <span class="comment">//第一轮</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    [array[<span class="number">0</span>], array[i]] = [array[i], array[<span class="number">0</span>]]</span><br><span class="line">                    maxHeapify(array, <span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sort(array);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(heapSort([<span class="number">804</span>,<span class="number">264</span>,<span class="number">825</span>,<span class="number">175</span>,<span class="number">282</span>,<span class="number">910</span>,<span class="number">914</span>,<span class="number">920</span>,<span class="number">928</span>,<span class="number">179</span>,<span class="number">339</span>,<span class="number">347</span>,<span class="number">161</span>,<span class="number">999</span>,<span class="number">993</span>] ));</span><br></pre></td></tr></table></figure><p>难点：</p><ol><li>查找左右节点的索引规律</li><li>函数递归思想保证每次子节点小于父节点</li><li>创建最大堆函数 buildMaxHeap函数的设计，for循环里iParent的循环递减</li><li>sort函数取出最大值，重置heapSize的思路</li><li>全是难点！。。。。。。</li></ol><p>参考：<a href="http://link.zhihu.com/?target=http%3A//bubkoo.com/2014/01/14/sort-algorithm/heap-sort/" target="_blank" rel="noopener">http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原理：将数组表示成完全二叉树，从他的叶子开始最大堆调整，使所有的树苗都是最大堆，只要整个二叉树是一个绝对最大堆，拿到当前堆里面的最大数（顶端head），把这个数放在数组最右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，然后进行调整得到第二个最大堆，拿到最大值放在数组右边隐藏掉，然后把树最右下方的叶子放在最顶端位置，。。。。。直到只剩一个数为止。&lt;br&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法入门（一） 冒泡排序，选择排序，插入排序</title>
    <link href="http://yoursite.com/2018/11/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%EF%BC%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/11/15/排序算法入门（一）冒泡排序，选择排序，插入排序/</id>
    <published>2018-11-15T10:26:24.000Z</published>
    <updated>2018-11-27T13:45:11.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简要记录常用排序算法的原理及如何用javascript实现排序功能，具体排序动画效果查看<a href="http://link.zhihu.com/?target=https%3A//visualgo.net/en/sorting" target="_blank" rel="noopener">Sorting (Bubble, Selection, Insertion, Merge, Quick, Counting, Radix)</a>，看完后思路会非常清晰（请问还有什么比算法动态演变更让人理解？？）。计算机计算是非常机械的，不同于人脑快速找出最值快速排序，必须放慢思路，理清逻辑，关于实现算法的代码，建议反复分析，不同的for循环有不同的结果，每位程序员都有不同的思路，但基本原理都是一致的<br><a id="more"></a></p><ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li></ul></blockquote><h3 id="冒泡排序（Bubble-sort）"><a href="#冒泡排序（Bubble-sort）" class="headerlink" title="冒泡排序（Bubble sort）"></a>冒泡排序（Bubble sort）</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h4 id="冒泡排序流程图"><a href="#冒泡排序流程图" class="headerlink" title="冒泡排序流程图"></a>冒泡排序流程图</h4><p><img src="https://user-gold-cdn.xitu.io/2018/6/25/16436af307e81502?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- &#123;</span><br><span class="line">&apos;0&apos;:4,</span><br><span class="line">&apos;1&apos;:6,</span><br><span class="line">&apos;2&apos;:3,</span><br><span class="line">&apos;3&apos;:2,</span><br><span class="line">&apos;4&apos;:1,</span><br><span class="line">&apos;length&apos;: 5</span><br><span class="line">&#125;</span><br><span class="line">轮数 = 1</span><br><span class="line">左手指向的下标 </span><br><span class="line"></span><br><span class="line">while(轮数 &lt; a[&apos;length&apos;])</span><br><span class="line">    左标 = 0</span><br><span class="line">    while(左标 &lt;= a[&apos;length&apos;] - 1 - 轮数)</span><br><span class="line">        if a[左下标] &lt; a[左下标+1]</span><br><span class="line">        else</span><br><span class="line">            t &lt;- a[左标]</span><br><span class="line">            a[左标] &lt;- a[左标+1]</span><br><span class="line">            a[左标+1] &lt;- t</span><br><span class="line">        end</span><br><span class="line">        左标 &lt;- 左标+1</span><br><span class="line">    end</span><br><span class="line">    轮数 &lt;- 轮数 + 1</span><br><span class="line">end</span><br><span class="line">print a</span><br></pre></td></tr></table></figure><p>javascript实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length;i++)&#123; <span class="comment">//轮数</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ;j &lt; arr.length - i;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">               [arr[j],arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>],arr[j]]  <span class="comment">//es6语法交换元素</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(BubbleSort([<span class="number">21</span>,<span class="number">5</span>,<span class="number">10</span>]))</span><br></pre></td></tr></table></figure><hr><h3 id="选择排序（Selection-sort）"><a href="#选择排序（Selection-sort）" class="headerlink" title="选择排序（Selection sort）"></a>选择排序（Selection sort）</h3><p><strong>工作原理</strong>: 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h4 id="选择排序流程图"><a href="#选择排序流程图" class="headerlink" title="选择排序流程图"></a>选择排序流程图</h4><p><img src="https://user-gold-cdn.xitu.io/2018/6/11/163ee33b498539b7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h4 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    a&lt;-&#123;</span><br><span class="line">    &apos;0&apos;=4,</span><br><span class="line">    &apos;1&apos;=6,</span><br><span class="line">    &apos;2&apos;=3,</span><br><span class="line">    &apos;3&apos;=2,</span><br><span class="line">    &apos;4&apos;=1,</span><br><span class="line">    &apos;length&apos;=5</span><br><span class="line">&#125;</span><br><span class="line">轮数=1</span><br><span class="line">    while(轮数&lt;a[&apos;length&apos;])</span><br><span class="line">        min左标&lt;-轮数-1;左标&lt;-min左标+1</span><br><span class="line">        while(左标&lt;a[&apos;length&apos;])</span><br><span class="line">            if  a[左标]&lt;a[min左标]</span><br><span class="line">                a[min左标]&lt;-a[左标]</span><br><span class="line">            else</span><br><span class="line">                什么也不做</span><br><span class="line">            end</span><br><span class="line">            左标&lt;-左标+1</span><br><span class="line">        end</span><br><span class="line">        t&lt;-a[轮数-1]</span><br><span class="line">        a[轮数-1]&lt;-a[min左标]</span><br><span class="line">        a[min左标]&lt;-t</span><br><span class="line">        </span><br><span class="line">        轮数&lt;-轮数+1</span><br><span class="line">    end</span><br><span class="line">    print a</span><br></pre></td></tr></table></figure><h4 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> minIndex;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">//轮数 </span></span><br><span class="line">      minIndex = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">              minIndex = j;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="插入排序（Insection-Sort）"><a href="#插入排序（Insection-Sort）" class="headerlink" title="插入排序（Insection Sort）"></a>插入排序（Insection Sort）</h3><p>原理：将第一个元素标记为已排序，遍历每个没有排序过的元素，提出当前第一个位置的元素X，将X与排序过的元素从length-1 到 0 进行遍历，如果某个元素大于X，将排序过的元素向右移一格，否则插入这个元素后面。</p><h4 id="选择排序流程图-1"><a href="#选择排序流程图-1" class="headerlink" title="选择排序流程图"></a>选择排序流程图</h4><p><img src="https://i.loli.net/2018/11/27/5bfd2e2d10eca.png" alt="插入排序改进.png"></p><h4 id="javascript实现-1"><a href="#javascript实现-1" class="headerlink" title="javascript实现"></a>javascript实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123; <span class="comment">//轮数 </span></span><br><span class="line">         <span class="keyword">let</span> num = arr[i]</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">             <span class="keyword">if</span>(num &lt; arr[j])&#123;</span><br><span class="line">                  arr.splice(j,<span class="number">0</span>,num);</span><br><span class="line">                  arr.splice(j+<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文简要记录常用排序算法的原理及如何用javascript实现排序功能，具体排序动画效果查看&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//visualgo.net/en/sorting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sorting (Bubble, Selection, Insertion, Merge, Quick, Counting, Radix)&lt;/a&gt;，看完后思路会非常清晰（请问还有什么比算法动态演变更让人理解？？）。计算机计算是非常机械的，不同于人脑快速找出最值快速排序，必须放慢思路，理清逻辑，关于实现算法的代码，建议反复分析，不同的for循环有不同的结果，每位程序员都有不同的思路，但基本原理都是一致的&lt;br&gt;
    
    </summary>
    
      <category term="基础知识" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（九）：伪类和伪元素</title>
    <link href="http://yoursite.com/2018/11/14/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2018/11/14/CSS学习笔记（九）：伪类和伪元素/</id>
    <published>2018-11-14T03:42:14.000Z</published>
    <updated>2018-11-26T11:48:17.043Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文档阅读："><a href="#文档阅读：" class="headerlink" title="文档阅读："></a>文档阅读：</h4><p><a href="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/" target="_blank" rel="noopener">总结伪类与伪元素 | AlloyTeamwww.alloyteam.com!</a></p><h4 id="前文回顾："><a href="#前文回顾：" class="headerlink" title="前文回顾："></a>前文回顾：</h4><a id="more"></a><h1 id="一、伪类："><a href="#一、伪类：" class="headerlink" title="一、伪类："></a>一、伪类：</h1><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化</p><h3 id="2、类型"><a href="#2、类型" class="headerlink" title="2、类型"></a>2、类型</h3><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ea36353?w=594&amp;h=537&amp;f=jpeg&amp;s=35182" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ea36353?w=594&amp;h=537&amp;f=jpeg&amp;s=35182" alt="image"></a></p><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><p>用伪类元素进行效果展示<br>（1）<code>link</code> <code>visited</code> <code>hover</code> <code>active</code> 顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 未访问的链接 */</span><br><span class="line"> a:link&#123;  color: blue;  &#125;  </span><br><span class="line">a:visited&#123;  color: green;  &#125;  </span><br><span class="line">/* 点击后鼠标脱离，获得焦点的链接 */ </span><br><span class="line"> a:focus&#123;  color: grey;  &#125;</span><br><span class="line">  /*鼠标悬停时，内容颜色获得红色 */ </span><br><span class="line"> a:hover&#123;  color: red;  &#125; </span><br><span class="line"> /*选择活动链接*/  </span><br><span class="line">a:active&#123;  color: pink;  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850a9fde17?w=600&amp;h=179&amp;f=jpeg&amp;s=12156" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850a9fde17?w=600&amp;h=179&amp;f=jpeg&amp;s=12156" alt="image"></a></p><p>（2）<code>first-child</code> VS <code>first-of-type</code></p><ul><li><code>h1:first-child</code> :选择是h1并且它是长子的元素</li><li><code>h1:first-of-type</code>:选择是h1并且它是它父亲里h1类型中的长子的元素<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850a2ba359?w=600&amp;h=178&amp;f=jpeg&amp;s=19271" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850a2ba359?w=600&amp;h=178&amp;f=jpeg&amp;s=19271" alt="image"></a></li></ul><p>关于<code>first-child</code>VS<code>first-of-type</code>的使用在之前的css系列博客文章中有详细解释：<br><a href="https://zhuanlan.zhihu.com/p/35319935/edit" target="_blank" rel="noopener">#00你认真学了css？</a></p><h1 id="二、伪元素"><a href="#二、伪元素" class="headerlink" title="二、伪元素"></a>二、伪元素</h1><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式</p><h3 id="2、类型-1"><a href="#2、类型-1" class="headerlink" title="2、类型"></a>2、类型</h3><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850eb89507?w=491&amp;h=212&amp;f=jpeg&amp;s=12636" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850eb89507?w=491&amp;h=212&amp;f=jpeg&amp;s=12636" alt="image"></a><br>如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ebcd049?w=600&amp;h=201&amp;f=jpeg&amp;s=16387" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ebcd049?w=600&amp;h=201&amp;f=jpeg&amp;s=16387" alt="image"></a></p><h3 id="3、-before-和-after（也可以写-before和-after）"><a href="#3、-before-和-after（也可以写-before和-after）" class="headerlink" title="3、:before 和 :after（也可以写::before和 ::after）"></a>3、<code>:before</code> 和 <code>:after</code>（也可以写<code>::before</code>和 <code>::after</code>）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;p&gt;这是第一段&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  .box:before&#123;</span><br><span class="line">    content: &apos;start&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  .box:after&#123;</span><br><span class="line">    content: &apos;end&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ec94ec2?w=600&amp;h=58&amp;f=jpeg&amp;s=2200" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2850ec94ec2?w=600&amp;h=58&amp;f=jpeg&amp;s=2200" alt="image"></a></p><p>使用伪元素<code>before</code>和<code>after</code>的好处：</p><ul><li>可以在后台发现，p的前后分别出现<code>::before</code>和<code>::after</code>。html的dom树中原本没有<code>::before</code>和<code>::after</code>，现通过css样式添加，使其在dom树中添加这两个元素。</li><li>用添加<code>::before</code>和<code>::after</code>的目的是为了省标签。<code>::before</code>生成的效果，所在的位置位于父元素（如box）的第一个子元素，<code>::after</code>则位于父元素（如box）的最后一个子元素，即在html的dom树上多了两个子元素，这两个子元素无需在html中体现，只需在css中表示即可。</li><li><code>::before</code>和<code>::after</code>所展示的效果相当于一个行内元素（注意行内元素的一些特性）</li><li>其中<code>content</code>是必不可少</li></ul><h3 id="4、伪类选择器的应用场景"><a href="#4、伪类选择器的应用场景" class="headerlink" title="4、伪类选择器的应用场景"></a>4、伪类选择器的应用场景</h3><p>（1）伪类选择器应用于清除浮动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细解释请回看之前我写得关于浮动的副作用和解决办法：<a href="https://zhuanlan.zhihu.com/p/36137040" target="_blank" rel="noopener">#03你认真学了css？（基本样式3：浮动+定位）</a></p><p>（2）伪类选择器可作为替代标签<br>用代码替代图片，如使用css3实现一个带边框的三角符。思路：边框+三角符号的组合，先确认边框样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.bubble&#123;</span><br><span class="line">position: relative;</span><br><span class="line">padding: 10px;</span><br><span class="line">border-radius: 3px;  /*可填可不填*/</span><br><span class="line">background: #fff;</span><br><span class="line">border: 1px solid #000;</span><br><span class="line">                        display: inline-block; </span><br><span class="line">&#125;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;bubble&quot;&gt;</span><br><span class="line">hello world</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>再确认三角样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.bubble:before&#123;</span><br><span class="line">content:&apos;&apos;;</span><br><span class="line">width: 10px;</span><br><span class="line">height: 10px;</span><br><span class="line">border-left: 1px solid #000;</span><br><span class="line">border-top: 1px solid #000;</span><br><span class="line">background: #fff;</span><br><span class="line">display: inline-block;</span><br><span class="line">                        position: absolute;</span><br><span class="line">                        transform: rotateZ(45deg);  </span><br><span class="line">                        top: -6px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;bubble&quot;&gt;</span><br><span class="line">hello world</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>这里基础的三角样式我们在之前已经有涉及过怎么使用：请戳🔽<br><a href="https://zhuanlan.zhihu.com/p/35477001" target="_blank" rel="noopener">#01你认真学了css？（基本样式1）</a></p><p><strong>使用伪元素怎么实现三角符号(css3)：</strong><br>基础代码：（关于三角形的位置参数可以使用页面后台进行调试）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">         .bubble&#123;  position: relative;  padding: 10px;  border-radius: 3px;  /*可填可不填*/  background: #fff;  border: 1px solid #000;  display: inline-block;  &#125;  .bubble:before&#123;  content:&apos;&apos;;  width: 10px;  height: 10px;  border-left: 1px solid #000;  border-top: 1px solid #000;  background: #fff;  display: inline-block;  transform:  rotateZ(45deg);  position: absolute;  top: -6px;  &#125; &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;bubble&quot;&gt;</span><br><span class="line">hello world</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2854db5ec58?w=600&amp;h=419&amp;f=jpeg&amp;s=26667" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2854db5ec58?w=600&amp;h=419&amp;f=jpeg&amp;s=26667" alt="image"></a><br>运用以上知识举一反三，实现以下效果：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c2854f8436f4?w=600&amp;h=232&amp;f=jpeg&amp;s=2299" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c2854f8436f4?w=600&amp;h=232&amp;f=jpeg&amp;s=2299" alt="image"></a></p><p><strong>代码请戳：</strong><a href="https://github.com/wxq393/project_work/tree/master/%E4%BC%AA%E5%85%83%E7%B4%A0/css3%E4%B8%89%E8%A7%92%E7%AC%A6%E5%8F%B7-%E4%BC%AA%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">我的代码</a></p><p>（3）伪类选择器应用于<code>element：checked;</code>（勾选住的一个状态）<br>即input元素的自定义重要属性<code>checkbox</code>或者<code>radio</code>，实现一个自定义的样式。如：笑脸切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*今天的心情:*/</span><br><span class="line"> &lt;input type=&quot;checkbox&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">input[type=checkbox]&#123; </span><br><span class="line"> -webkit-appearance: none;  /*去掉未勾选的方框默认样式*/  appearance: none;  background:  url(http://7xpvnv.com2.z0.glb.qiniucdn.com/b6dcd011-23cc-4d95-9e51-9f10100103bd.png) 0 0 no-repeat;  </span><br><span class="line">display: inline-block; </span><br><span class="line"> width: 20px;  </span><br><span class="line">height: 20px;  </span><br><span class="line">background-size: contain;  /*背景图片的大小*/  </span><br><span class="line">vertical-align: middle;  outline: none;  </span><br><span class="line">&#125;  /*勾选之后的状态*/ </span><br><span class="line"> input[type=checkbox]:checked&#123;</span><br><span class="line">  -webkit-appearance: none;  </span><br><span class="line">appearance: none;  </span><br><span class="line">background:  url(http://7xpvnv.com2.z0.glb.qiniucdn.com/538f26f0-6f3e-48d5-91e6-5b5bb730dd19.png) 0 0 no-repeat;  </span><br><span class="line">display: inline-block;  </span><br><span class="line">width: 20px;  </span><br><span class="line">height: 20px;  </span><br><span class="line">background-size: contain;  </span><br><span class="line">vertical-align: middle; </span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>没有加js</li><li>使用该属性样式，对于input来说已经实现勾选状态，自定义加一些自己的图片，自动加载信息</li></ul><p>（4）伪类选择器应用于字体图标<br>A、为什么针对字体库而来的字体，我们可以调整它的字体大小和颜色？<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c285519b687b?w=600&amp;h=204&amp;f=jpeg&amp;s=13853" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c285519b687b?w=600&amp;h=204&amp;f=jpeg&amp;s=13853" alt="image"></a><br>B、完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//at.alicdn.com/t/font_nyta5x5h650cnmi.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;span class=&quot;iconfont icon-jirengulogojichu2&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .iconfont&#123;  font-size: 100px;  color: red;  &#125; &lt;/style&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在css中添加这个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*  \e605为字体库中的特有的一种编码形式：unicode码  */</span><br><span class="line">.icon-jirengulogojichu2：before&#123;content:&apos;\e605&apos;;&#125;</span><br></pre></td></tr></table></figure><p>即：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653c28555441374?w=600&amp;h=191&amp;f=jpeg&amp;s=21512" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653c28555441374?w=600&amp;h=191&amp;f=jpeg&amp;s=21512" alt="image"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;文档阅读：&quot;&gt;&lt;a href=&quot;#文档阅读：&quot; class=&quot;headerlink&quot; title=&quot;文档阅读：&quot;&gt;&lt;/a&gt;文档阅读：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;总结伪类与伪元素 | AlloyTeamwww.alloyteam.com!&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;前文回顾：&quot;&gt;&lt;a href=&quot;#前文回顾：&quot; class=&quot;headerlink&quot; title=&quot;前文回顾：&quot;&gt;&lt;/a&gt;前文回顾：&lt;/h4&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（八）：布局套路</title>
    <link href="http://yoursite.com/2018/11/13/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%B8%83%E5%B1%80%E5%A5%97%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/11/13/CSS学习笔记（八）：布局套路/</id>
    <published>2018-11-13T00:11:44.000Z</published>
    <updated>2018-11-26T11:47:54.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、两种布局使用分析"><a href="#一、两种布局使用分析" class="headerlink" title="一、两种布局使用分析"></a>一、两种布局使用分析</h1><ul><li>float布局（定宽布局）</li><li>flex布局（弹性布局）<a id="more"></a><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7108d5e4d8?w=600&amp;h=338&amp;f=jpeg&amp;s=14917" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7108d5e4d8?w=600&amp;h=338&amp;f=jpeg&amp;s=14917" alt="image"></a></li></ul><h1 id="二、原则"><a href="#二、原则" class="headerlink" title="二、原则"></a>二、原则</h1><ul><li>不到万不得已，不要写死<code>width</code> 和 <code>height</code></li><li>尽量用高级语法，如 <code>calc</code>、<code>flex</code></li><li>如果是 IE，就全部写死</li></ul><h1 id="三、布局套路口诀（上）-👉PC端布局"><a href="#三、布局套路口诀（上）-👉PC端布局" class="headerlink" title="三、布局套路口诀（上） 👉PC端布局"></a>三、布局套路口诀（上） 👉PC端布局</h1><h3 id="1、导航条布局——float布局（适用于ie5）"><a href="#1、导航条布局——float布局（适用于ie5）" class="headerlink" title="1、导航条布局——float布局（适用于ie5）"></a>1、导航条布局——float布局（适用于ie5）</h3><blockquote><p>a.儿子全加 <code>float: left （right）;</code><br>b.老子加 <code>.clearfix</code></p></blockquote><p>代码如下：<a href="http://js.jirengu.com/jufoz/1/edit?html,css,output" target="_blank" rel="noopener">Float布局</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .parent&#123;</span><br><span class="line">  border:1px solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .child&#123;</span><br><span class="line"> /* border:1px solid red; */</span><br><span class="line">&#125;</span><br><span class="line">.child:nth-child(1)&#123;</span><br><span class="line">  width:30%;</span><br><span class="line">  background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">.child:nth-child(2)&#123;</span><br><span class="line">  width:69%;</span><br><span class="line">  background-color:yellow;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix::after&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:block;</span><br><span class="line">  clear:both;    </span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">  border:1px solid black;</span><br><span class="line">  margin-right:10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;parent clearfix&quot; &gt;</span><br><span class="line">   &lt;div class=&quot;child&quot; style=&quot;float:left;&quot;&gt;儿子1&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;child&quot; style=&quot;float:left;&quot;&gt;儿子2&lt;/div&gt;    </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：该页面展示上其实是弹性布局<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7108ea38a6?w=600&amp;h=148&amp;f=jpeg&amp;s=6257" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7108ea38a6?w=600&amp;h=148&amp;f=jpeg&amp;s=6257" alt="image"></a><br>定死宽度，水平居中则在老子这边动手，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> .parent&#123;</span><br><span class="line">  border:1px solid green;</span><br><span class="line">  width:1000px</span><br><span class="line">  margin-left:auto</span><br><span class="line">  margin-right:auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child:nth-child(1)&#123;</span><br><span class="line">  width:30%;</span><br><span class="line">  background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">.child:nth-child(2)&#123;</span><br><span class="line">  width:69%;</span><br><span class="line">  background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：定宽之后，页面宽度仍有剩余<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7109051b64?w=600&amp;h=86&amp;f=jpeg&amp;s=5086" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb7109051b64?w=600&amp;h=86&amp;f=jpeg&amp;s=5086" alt="image"></a><br>优化之后的导航条，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .parent&#123;</span><br><span class="line"></span><br><span class="line">    margin-left:auto;</span><br><span class="line">    margin-right:auto;</span><br><span class="line">    background: #ddd;</span><br><span class="line">   /*定死宽度则不会影响页面 */</span><br><span class="line">    min-width:600px; </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   .child&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">   .child:nth-child(1)&#123;</span><br><span class="line">    width:100px;</span><br><span class="line">    background-color:#333;</span><br><span class="line">    color: white;</span><br><span class="line">    text-align:center;</span><br><span class="line">    line-height:36px;</span><br><span class="line">    height:36px;</span><br><span class="line"> &#125;</span><br><span class="line">   .child:nth-child(2)&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">   /* 清除浮动 */</span><br><span class="line">   .clearfix::after&#123; </span><br><span class="line">     content:&apos;&apos;;</span><br><span class="line">     display:block;</span><br><span class="line">     clear:both;    </span><br><span class="line"> &#125;</span><br><span class="line">  .clearfix&#123;</span><br><span class="line">    zoom: 1;</span><br><span class="line"> &#125;/*IE6*/</span><br><span class="line">   .content&#123;</span><br><span class="line">    border:1px solid black;</span><br><span class="line">    margin-right:10px;</span><br><span class="line">   &#125;</span><br><span class="line">   .nav&#123;</span><br><span class="line">    line-height:24px;</span><br><span class="line">    padding:6px 0;</span><br><span class="line">   &#125;</span><br><span class="line">   .navItem&#123;</span><br><span class="line">   margin-left:20px;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;    </span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;parent clearfix&quot; &gt;</span><br><span class="line">      &lt;div class=&quot;child&quot; style=&quot;float:left;&quot;&gt;logo&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;child&quot; style=&quot;float:right;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;nav clearfix&quot;&gt;</span><br><span class="line">          &lt;div style=&quot;float:left&quot; class=&quot;navItem&quot;&gt;导航1&lt;/div&gt;</span><br><span class="line">          &lt;div style=&quot;float:left&quot; class=&quot;navItem&quot;&gt;导航2&lt;/div&gt;</span><br><span class="line">          &lt;div style=&quot;float:left&quot; class=&quot;navItem&quot;&gt;导航3&lt;/div&gt;</span><br><span class="line">          &lt;div style=&quot;float:left&quot; class=&quot;navItem&quot;&gt;导航4&lt;/div&gt;</span><br><span class="line">          &lt;div style=&quot;float:left&quot; class=&quot;navItem&quot;&gt;导航5&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;    </span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2、图片位布局——flex布局"><a href="#2、图片位布局——flex布局" class="headerlink" title="2、图片位布局——flex布局"></a>2、图片位布局——flex布局</h3><blockquote><p>a.给老子加 <code>display: flex</code><br>b.给老子加<code>justify-content: space-between;</code></p></blockquote><p><strong>先看看第1种场景：</strong><br><strong>实现方式：先不用flex布局，用浮动元素+margin+clearfix清除浮动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/* 图片主要部分 */</span><br><span class="line">.banner&#123;</span><br><span class="line">  width:800px;</span><br><span class="line">  height:300px;</span><br><span class="line">  background:#888;</span><br><span class="line">  margin-left:auto;</span><br><span class="line">  margin-right:auto;</span><br><span class="line">  margin-top:10px;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pictures&#123;</span><br><span class="line">  width:800px;</span><br><span class="line">  margin:0 auto;/*不能删1：居中*/</span><br><span class="line">/* background: black;最底层的颜色 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.picture&#123;</span><br><span class="line">  width:194px;</span><br><span class="line">  height:194px;</span><br><span class="line">  background:#ddd;  </span><br><span class="line">  margin:4px;</span><br><span class="line">  float:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pictures &gt;.xxx&#123;  /*为什么不能只用两层div*/</span><br><span class="line">/*   background: rgba(255,0,0,0.8);倒数第二层颜色 */</span><br><span class="line">  margin-left:-4px;  </span><br><span class="line">  margin-right:-4px;/*不能删2：扩大范围*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* .picture:nth-child(1)&#123;</span><br><span class="line">  margin-left: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.picture:nth-child(4)&#123;</span><br><span class="line">  margin-right: 0;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div class=&quot;banner&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=&quot;pictures&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;xxx clearfix&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710919e93d?w=600&amp;h=437&amp;f=jpeg&amp;s=8943" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710919e93d?w=600&amp;h=437&amp;f=jpeg&amp;s=8943" alt="image"></a><br>这种方式可以兼容IE6，且即使减少一个板块也不会影响其它板块，<br>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710cd8d025?w=600&amp;h=284&amp;f=jpeg&amp;s=3268" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710cd8d025?w=600&amp;h=284&amp;f=jpeg&amp;s=3268" alt="image"></a></p><p><strong>再看第2种场景：</strong><br><strong>实现方式：flex布局</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.banner&#123;</span><br><span class="line">  width:800px;</span><br><span class="line">  height:300px;</span><br><span class="line">  background:#888;</span><br><span class="line">  margin-left:auto;</span><br><span class="line">  margin-right:auto;</span><br><span class="line">  margin-top:10px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pictures&#123;</span><br><span class="line">  width: 800px;                 /* 定宽不够弹性 */</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  display: flex;                 /* 弹性布局 */ </span><br><span class="line">  flex-wrap: wrap;                /* 换行*/</span><br><span class="line">  justify-content: space-between;/* 多余空间放在空间或水平居中  */ </span><br><span class="line">  /* align-items: center;   垂直居中 */</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.picture&#123;</span><br><span class="line">  width: 194px;</span><br><span class="line">  height: 194px;</span><br><span class="line">  background: #ddd;  </span><br><span class="line">  margin-top: 4px;</span><br><span class="line">  margin-bottom: 4px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=&quot;banner&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=&quot;pictures&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;   </span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>不过如果不是等份的图片板块，就会出现下方bug：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710cf5b656?w=600&amp;h=308&amp;f=jpeg&amp;s=4251" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb710cf5b656?w=600&amp;h=308&amp;f=jpeg&amp;s=4251" alt="image"></a></p><p>如何解决?代码如下：<a href="http://js.jirengu.com/livicocevo/1/edit?html,css,output" target="_blank" rel="noopener">flex布局至bug修复</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;box-sizing: border-box;&#125;</span><br><span class="line">.banner&#123;</span><br><span class="line">  width:800px;</span><br><span class="line">  height:300px;</span><br><span class="line">  background:#888;</span><br><span class="line">  margin-left:auto;</span><br><span class="line">  margin-right:auto;</span><br><span class="line">  margin-top:10px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pictures&#123;</span><br><span class="line">  width: 800px;   /* 定宽不够弹性 */</span><br><span class="line">  margin: 0 auto;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.pictures &gt; .xxx&#123;</span><br><span class="line">  display: flex;    /* 弹性布局 */ </span><br><span class="line">  flex-wrap: wrap;  /* 换行 */</span><br><span class="line">  margin: 0 -4px;</span><br><span class="line">&#125;</span><br><span class="line">.picture&#123;</span><br><span class="line">  width: 194px; </span><br><span class="line">  height: 194px;</span><br><span class="line"></span><br><span class="line">/* 或者 width: calc(25% - 8px); </span><br><span class="line">  height: 194px; */</span><br><span class="line">  background: #ddd;  </span><br><span class="line">/* 边框可去掉</span><br><span class="line">border: 1px solid red; */ </span><br><span class="line">  margin: 4px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div class=&quot;banner&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=&quot;pictures&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;xxx&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;picture&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb712af86877?w=600&amp;h=288&amp;f=jpeg&amp;s=10274" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb712af86877?w=600&amp;h=288&amp;f=jpeg&amp;s=10274" alt="image"></a></p><h3 id="3、广告位布局——浮动-margin-clearfix清除浮动"><a href="#3、广告位布局——浮动-margin-clearfix清除浮动" class="headerlink" title="3、广告位布局——浮动+margin+clearfix清除浮动"></a>3、广告位布局——浮动+margin+clearfix清除浮动</h3><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.art&#123;</span><br><span class="line">  background: #ddd;</span><br><span class="line">  width:800px;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.art &gt; .sider&#123;</span><br><span class="line">  float:left;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width:33.333333%;</span><br><span class="line">  height:300px</span><br><span class="line">&#125;</span><br><span class="line">.art &gt; .main&#123;</span><br><span class="line">  float:left;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width:66.333333%;</span><br><span class="line">  height:300px</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;art clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sider&quot;&gt;</span><br><span class="line">      &lt;div&gt;广告1&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div&gt;广告2&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653bb712e30fd22?w=600&amp;h=228&amp;f=jpeg&amp;s=5563" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653bb712e30fd22?w=600&amp;h=228&amp;f=jpeg&amp;s=5563" alt="image"></a></p><p><strong>广告位之间的间距如何处理：</strong><br><strong>方法1：</strong> 采用内嵌一个div，定宽，<code>float+margin-right</code>进行间隙（这种方法似乎要兼容啊，做了很久弄不出，不弄了）<br><strong>方法2：</strong> calc计算法+margin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.art&#123;</span><br><span class="line">  background: #ddd;</span><br><span class="line">  width:800px;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.art &gt; .sider&#123;</span><br><span class="line">  float:left;</span><br><span class="line">  width:calc( 33.333333% - 20px);/* calc计算法，此时右侧多出20px */</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  height: 300px;</span><br><span class="line">  margin-right: 20px;  /* 用多出的20px，弥补上那块间隙 */</span><br><span class="line">&#125;</span><br><span class="line">.art &gt; .main&#123;</span><br><span class="line">  float:left;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width:66.666666%;</span><br><span class="line">  height:300px</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div class=&quot;art clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sider&quot;&gt;</span><br><span class="line">      &lt;div&gt;广告1&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div&gt;广告2&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/16/16540c3b19c61ad4?w=600&amp;h=228&amp;f=jpeg&amp;s=6251" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/16/16540c3b19c61ad4?w=600&amp;h=228&amp;f=jpeg&amp;s=6251" alt="image"></a></p><p><strong>方法3：</strong> flex布局（IE不支持）</p><blockquote><p>a.父元素：<code>display:flex+justify-content:space-between</code><br>b.父元素+子元素：<code>display:flex+margin-right:auto</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.art&#123;</span><br><span class="line">  background: #ddd;</span><br><span class="line">  width:800px;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">  display: flex;  /* flex直接左右布局 */</span><br><span class="line">  justify-content: space-between;/* 第2种方法：将空隙放中间 */</span><br><span class="line">&#125;</span><br><span class="line">.art &gt; .sider&#123;</span><br><span class="line">  width:calc( 33.333333% - 20px);</span><br><span class="line">  /* calc计算法，此时右侧多出20px */</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  height: 300px;</span><br><span class="line">  /* margin-right:auto;  第1种方法 */</span><br><span class="line">&#125;</span><br><span class="line">.art &gt; .main&#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width:66.666666%;</span><br><span class="line">  height:300px</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>如图也是：<a href="https://user-gold-cdn.xitu.io/2018/8/16/16540c3b19b5fe77?w=600&amp;h=228&amp;f=jpeg&amp;s=4944" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/16/16540c3b19b5fe77?w=600&amp;h=228&amp;f=jpeg&amp;s=4944" alt="image"></a></p><h1 id="三、布局套路口诀（下）-👉移动端布局"><a href="#三、布局套路口诀（下）-👉移动端布局" class="headerlink" title="三、布局套路口诀（下） 👉移动端布局"></a>三、布局套路口诀（下） 👉移动端布局</h1><ul><li><p>添加：<code>meta:vp (tab键)</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>收起pc端导航：删除定宽+<code>{margin:0; padding:0;}</code></p></li><li><p>导航 PC和手机适配的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 导航PC和手机适配的问题 */</span><br><span class="line">.parent .nav2&#123;</span><br><span class="line">  display:none;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">  .parent .nav2&#123;</span><br><span class="line">     display:block; </span><br><span class="line">  &#125;</span><br><span class="line">  .parent .nav&#123;</span><br><span class="line">    display:none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>banner适配移动端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*banner适配移动端*/</span><br><span class="line">.banner&#123;</span><br><span class="line">  width:800px; /*万恶的定宽 PC端必备*/</span><br><span class="line">  height:300px;</span><br><span class="line">  background: #888;</span><br><span class="line">  margin-left: auto;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  margin-top: 10px;    </span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">  .banner&#123;width:auto;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片板块适配移动端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*图片板块适配移动端*/</span><br><span class="line">.pictures&#123;</span><br><span class="line">    width: 800px;    /* 万恶的定宽PC端必备;定宽布局不够弹性 */</span><br><span class="line">    margin: 0 auto;  /*不能删1：居中*/</span><br><span class="line">    overflow:hidden; /* 避免溢出 */ </span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">    .pictures&#123;width:auto;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.pictures &gt; .xxx&#123;</span><br><span class="line">    display: flex;    /* 弹性布局 */ </span><br><span class="line">    flex-wrap: wrap;  /* 换行*/</span><br><span class="line">    margin: 0 -4px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*图片板块适配移动端2*/</span><br><span class="line">.picture&#123;</span><br><span class="line">    width: calc(25% - 8px);</span><br><span class="line">    height: 194px;</span><br><span class="line">    background: #ddd; </span><br><span class="line">    margin: 4px;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line"> .picture&#123;</span><br><span class="line">    width: calc(50% - 8px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广告位适配移动端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/*广告位适配移动端*/</span><br><span class="line">.art&#123;</span><br><span class="line">  background: #ddd;</span><br><span class="line">  width:800px;    /*万恶的定宽 PC端必备*/</span><br><span class="line">  margin:0 auto;</span><br><span class="line">  display: flex;  /* flex直接左右布局 */</span><br><span class="line">  justify-content: space-between;/* 第2种方法：将空隙放中间 */</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">  .art&#123;</span><br><span class="line">    width: auto;</span><br><span class="line">    flex-direction:column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.art &gt; .sider&#123; </span><br><span class="line">  width:calc( 33.333333% - 20px);  /* calc计算法，此时右侧多出20px */</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  height: 300px;</span><br><span class="line">  /* margin-right:auto;  第1种方法 */</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">  .art &gt; .sider&#123; </span><br><span class="line">  width:  auto;</span><br><span class="line">  height: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.art &gt; .main&#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  width:66.666666%;</span><br><span class="line">  height:300px</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:420px)&#123;</span><br><span class="line">  .art &gt; .main&#123; </span><br><span class="line">  width:  auto;</span><br><span class="line">  height: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于图片添加：（注：变形问题减少使用img）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background:transparent url(https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=292576901,2272109431&amp;fm=27&amp;gp=0.jpg) no-repeat center;</span><br><span class="line"> background-size: cover; /*尽量全地显示图片*/</span><br></pre></td></tr></table></figure></li></ul><p><strong>注：</strong></p><blockquote><p>代码总链接：<a href="http://js.jirengu.com/jufoz/4/edit?html,css" target="_blank" rel="noopener">布局套路</a><br>固定比例div：图片1：1显示或者2：1显示<br>CSS渐变方法：解决背景样式渐变问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、两种布局使用分析&quot;&gt;&lt;a href=&quot;#一、两种布局使用分析&quot; class=&quot;headerlink&quot; title=&quot;一、两种布局使用分析&quot;&gt;&lt;/a&gt;一、两种布局使用分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;float布局（定宽布局）&lt;/li&gt;
&lt;li&gt;flex布局（弹性布局）
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（七）：布局基础</title>
    <link href="http://yoursite.com/2018/11/12/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%B8%83%E5%B1%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/11/12/CSS学习笔记（七）：布局基础/</id>
    <published>2018-11-12T11:31:16.000Z</published>
    <updated>2018-11-26T11:47:33.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是布局"><a href="#一、什么是布局" class="headerlink" title="一、什么是布局"></a>一、什么是布局</h1><h3 id="1、现有的布局满足不了人们的需求"><a href="#1、现有的布局满足不了人们的需求" class="headerlink" title="1、现有的布局满足不了人们的需求"></a>1、现有的布局满足不了人们的需求</h3><p>文档流、浮动、定位<br><a id="more"></a></p><h3 id="2、用户中所需要的："><a href="#2、用户中所需要的：" class="headerlink" title="2、用户中所需要的："></a>2、用户中所需要的：</h3><ul><li>导航栏+内容</li><li>导航栏+内容+广告栏</li><li>从上到下、从左到右、定宽、自适应…</li></ul><h1 id="二、几种布局介绍"><a href="#二、几种布局介绍" class="headerlink" title="二、几种布局介绍"></a>二、几种布局介绍</h1><h3 id="1、单列布局"><a href="#1、单列布局" class="headerlink" title="1、单列布局"></a>1、单列布局</h3><blockquote><ul><li>一栏布局</li><li>一栏布局（通栏）</li></ul></blockquote><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0ce04d1?w=600&amp;h=276&amp;f=jpeg&amp;s=7997" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0ce04d1?w=600&amp;h=276&amp;f=jpeg&amp;s=7997" alt="image"></a><br>实现方式： 定宽 + 水平居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">width: 1000px;  /*或 max-width: 1000px;*/</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br></pre></td></tr></table></figure><p>范例：<a href="http://js.jirengu.com/ludo/edit?html,output" target="_blank" rel="noopener">单列布局——一栏布局</a><br>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .layout&#123;</span><br><span class="line">  /* width: 960px; */</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  //给 body 设置min-width 去掉滚动背景色 bug  </span><br><span class="line">  body&#123;</span><br><span class="line">    min-width: 960px;</span><br><span class="line">  &#125;</span><br><span class="line">  #header&#123;</span><br><span class="line">    height: 60px;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line">  #content&#123;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  #footer&#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">/* 如图1：此时的定宽是width:560px */</span><br><span class="line">&lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;header&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;content&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;footer&quot;&gt;尾部&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">/* 或通栏的单列布局,此时```.layout&#123;border:1px solid&#125;``` */</span><br><span class="line">   &lt;div id=&quot;header&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;layout&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div id=&quot;context&quot; class=&quot;layout&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">   &lt;div id=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;layout&quot;&gt;尾部&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//或省标签，便于控制局部 如图2：</span><br><span class="line">&lt;div id=&quot;header&quot;  class=&quot;layout&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;content&quot; class=&quot;layout&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;footer&quot; class=&quot;layout&quot;&gt;尾部&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cc96ef5b?w=600&amp;h=389&amp;f=jpeg&amp;s=9586" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cc96ef5b?w=600&amp;h=389&amp;f=jpeg&amp;s=9586" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cca38222?w=600&amp;h=321&amp;f=jpeg&amp;s=10088" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cca38222?w=600&amp;h=321&amp;f=jpeg&amp;s=10088" alt="image"></a></p><h3 id="2、双列布局"><a href="#2、双列布局" class="headerlink" title="2、双列布局"></a>2、双列布局</h3><p>一列固定宽度，另一列自适应宽度<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cca1271a?w=600&amp;h=317&amp;f=jpeg&amp;s=5453" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54cca1271a?w=600&amp;h=317&amp;f=jpeg&amp;s=5453" alt="image"></a><br><strong>实现方式：浮动元素 + 普通元素margin+老子清除浮动</strong><br><strong>注：</strong> 布局时，考虑到渲染顺序，浮动元素代码优先写在其他元素前面，优先渲染<br><strong>第1种场景：两列布局</strong><br>范例：<a href="http://js.jirengu.com/loxe/edit?html,output" target="_blank" rel="noopener">双列布局</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #content:after&#123;     //第3步：添加一个伪元素清除浮动</span><br><span class="line">      content: &apos;&apos;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">    .aside&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background: yellow;</span><br><span class="line">      float: left;         //第1步：浮动元素</span><br><span class="line">    &#125;</span><br><span class="line">    .main&#123;</span><br><span class="line">      margin-left: 210px;  //第2步：margin-left（right）</span><br><span class="line">      height: 400px;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #footer&#123;</span><br><span class="line">      background: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;  </span><br><span class="line">      &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;main&quot;&gt;content&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0eec8fb?w=600&amp;h=344&amp;f=jpeg&amp;s=8401" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0eec8fb?w=600&amp;h=344&amp;f=jpeg&amp;s=8401" alt="image"></a></p><p><strong>第2种场景：两列布局侧边栏aside在右侧：</strong><br>范例：<a href="http://js.jirengu.com/qaca/edit?html,output" target="_blank" rel="noopener">双栏布局——侧边栏（aside）在右侧</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #content:after&#123;    //第3步：清除浮动</span><br><span class="line">      content: &apos;&apos;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">    .aside&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background: yellow;</span><br><span class="line">      float: right;  //第1步：浮动</span><br><span class="line">    &#125;</span><br><span class="line">    .main&#123;</span><br><span class="line">      margin-right: 210px;  //第2步：margin</span><br><span class="line">      height: 400px;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #footer&#123;</span><br><span class="line">      background: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;content&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0fa50b9?w=600&amp;h=346&amp;f=jpeg&amp;s=9514" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54d0fa50b9?w=600&amp;h=346&amp;f=jpeg&amp;s=9514" alt="image"></a></p><h3 id="3、三列布局"><a href="#3、三列布局" class="headerlink" title="3、三列布局"></a>3、三列布局</h3><p>两侧两列固定宽度，中间列自适应宽度<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54ec9299db?w=600&amp;h=371&amp;f=jpeg&amp;s=4114" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54ec9299db?w=600&amp;h=371&amp;f=jpeg&amp;s=4114" alt="image"></a><br><strong>实现方式：浮动元素+margin+伪类元素清除浮动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#content:after&#123;   ////第3步：伪类元素</span><br><span class="line">      content: &apos;&apos;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu&#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background: pink;</span><br><span class="line">      float: left;   //第1步：浮动</span><br><span class="line">    &#125;</span><br><span class="line">    .aside&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 500px;</span><br><span class="line">      background: yellow;</span><br><span class="line">      float: right;  //第1步：浮动</span><br><span class="line">    &#125;</span><br><span class="line">    .main&#123;</span><br><span class="line">      margin-left: 110px; /*为什么要加margin-left*/  //第2步：margin</span><br><span class="line">      margin-right: 210px;                         //第2步：margin</span><br><span class="line">      height: 400px;</span><br><span class="line">      background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #footer&#123;</span><br><span class="line">      background: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">    &lt;!-- 为什么不是main在前面： 渲染顺序--&gt;</span><br><span class="line">    &lt;div class=&quot;menu&quot;&gt;menu左&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;aside&quot;&gt;aside右&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;content中&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54f39e2831?w=600&amp;h=384&amp;f=jpeg&amp;s=7884" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54f39e2831?w=600&amp;h=384&amp;f=jpeg&amp;s=7884" alt="image"></a></p><h3 id="4、水平等距布局"><a href="#4、水平等距布局" class="headerlink" title="4、水平等距布局"></a>4、水平等距布局</h3><p><strong>实现方式：处理老子（居中、防溢出）+浮动+ margin</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">ul,li&#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  list-style: none; //取消列表的实心小黑点</span><br><span class="line">&#125;</span><br><span class="line">.ct&#123;</span><br><span class="line">    overflow:hidden; //溢出隐藏</span><br><span class="line">    width: 640px;</span><br><span class="line">    border:dashed 1px orange;</span><br><span class="line">    margin: 0 auto;  //相对于页面的居中</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ct .item&#123;</span><br><span class="line">    float:left;  //第1步：浮动</span><br><span class="line">    margin-left: 20px; //第0步：提前设置</span><br><span class="line">    margin-top: 20px;  //第0步：提前设置</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.ct&gt;ul&#123;</span><br><span class="line">  margin-left: -20px;  //第2步：补充不够的20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;ct&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;1&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;2&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;4&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;5&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;6&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;7&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;8&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54f2d22c4a?w=600&amp;h=395&amp;f=jpeg&amp;s=11854" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba54f2d22c4a?w=600&amp;h=395&amp;f=jpeg&amp;s=11854" alt="image"></a></p><hr><h1 id="三、其他布局"><a href="#三、其他布局" class="headerlink" title="三、其他布局"></a>三、其他布局</h1><ul><li>圣杯布局</li><li>双飞翼布局</li><li>流式布局</li><li>Grid布局</li><li>Flex布局</li><li>移动端布局（meta、媒体查询、动态rem）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、什么是布局&quot;&gt;&lt;a href=&quot;#一、什么是布局&quot; class=&quot;headerlink&quot; title=&quot;一、什么是布局&quot;&gt;&lt;/a&gt;一、什么是布局&lt;/h1&gt;&lt;h3 id=&quot;1、现有的布局满足不了人们的需求&quot;&gt;&lt;a href=&quot;#1、现有的布局满足不了人们的需求&quot; class=&quot;headerlink&quot; title=&quot;1、现有的布局满足不了人们的需求&quot;&gt;&lt;/a&gt;1、现有的布局满足不了人们的需求&lt;/h3&gt;&lt;p&gt;文档流、浮动、定位&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（六）：元素居中</title>
    <link href="http://yoursite.com/2018/11/11/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/11/11/CSS学习笔记（六）：元素居中/</id>
    <published>2018-11-11T09:22:46.000Z</published>
    <updated>2018-11-29T14:12:34.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、元素水平居中"><a href="#一、元素水平居中" class="headerlink" title="一、元素水平居中"></a>一、元素水平居中</h1><h3 id="1、text-align实现水平居中"><a href="#1、text-align实现水平居中" class="headerlink" title="1、text-align实现水平居中"></a>1、<code>text-align</code>实现水平居中</h3><p><code>text-align:center;</code> 行内元素（图片或文字）居中<br>在父元素上设置<code>text-align: center</code> 使文字/图片在整个页面上水平居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> .container&#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>如一小选项按钮居中，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> .container&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、margin实现水平居中"><a href="#2、margin实现水平居中" class="headerlink" title="2、margin实现水平居中"></a>2、<code>margin</code>实现水平居中</h3><p><code>margin: 0 auto;</code> 用于块级元素的居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">   width: 80%;  /*块级元素充满页面 定宽必备 */</span><br><span class="line">   margin-left: auto;</span><br><span class="line">   margin-right: auto;</span><br><span class="line">  /*或者 margin：0 auto;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如：<a href="http://js.jirengu.com/zakaw" target="_blank" rel="noopener">块级元素居中</a><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">     .wrap&#123;</span><br><span class="line">       max-width:600px;</span><br><span class="line">       background: #ccc;</span><br><span class="line">       margin: 0 auto;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;world&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef1ca6b5a?w=600&amp;h=107&amp;f=jpeg&amp;s=2965" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef1ca6b5a?w=600&amp;h=107&amp;f=jpeg&amp;s=2965" alt="image"></a></p><h1 id="二、元素垂直居中"><a href="#二、元素垂直居中" class="headerlink" title="二、元素垂直居中"></a>二、元素垂直居中</h1><h3 id="1、居中-VS-不居中"><a href="#1、居中-VS-不居中" class="headerlink" title="1、居中 VS 不居中"></a>1、居中 VS 不居中</h3><p><strong>注：</strong> 高度由里面的内容撑开，一般不设置高度<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">.ct&#123;</span><br><span class="line">  padding: 40px 0;</span><br><span class="line">  text-align: center; </span><br><span class="line">  background: #eee;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;ct&quot;&gt;</span><br><span class="line">    &lt;p&gt;你好世界&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;helloworld&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef219f01e?w=600&amp;h=139&amp;f=jpeg&amp;s=2860" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef219f01e?w=600&amp;h=139&amp;f=jpeg&amp;s=2860" alt="image"></a></p><h3 id="2、vertical-align实现垂直居中"><a href="#2、vertical-align实现垂直居中" class="headerlink" title="2、vertical-align实现垂直居中"></a>2、<code>vertical-align</code>实现垂直居中</h3><p><code>vertical-align: middle;</code> 让行内元素或表格元素相对于基线对齐并居中<br>案例：如图片进行水平、垂直居中<br>代码如下：<a href="http://js.jirengu.com/nirak/1/edit?html,css" target="_blank" rel="noopener">图片在容器内水平、垂直居中</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid ;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">/*注：子元素和父元素分别设置 vertical-align:middle;  ，均无法实现垂直居中*/</span><br><span class="line"></span><br><span class="line">/*使用一个伪元素，设置一个虚拟的基准线*/</span><br><span class="line">.box:before&#123;</span><br><span class="line">  content: &apos;&apos;;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 100%;</span><br><span class="line">  vertical-align: middle;     ✔️</span><br><span class="line">&#125;</span><br><span class="line">.box img&#123;</span><br><span class="line">  vertical-align: middle;     ✔️</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://cdn.jirengu.com/public/logo-tiny.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef20c8b15?w=600&amp;h=416&amp;f=jpeg&amp;s=12538" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef20c8b15?w=600&amp;h=416&amp;f=jpeg&amp;s=12538" alt="image"></a></p><h3 id="3、table-cell-实现垂直居中"><a href="#3、table-cell-实现垂直居中" class="headerlink" title="3、table-cell 实现垂直居中"></a>3、table-cell 实现垂直居中</h3><p><code>display: table-cell;</code>水平垂直居中<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width: 300px;  /*由于是行内元素，宽度必备*/</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid ;</span><br><span class="line">  display: table-cell;     ✔️</span><br><span class="line">  vertical-align: middle;  ✔️ </span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://cdn.jirengu.com/public/logo-tiny.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="4、绝对定位实现居中"><a href="#4、绝对定位实现居中" class="headerlink" title="4、绝对定位实现居中"></a>4、绝对定位实现居中</h3><p>案例：如弹出框 <a href="http://js.jirengu.com/zofeq/1/edit?html,css" target="_blank" rel="noopener">弹出框水平垂直居中</a><br><strong>情况1：</strong> 固定宽高块在浏览器窗口水平垂直居中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">html,body &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.dialog &#123;</span><br><span class="line">  position: absolute;  /*绝对定位*/</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin-left: -200px;</span><br><span class="line">  margin-top: -150px;</span><br><span class="line"></span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  box-shadow: 0px 0px 3px #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dialog .header&#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  background: #000;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.dialog .content&#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;我是标题&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef2280c98?w=600&amp;h=343&amp;f=jpeg&amp;s=4481" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef2280c98?w=600&amp;h=343&amp;f=jpeg&amp;s=4481" alt="image"></a></p><p><strong>情况2：</strong> 去掉宽高的块在浏览器窗口水平垂直居中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">html,body &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dialog &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line"> /*  margin-left: -200px;</span><br><span class="line">  margin-top: -150px; */</span><br><span class="line"></span><br><span class="line">  /*CSS3属性  相对于自己的偏移*/</span><br><span class="line">  transform:translate(-50%,-50%);</span><br><span class="line">  box-shadow: 0px 0px 3px #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dialog .header&#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  background: #000;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.dialog .content&#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;我是标题&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;我是内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef1defbdc?w=600&amp;h=344&amp;f=jpeg&amp;s=4959" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653ba0ef1defbdc?w=600&amp;h=344&amp;f=jpeg&amp;s=4959" alt="image"></a></p><h3 id="5、table自带功能实现垂直居中"><a href="#5、table自带功能实现垂直居中" class="headerlink" title="5、table自带功能实现垂直居中"></a>5、table自带功能实现垂直居中</h3><p>参考demo：<a href="http://js.jirengu.com/gaquk/2/edit?html,css" target="_blank" rel="noopener">table自带功能实现垂直居中</a></p><h3 id="6、100-高度的-afrer-before-加上-inline-block实现垂直居中"><a href="#6、100-高度的-afrer-before-加上-inline-block实现垂直居中" class="headerlink" title="6、100% 高度的 afrer before 加上 inline block实现垂直居中"></a>6、100% 高度的 afrer before 加上 inline block实现垂直居中</h3><p>参考demo：<a href="http://js.jirengu.com/poveg/3/edit?html,css" target="_blank" rel="noopener">100% 高度的 afrer before 加上 inline block实现垂直居中</a></p><h3 id="7、margin-top-50-实现垂直居中"><a href="#7、margin-top-50-实现垂直居中" class="headerlink" title="7、margin-top: -50%实现垂直居中"></a>7、margin-top: -50%实现垂直居中</h3><p>参考demo：<a href="http://js.jirengu.com/sugex/1/edit?html,css" target="_blank" rel="noopener">margin-top: -50%实现垂直居中</a></p><h3 id="8、flex布局实现垂直居中"><a href="#8、flex布局实现垂直居中" class="headerlink" title="8、flex布局实现垂直居中"></a>8、flex布局实现垂直居中</h3><p>参考demo：<a href="http://js.jirengu.com/sugex/7/edit?html,css" target="_blank" rel="noopener">flex布局实现垂直居中</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、元素水平居中&quot;&gt;&lt;a href=&quot;#一、元素水平居中&quot; class=&quot;headerlink&quot; title=&quot;一、元素水平居中&quot;&gt;&lt;/a&gt;一、元素水平居中&lt;/h1&gt;&lt;h3 id=&quot;1、text-align实现水平居中&quot;&gt;&lt;a href=&quot;#1、text-align实现水平居中&quot; class=&quot;headerlink&quot; title=&quot;1、text-align实现水平居中&quot;&gt;&lt;/a&gt;1、&lt;code&gt;text-align&lt;/code&gt;实现水平居中&lt;/h3&gt;&lt;p&gt;&lt;code&gt;text-align:center;&lt;/code&gt; 行内元素（图片或文字）居中&lt;br&gt;在父元素上设置&lt;code&gt;text-align: center&lt;/code&gt; 使文字/图片在整个页面上水平居中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; .container&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text-align:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（五）：BFC和边距合并</title>
    <link href="http://yoursite.com/2018/11/10/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9ABFC%E5%92%8C%E8%BE%B9%E8%B7%9D%E5%90%88%E5%B9%B6/"/>
    <id>http://yoursite.com/2018/11/10/CSS学习笔记（五）：BFC和边距合并/</id>
    <published>2018-11-10T06:52:20.000Z</published>
    <updated>2018-11-26T11:46:58.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、BFC"><a href="#一、BFC" class="headerlink" title="一、BFC"></a>一、BFC</h1><h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p>先给一个官方的定义：（说的什么东西反正我没看懂）</p><blockquote><p>Formatting context(格式化上下文)是W3CCSS2.1规范中的一个概念。每个渲染区域用formattingContext表示，它是页面中的一块渲染区域，并且有一套渲染规则。它决定了其子元素将如何定位，以及和其他元素的关系和相互作用<br><a id="more"></a></p></blockquote><p>再看下面这个定义：（有一点点懂）</p><blockquote><p>BFC（Block FormattingContext），块级格式化上下文。相当于制定一种如BFC这样的规则，在普通流中按照该规则进行布局。</p></blockquote><p>在正常流中的盒子要么属于块级格式化上下文（BFC），要么属于内联格式化上下文，即块级元素在页面渲染的时候遵循怎么样的规则，它们之间有怎么样的作用。</p><p>再看这个：（还是一点点懂）</p><blockquote><p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。通俗一点来讲，可以把 BFC理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p></blockquote><p><strong>总结：BFC没有定义，只有功能或特性</strong></p><h3 id="2、BFC会在哪里产生（官方的）"><a href="#2、BFC会在哪里产生（官方的）" class="headerlink" title="2、BFC会在哪里产生（官方的）"></a>2、BFC会在哪里产生（官方的）</h3><p>只要元素满足下面任一条件即可触发 BFC 特性<br>（1）body根元素<br>html里的根元素产生相应的“块级格式化上下文”这类的规则，如某些规则：块级容器可以充满父容器，父容器可以被子元素撑开，外边距产生合并，渲染顺序是从上到下（同一个块级格式化上下文中相邻块级盒之间的竖直margin会合并）<br>（2）浮动元素：float除了<code>none</code>以外的值；<br>如<code>float:left;</code>该元素属性本身也产生了相应的块级格式化上下文。该元素产生的BFC与所在的根元素的BFC互不影响，此元素的作用域，则为该元素服务，与根元素产生一个隐形的边界<br>（3）绝对定位元素：<code>position</code>为<code>absolute</code>或<code>fixed</code>；<br>（4）<code>display</code>为<code>inline-block</code>（非块盒的块容器）, <code>flex</code>, 或<code>inline-flex</code>；<br>（5）<code>overflow</code>除了<code>visible</code>以外的值（<code>hidden</code>、<code>auto</code>、<code>scroll</code>）</p><h3 id="3、应用"><a href="#3、应用" class="headerlink" title="3、应用"></a>3、应用</h3><p>这里的例子截取自该文章：<a href="https://zhuanlan.zhihu.com/p/25321647" target="_blank" rel="noopener">10 分钟理解 BFC 原理</a><br>（1）<strong>功能1</strong><br>让两个相邻的元素界限分明（同一个 BFC 下外边距会发生重叠或合并）<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f4a6730?w=600&amp;h=302&amp;f=gif&amp;s=114336" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f4a6730?w=600&amp;h=302&amp;f=gif&amp;s=114336" alt="img"></a><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;&lt;/div&gt;    </span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div的下边距和第二个div的上边距发生了重叠，所以两个盒子之间距离只有100px，而不是 200px。<br>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78ad30623?w=600&amp;h=323&amp;f=jpeg&amp;s=2393" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78ad30623?w=600&amp;h=323&amp;f=jpeg&amp;s=2393" alt="image"></a><br>首先这不是 CSS 的bug，我们可以理解为一种规范。如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    overflow: hidden;   ✔️</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这时候，两个盒子边距就变成了 200px ，<br>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78aef2162?w=600&amp;h=474&amp;f=jpeg&amp;s=2838" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78aef2162?w=600&amp;h=474&amp;f=jpeg&amp;s=2838" alt="image"></a></p><p>（2）<strong>功能2</strong><br>子元素被父元素包裹起来（BFC可以包含浮动的元素）（可代替<code>clearfix</code>来清除浮动）</p><ul><li><p><code>display:flow-root;</code> 让当前元素触发BFC（正交，考虑浏览器兼容）</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden;</span><br></pre></td></tr></table></figure></li></ul><p>  将溢出隐藏浮动的元素会脱离普通文档流，</p><p>  来看下下面一个例子，代码如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .father&#123;</span><br><span class="line">    border: 1px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">   .son&#123;</span><br><span class="line">     width: 100px;</span><br><span class="line">     height: 100px;</span><br><span class="line">     background: #eee;</span><br><span class="line">     float: left;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/style&gt; </span><br><span class="line"></span><br><span class="line">     &lt;div class=father&gt;</span><br><span class="line">        &lt;div class=son&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78b0a1d29?w=492&amp;h=244&amp;f=jpeg&amp;s=1537" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78b0a1d29?w=492&amp;h=244&amp;f=jpeg&amp;s=1537" alt="image"></a></p><p>由于父元素（father）内子元素（son）进行浮动，脱离了“父亲”的文档流，所以容器只剩下 2px 的边距高度。此时可以触发容器的 BFC，那么“father”就可以包裹住“son”出去的浮动元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .father&#123;</span><br><span class="line">    border: 1px solid #000;</span><br><span class="line">    overflow:hidden;         ✔️</span><br><span class="line">    &#125;</span><br><span class="line">   .son&#123;</span><br><span class="line">     width: 100px;</span><br><span class="line">     height: 100px;</span><br><span class="line">     background: #eee;</span><br><span class="line">     float: left;         ✔️</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/style&gt; </span><br><span class="line"></span><br><span class="line">  &lt;div class=father&gt;</span><br><span class="line">     &lt;div class=son&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f21f49e?w=600&amp;h=213&amp;f=jpeg&amp;s=2464" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f21f49e?w=600&amp;h=213&amp;f=jpeg&amp;s=2464" alt="image"></a></p><p>（3）<strong>功能3</strong><br>BFC 可以阻止元素被浮动元素覆盖。先来看一个文字环绕效果，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box1&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  float: left;    </span><br><span class="line">  background: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: #eee;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=box1&gt;我是一个左浮动的元素&lt;/div&gt;</span><br><span class="line">&lt;div class=box2&gt;我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f430c20?w=432&amp;h=440&amp;f=jpeg&amp;s=25067" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a78f430c20?w=432&amp;h=440&amp;f=jpeg&amp;s=25067" alt="image"></a></p><p>此时，浮动元素浮在第二个元素上，第二个元素有部分区域被浮动元素所覆盖(但文本信息不会被浮动元素所覆盖) 。如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入<code>overflow:hidden；</code>或者<code>display:flow-root;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box1&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  float: left;                          ✔️</span><br><span class="line">  background: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: #eee;</span><br><span class="line">  overflow:hidden;               ✔️</span><br><span class="line"> /*或  display: flow-root; */  ✔️</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=box1&gt;</span><br><span class="line">我是一个左浮动的元素</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=box2&gt;</span><br><span class="line">我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>就会变成：<a href="http://js.jirengu.com/viguj/2/edit" target="_blank" rel="noopener">BFC 浮动处理</a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7afbe2bc4?w=600&amp;h=418&amp;f=jpeg&amp;s=20803" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7afbe2bc4?w=600&amp;h=418&amp;f=jpeg&amp;s=20803" alt="image"></a><br>用来实现两列自适应布局：即左边宽度固定，如果想右边的内容自适应宽度，可以去掉上面右边内容的宽度（如果右边定宽，窄页面时，则会自动换到下一行排列）</p><h1 id="二、边距合并"><a href="#二、边距合并" class="headerlink" title="二、边距合并"></a>二、边距合并</h1><h3 id="1、讲例子"><a href="#1、讲例子" class="headerlink" title="1、讲例子"></a>1、讲例子</h3><p><strong>案例1：</strong><br>当实际中希望<code>#header</code>和<code>h1</code>之间产生一点缝隙（或间距），即使将h1设置 <code>margin:50px;</code>，作为块级元素的<code>h1</code>，<code>margin</code>左右生效，而上下则是<code>#header+h1</code>整体向下移动50px<br><strong>这便是，外边距合并</strong><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7afdae03b?w=600&amp;h=163&amp;f=jpeg&amp;s=14191" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7afdae03b?w=600&amp;h=163&amp;f=jpeg&amp;s=14191" alt="image"></a></p><p><strong>案例2：</strong><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b9113e67?w=600&amp;h=208&amp;f=jpeg&amp;s=16846" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b9113e67?w=600&amp;h=208&amp;f=jpeg&amp;s=16846" alt="image"></a><br>看案例似乎是<code>&lt;h1&gt;</code>和<code>&lt;p&gt;</code>标签所设置的外边距各30px，两者之间的间距理论来讲应该是60px，但事实上这是两个相邻元素的外边距产生合并，下边距<code>&lt;margiin-bottom&gt;</code>和上边距<code>&lt;margin-top&gt;</code>合并之后取较大值，这里为30px<br><strong>这也是，外边距合并</strong></p><h3 id="2、合并场景"><a href="#2、合并场景" class="headerlink" title="2、合并场景"></a>2、合并场景</h3><p>（1）相邻元素合并<br>同案例2<br>（2）父子合并<br><code>h1</code>和<code>header</code>，或者再嵌套元素或者与其的祖先元素嵌套，均能产生外边距合并，这些都能称之为<strong>“父子合并”</strong> ,如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b50f285a?w=600&amp;h=163&amp;f=jpeg&amp;s=10844" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b50f285a?w=600&amp;h=163&amp;f=jpeg&amp;s=10844" alt="image"></a><br>（3）自己合并<br>如图，块级元素合并，无默认样式即靠在一起；含有p标签（含内容）的块级元素，则有默认上下<code>margin</code>，所以<code>detail</code>和<code>footer</code>则会产生缝隙（或间距）<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b20ddb00?w=600&amp;h=261&amp;f=jpeg&amp;s=27939" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b20ddb00?w=600&amp;h=261&amp;f=jpeg&amp;s=27939" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b98f6e19?w=600&amp;h=235&amp;f=jpeg&amp;s=24624" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7b98f6e19?w=600&amp;h=235&amp;f=jpeg&amp;s=24624" alt="image"></a></p><p><code>.footer</code>元素为空内容，设置 <code>margin:30px;</code> ，即说明上边距和下边距合并后的外边距总值是60px，不过<code>.footer</code>元素为空内容，所以页面效果仍然呈现30px，说明css元素中外边距合并的另一种情况：</p><p><strong>自己和自己合并：</strong> 如图：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7d8b276d5?w=600&amp;h=266&amp;f=jpeg&amp;s=26586" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7d8b276d5?w=600&amp;h=266&amp;f=jpeg&amp;s=26586" alt="image"></a></p><h1 id="三、取消合并（如何去解决外边距合并？）"><a href="#三、取消合并（如何去解决外边距合并？）" class="headerlink" title="三、取消合并（如何去解决外边距合并？）"></a>三、取消合并（如何去解决外边距合并？）</h1><h3 id="1、边框、padding"><a href="#1、边框、padding" class="headerlink" title="1、边框、padding"></a>1、边框、padding</h3><blockquote><p>存在于父子合并</p></blockquote><p>为何<code>#header</code>和<code>h1</code>能够产生合并？即<code>#header</code>没有<code>border</code>和<code>padding</code>（即一个可与外界隔离的边界线），导致<code>h1</code>自带的一个<code>margin</code>，冲出该边界，与<code>#header</code>合并</p><p>尝试在<code>#header</code>里添加边框（图1）或者加<code>padding</code>（内边距）（图2），让<code>#header</code>和<code>h1</code>的<code>margin-top</code>，内外分开，即能做到不让外边距合并，如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7de422ee6?w=600&amp;h=218&amp;f=jpeg&amp;s=23300" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7de422ee6?w=600&amp;h=218&amp;f=jpeg&amp;s=23300" alt="图1"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7e0525aa5?w=600&amp;h=230&amp;f=jpeg&amp;s=23440" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7e0525aa5?w=600&amp;h=230&amp;f=jpeg&amp;s=23440" alt="图2"></a></p><h3 id="2、BFC"><a href="#2、BFC" class="headerlink" title="2、BFC"></a>2、BFC</h3><p>如何让一个元素生成bfc？bfc可认为是拥有一片独立的空间，和其他的空间（或其他的文档流）区别开。注：添加bfc元素属性，可以取消合并有可能产生副作用<br>（1）父子元素不产生合并<br>A、添加：<code>overflow:hidden；</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7e39f4d89?w=600&amp;h=252&amp;f=jpeg&amp;s=24931" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7e39f4d89?w=600&amp;h=252&amp;f=jpeg&amp;s=24931" alt="image"></a><br>B、添加 ：<code>float:left;</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7eaa6bcf4?w=600&amp;h=356&amp;f=jpeg&amp;s=42673" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7eaa6bcf4?w=600&amp;h=356&amp;f=jpeg&amp;s=42673" alt="image"></a><br>C、添加： <code>display:inline-block;</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7eab9beef?w=600&amp;h=381&amp;f=jpeg&amp;s=45614" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a7eab9beef?w=600&amp;h=381&amp;f=jpeg&amp;s=45614" alt="image"></a><br>D、添加： <code>position:absolute;</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a80621b1ae?w=600&amp;h=216&amp;f=jpeg&amp;s=23166" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a80621b1ae?w=600&amp;h=216&amp;f=jpeg&amp;s=23166" alt="image"></a></p><p>（2）相邻元素不产生合并<br>A、添加：浮动元素<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a80bd51451?w=600&amp;h=549&amp;f=jpeg&amp;s=49602" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a80bd51451?w=600&amp;h=549&amp;f=jpeg&amp;s=49602" alt="image"></a><br>B、添加：<code>overflow:hidden；</code><br>生成BFC，相当于生成了一个边界，即边框作为一个边界，有了边界之后，<code>#header+h1</code>父子元素便不能冲破该边界，自然与<code>#detail</code>元素的不产生合并.<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a816c54c47?w=600&amp;h=285&amp;f=jpeg&amp;s=27177" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b7a816c54c47?w=600&amp;h=285&amp;f=jpeg&amp;s=27177" alt="image"></a></p><p><strong>【重点】：</strong> 而相邻元素之间的<code>margin</code>，可以认为不是该父子元素边界内，同样会产生合并。通常处理相邻元素之间的间距合并问题（除浮动外，浮动时不会被合并），即不考虑合并问题，直接设置为：<code>margin-top:___px;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、BFC&quot;&gt;&lt;a href=&quot;#一、BFC&quot; class=&quot;headerlink&quot; title=&quot;一、BFC&quot;&gt;&lt;/a&gt;一、BFC&lt;/h1&gt;&lt;h3 id=&quot;1、定义：&quot;&gt;&lt;a href=&quot;#1、定义：&quot; class=&quot;headerlink&quot; title=&quot;1、定义：&quot;&gt;&lt;/a&gt;1、定义：&lt;/h3&gt;&lt;p&gt;先给一个官方的定义：（说的什么东西反正我没看懂）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Formatting context(格式化上下文)是W3CCSS2.1规范中的一个概念。每个渲染区域用formattingContext表示，它是页面中的一块渲染区域，并且有一套渲染规则。它决定了其子元素将如何定位，以及和其他元素的关系和相互作用&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（四）：浮动和定位</title>
    <link href="http://yoursite.com/2018/11/09/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%B5%AE%E5%8A%A8%E5%92%8C%E5%AE%9A%E4%BD%8D/"/>
    <id>http://yoursite.com/2018/11/09/CSS学习笔记（四）：浮动和定位/</id>
    <published>2018-11-09T07:32:12.000Z</published>
    <updated>2018-11-26T11:46:45.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自我总结："><a href="#自我总结：" class="headerlink" title="自我总结："></a>自我总结：</h3><blockquote><p>浮动是实现布局的一种常见方式</p></blockquote><a id="more"></a><blockquote><p>浮动脱离普通文档流，即页面渲染时，盒模型按标准会将父元素所设置的属性将页面撑开；加入浮动后，父元素不会发现浮动元素，父元素则不会被浮动元素撑开页面）。 块级元素默认样式可以撑满父容器，加入浮动后，块级元素浮动则会收缩到内容本身的宽度。 加入浮动后，在父元素中看不见浮动元素，在行内元素看得见浮动，如文本或其他行内元素都会环绕浮动元素。</p></blockquote><blockquote><p>加入浮动后，浮动盒会向左或向右移动，直到其外边挨到包含块边沿或者另一个浮动盒的外边。 当同一个方向的浮动元素：当一个浮动元素在浮动过程中碰到同一个方向的浮动元素时，它会紧跟在它们后面； 当反方向的浮动元素：互不影响，位于同一条水平线上，当空间不够时会被挤下。 当浮动盒的宽度不一样时，紧跟后面的另一浮动盒则会出现卡住的现象。</p></blockquote><blockquote><p>加入浮动后，块级元素内容宽度会缩短，呈现<code>inline-block</code>的特性，放不下会换行；行内元素则以块级元素特性呈现，可以设置<code>width</code>、<code>height</code>、<code>margin</code>。</p></blockquote><hr><h1 id="一、浮动："><a href="#一、浮动：" class="headerlink" title="一、浮动："></a>一、浮动：</h1><h3 id="1、从实践尝试到理论定义"><a href="#1、从实践尝试到理论定义" class="headerlink" title="1、从实践尝试到理论定义"></a>1、从实践尝试到理论定义</h3><p>（1）例子1：<a href="http://js.jirengu.com/vipe/1/edit?html,output" target="_blank" rel="noopener">放不下会换行</a><br>一个浮动盒会向左或向右移动，直到其外边（outerEdge）挨到包含块边沿或者另一个浮动盒的外边。如果没有足够的水平空间来浮动，它会向下移动，直到空间合适或者不会再出现其它浮动了<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a9bd1c5?w=600&amp;h=393&amp;f=jpeg&amp;s=23899" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a9bd1c5?w=600&amp;h=393&amp;f=jpeg&amp;s=23899" alt="image"></a><br>（2）例子2：<a href="http://js.jirengu.com/vipe/6/edit?html,output" target="_blank" rel="noopener">被卡住</a><br>高度不一样，即出现一个卡住的问题<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a17fc82?w=600&amp;h=348&amp;f=jpeg&amp;s=20459" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a17fc82?w=600&amp;h=348&amp;f=jpeg&amp;s=20459" alt="image"></a><br>（3）例子3：<a href="http://js.jirengu.com/qowok/1/edit" target="_blank" rel="noopener">文本被缩短下移</a><br><strong>注：</strong> 未设置样式的块级元素，即有默认样式，<code>margin-top(or bottom);</code><br>因为浮动（盒）不在普通流内，在浮动盒之前或者之后创建的未定位的块盒会竖直排列，就像浮动不存在一样。接着，浮动（盒）创建的当前及后续行盒会进行必要的缩短，为了给浮动（盒）的 <code>margin box</code> 让出空间。</p><p>例子：如一个普通元素（如p）遇到浮动元素之后，普通元素（如p）看不见这个浮动元素，但这个普通元素里的行盒（文字生成的行盒特性）能看到该浮动元素。当浮动盒宽度变化，文字行盒也会相应地被挤下去换行。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a210638?w=600&amp;h=306&amp;f=jpeg&amp;s=33358" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03a210638?w=600&amp;h=306&amp;f=jpeg&amp;s=33358" alt="image"></a></p><h3 id="2、从理论到实现效果"><a href="#2、从理论到实现效果" class="headerlink" title="2、从理论到实现效果"></a>2、从理论到实现效果</h3><p>（1）浮动元素脱离普通流？<br><strong>A、普通流是什么？</strong><br>页面渲染时，遵循“块级元素占据一行，行内元素一行水平排列占据它自身宽度，再来块级元素素依次向下排列”规律，并且这些元素从上到下，从左到右会将父元素所展示的页面撑开。<br><strong>B、脱离普通流：</strong><br>父元素计算宽高的时候，发现不了浮动元素。一旦有浮动元素，块级元素不会按照“从上到下，从左到右”的顺序去展示页面，块级元素会收缩内容宽度（呈现<code>inline-block</code>的特性），那么，父容器不会被里面的浮动元素撑开；<br>行内元素则会能看见浮动元素，如文本或其他行内元素则会环绕浮动元素。<br>例子：<a href="http://js.jirengu.com/tiye/1/edit?html,output" target="_blank" rel="noopener">脱离普通流？！</a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03aa55440?w=600&amp;h=353&amp;f=jpeg&amp;s=21451" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03aa55440?w=600&amp;h=353&amp;f=jpeg&amp;s=21451" alt="块盒看不见浮动的 box1，但我是文本我能看见 "></a></p><p>（2）小结：</p><ul><li>块级元素浮动，宽度会收缩（<code>width:100%;</code>的用武之地）；</li><li>行内元素浮动，以块级特性呈现（不用再写<code>display: inline-block;</code>）<br><a href="http://js.jirengu.com/muha/1/edit?html,output" target="_blank" rel="noopener">块级元素浮动宽度收缩，行内元素浮动以块级特性呈现</a></li></ul><p><strong>注：</strong> 块级元素默认样式可以撑满父容器，块级元素浮动则会收缩到内容的本身的宽度。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong> 行内元素能发现浮动元素，如设置<code>float</code>或者<code>position</code>元素属性，便有了块级元素的特性，可以设置宽高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">span&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    background: blue;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>（3）<strong>注：</strong> 脱离普通流？！VS abosolute</p><h3 id="3、浮动的使用场景"><a href="#3、浮动的使用场景" class="headerlink" title="3、浮动的使用场景"></a>3、浮动的使用场景</h3><p>（1）两栏布局<br>特指一侧是固定宽度，另一侧是自适应（用<code>margin</code>间隔来表示自适应的作用，是因为普通的块级元素会充满整个页面）<br><a href="http://js.jirengu.com/mabit/1/edit" target="_blank" rel="noopener">左侧固定宽度，右侧自适应</a> （反之，也可以）</p><p>（2）三栏布局<br>指两侧宽度固定，中间内容区块自适应<br><a href="http://js.jirengu.com/jawu/1/edit?html,output" target="_blank" rel="noopener">简单的三栏布局</a><br><strong>注：</strong> 注意html结构顺序，即按照class为<code>menu</code>——<code>aside</code>——<code>main</code>的div元素顺序写法<br>当一个浮动盒按照设置实现左浮动时，另一个浮动元素设置为右浮，此时这个右浮，即相对于同级元素的高度进行右浮（除非页面放不下被挤下移除外）。</p><p>（3）导航条<br><code>list-style:none;</code> <code>float：left(or right);</code> <code>margin-left:XXpx;</code></p><ul><li><a href="http://js.jirengu.com/zece/1/edit?html,output" target="_blank" rel="noopener">左浮导航</a></li><li><a href="http://js.jirengu.com/nilu/1/edit?html,output" target="_blank" rel="noopener">右浮导航</a></li></ul><h3 id="4、清除浮动"><a href="#4、清除浮动" class="headerlink" title="4、清除浮动"></a>4、清除浮动</h3><p>（1）为什么要清除浮动？<br>虽然浮动是一种实现布局的方式，但是浮动在父元素中看不见。一旦在元素标签内加入了浮动，浮动脱离了普通流，在页面渲染时并不会按照html结构的计算规则，浮动元素会导致父元素所设置的页面无法撑开，浮动甚至会让浮动的效果叠放在页面某些元素效果上。所以必要时，需要清除浮动，这也是浮动实现布局的重要一环。<br>从浮动具有副作用说起：<br>问题A：<a href="http://js.jirengu.com/sado/1/edit?html,output" target="_blank" rel="noopener">对后续元素位置产生影响</a><br>问题B：<a href="http://js.jirengu.com/towu/1/edit?html,output" target="_blank" rel="noopener">父容器告诉计算出现问题</a><br>（2）<code>clear:left;?</code><br>例子：<a href="http://js.jirengu.com/taja/1/edit?html,output" target="_blank" rel="noopener">clear:left?</a></p><ul><li><code>clear:left;</code>：要求该盒的top<br>border边位于源文档中在此之前的元素形成的所有左浮动盒的bottom外边下方</li><li><code>clear: right;</code>:要求该盒的top<br>border边位于源文档中在此之前的元素形成的所有右浮动盒的bottom外边下方</li></ul><p>即：<a href="http://js.jirengu.com/taja/1/edit?html,output" target="_blank" rel="noopener">box2设置clear:right有效吗?有</a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03aa4505d?w=600&amp;h=345&amp;f=jpeg&amp;s=23763" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03aa4505d?w=600&amp;h=345&amp;f=jpeg&amp;s=23763" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03e212d9b?w=600&amp;h=342&amp;f=jpeg&amp;s=21003" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f03e212d9b?w=600&amp;h=342&amp;f=jpeg&amp;s=21003" alt="image"></a></p><p>（3）清除浮动的两大副作用<br>对应问题B：<a href="http://js.jirengu.com/towu/1/edit?html,output" target="_blank" rel="noopener">父容器告诉计算出现问题</a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f06a88044d?w=600&amp;h=313&amp;f=jpeg&amp;s=19400" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f06a88044d?w=600&amp;h=313&amp;f=jpeg&amp;s=19400" alt="image"></a></p><p>【重点】由于浮动在父容器中不能被发现，但要解决父容器（或页面）撑开的问题，我们必须在浮动和父容器（或者浮动元素）共存时寻找到一种解决方法。即在带有浮动属性的父元素标签中添加class为<code>clearfix</code>，关于伪元素属性<code>::after</code> （或<code>::before</code>）的固定代码样式，伪元素清除浮动法（IE8以上使用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after &#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line">/*或触发ie6的属性*/</span><br><span class="line">.clearfix &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个普通元素内不具有浮动的属性参数，即<code>float：none;</code>和<code>clear: left;</code> 即可将完成<code>clear:left;</code>的效果【注意：应注重css元素的权重，以免报错】或【解决方法：】</p><ul><li>方法1：<a href="http://js.jirengu.com/sehuj/2/edit" target="_blank" rel="noopener">父容器与浮动共存问题的解决</a></li><li>方法2：<br><a href="http://js.jirengu.com/sehuj/3/edit" target="_blank" rel="noopener">#1采用伪元素（一个替代标签）解决行内浮动问题</a><br><a href="http://js.jirengu.com/leyow/1/edit" target="_blank" rel="noopener">#2采用伪元素（一个替代标签）解决块级浮动问题</a></li></ul><p>（4）总结<br>实现一个水平布局</p><ul><li>方法1：设置<code>display：inline-block;</code>，注意缝隙和上对其的问题</li><li>方法2：加入浮动，用<code>clearfix</code>的固定代码包裹解决父元素撑开页面的问题</li></ul><hr><h1 id="二、定位"><a href="#二、定位" class="headerlink" title="二、定位"></a>二、定位</h1><h3 id="1、什么是定位？"><a href="#1、什么是定位？" class="headerlink" title="1、什么是定位？"></a>1、什么是定位？</h3><p>（1）先了解正常/文档流（Normal Flow）是什么<br>Normal Flow即浏览器默认的文档布局方式。一旦添加了浮动和定位，脱离文档流之后，页面布局的规则发生变化。</p><p>（2）定位<br>通过设置<code>position</code>属性来覆盖默认的布局样式。即元素添加<code>position</code>和对应的属性值，它则会脱离了文档流。<br><code>position</code>，让一个元素的位置在以前的基础上产生变动。（考虑：相对于谁和属性值）</p><h3 id="2、定位的类型"><a href="#2、定位的类型" class="headerlink" title="2、定位的类型"></a>2、定位的类型</h3><p>（1）静态定位 ：<br><code>position: static;</code>:默认值 默认的布局方式。<br>（2）相对定位：相对于自身的位置<br><code>position: relative;</code>:相对默认的布局位置进行定位。<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f06cd844f2?w=600&amp;h=160&amp;f=jpeg&amp;s=10171" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f06cd844f2?w=600&amp;h=160&amp;f=jpeg&amp;s=10171" alt="相对定位偏移前"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f08c03826d?w=600&amp;h=150&amp;f=jpeg&amp;s=11187" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f08c03826d?w=600&amp;h=150&amp;f=jpeg&amp;s=11187" alt="相对定位偏移后1"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f091d1704b?w=600&amp;h=145&amp;f=jpeg&amp;s=10536" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f091d1704b?w=600&amp;h=145&amp;f=jpeg&amp;s=10536" alt="相对定位偏移后2"></a><br><strong>注：</strong> <code>left</code>和<code>top</code>只对<code>position:absolution/relative/fixed;</code>生效<br>所谓的相对定位，是针对移动的元素自身，相对于它本身原先位置做了对应位置的偏移。但它所占用的文档流位置大小是没有变的。</p><p>（3）绝对定位：<strong>相对于父元素位置</strong><br><code>position: absolute;</code> 绝对定位元素脱离正常文档流，相对其定位上下文（Positioning Context）进行定位。 即页面上的正常元素<strong>看不见</strong>该绝对定位元素。但页面上绝对定位常覆盖其他元素。多个绝对定位元素存在页面，它们之间的绝对定位也相互看不见，产生重叠现象。</p><p>寻找页面中一个元素绝对位置，可以先设置该元素绝对定位：<code>position: absolute;</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f094d7d319?w=600&amp;h=241&amp;f=jpeg&amp;s=20492" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f094d7d319?w=600&amp;h=241&amp;f=jpeg&amp;s=20492" alt="image"></a></p><p>然后先从它的父元素中进行相对定位：<code>position: relative;</code> 中确定该元素的绝对定位；<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0950f4aea?w=600&amp;h=229&amp;f=jpeg&amp;s=21227" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0950f4aea?w=600&amp;h=229&amp;f=jpeg&amp;s=21227" alt="image"></a><br>如果没有此绝对定位，再从它的父元素的父元素（如body）里的位置找；如果没有，则根据html的根节点作为参考。</p><p><strong>总结：</strong> 使用绝对定位时，设置好参考点，一般，绝对定位的参考点为元素父容器<br>如一个元素设置了<code>position：absolute；</code>，那么它的父容器则设置<code>position：relative；</code></p><p><strong>注：</strong> 元素中使用了<code>position：absolute;</code>，就像浮动一样有了一些特性：</p><p>A、加入绝对定位后，宽度收缩<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0a3847953?w=600&amp;h=462&amp;f=jpeg&amp;s=40218" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0a3847953?w=600&amp;h=462&amp;f=jpeg&amp;s=40218" alt="image"></a><br>B、加入绝对定位后，行内元素呈现快接的特性，可以添加宽高<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b2c92e3d?w=600&amp;h=263&amp;f=jpeg&amp;s=20941" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b2c92e3d?w=600&amp;h=263&amp;f=jpeg&amp;s=20941" alt="image"></a><br>（4）<code>z-index</code><br>由于使用绝对定位之后，产生元素覆盖的问题，<code>z-index</code>可以解决元素之间覆盖顺序的问题,，设置它的层叠顺序。如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0a96f0518?w=600&amp;h=447&amp;f=jpeg&amp;s=37331" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0a96f0518?w=600&amp;h=447&amp;f=jpeg&amp;s=37331" alt="image"></a><br>（5）固定定位<br><code>position: fixed;</code> 相对浏览器窗口进行定位。<br>如“回到顶部”、“内容变固定窗口不变”等效果。因此当滚动产生时，固定定位元素依然处于窗口的某个固定位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.feedback &#123;</span><br><span class="line">  right: 30px;</span><br><span class="line">  bottom: 30px;</span><br><span class="line">  position: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）粘性定位（兼容性差）<br><code>position: sticky;</code>是相对定位和固定定位的结合。<br>默认情况下表现为相对定位，当浏览器窗口顶端与元素的距离等于 top 属性的值时，转变为固定定位。<br>如：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b77c76a1?w=600&amp;h=328&amp;f=jpeg&amp;s=24564" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b77c76a1?w=600&amp;h=328&amp;f=jpeg&amp;s=24564" alt="image"></a></p><h1 id="三、浮动和定位——解决的一些问题"><a href="#三、浮动和定位——解决的一些问题" class="headerlink" title="三、浮动和定位——解决的一些问题"></a>三、浮动和定位——解决的一些问题</h1><h3 id="1、BFC和浮动"><a href="#1、BFC和浮动" class="headerlink" title="1、BFC和浮动"></a>1、BFC和浮动</h3><h3 id="2、浮动和负边距"><a href="#2、浮动和负边距" class="headerlink" title="2、浮动和负边距"></a>2、浮动和负边距</h3><p>两个浮动元素，如果因放不下导致其中一个下移，对下移的元素设置负 <code>margin</code>值大于自身的宽度可将其上移<br>如：<br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b72844ae?w=600&amp;h=306&amp;f=jpeg&amp;s=20881" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b72844ae?w=600&amp;h=306&amp;f=jpeg&amp;s=20881" alt="image"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b834de3b?w=600&amp;h=304&amp;f=jpeg&amp;s=21571" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0b834de3b?w=600&amp;h=304&amp;f=jpeg&amp;s=21571" alt="image"></a></p><h3 id="3、用inline-block-还是浮动"><a href="#3、用inline-block-还是浮动" class="headerlink" title="3、用inline-block;还是浮动"></a>3、用<code>inline-block;</code>还是浮动</h3><p>（1）<code>inline-block;</code></p><ul><li>优势: 不需要清除浮动，简单，在设置居中时更方便,适合子内容不多的元素水平排列</li><li>劣势: 需要注意缝隙，注意对齐，ie8以下不能用</li></ul><p>（2）<code>float</code></p><ul><li>优势: 兼容性好，没缝隙问题</li><li>劣势: 需要清除浮动，适合稍大的布局</li></ul><h3 id="4、用定位还是浮动？"><a href="#4、用定位还是浮动？" class="headerlink" title="4、用定位还是浮动？"></a>4、用定位还是浮动？</h3><p>大布局、自适应用浮动；小元素、固定宽高用定位。具体要结合实际情况是关键。<br>如：<a href="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0c7165c1c?w=600&amp;h=62&amp;f=jpeg&amp;s=6641" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653b3f0c7165c1c?w=600&amp;h=62&amp;f=jpeg&amp;s=6641" alt="image"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自我总结：&quot;&gt;&lt;a href=&quot;#自我总结：&quot; class=&quot;headerlink&quot; title=&quot;自我总结：&quot;&gt;&lt;/a&gt;自我总结：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;浮动是实现布局的一种常见方式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记（三）:基本样式（下）</title>
    <link href="http://yoursite.com/2018/11/08/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2018/11/08/CSS学习笔记（三）：基本样式（下）/</id>
    <published>2018-11-08T05:13:52.000Z</published>
    <updated>2018-11-26T11:46:25.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>background</td><td>简写属性，将背景属性设置在一个生命中</td></tr><tr><td>background-attachment</td><td>背景图像是否固定或者随着页面的其余部分滚动</td></tr><tr><td>background-color</td><td>可设置元素的背景颜色</td></tr><tr><td>background-image</td><td>可把图像设置为背景</td></tr><tr><td>background-position</td><td>设置背景图像的起始位置（常用于图标在页面上的设置）</td></tr><tr><td>background-repeat</td><td>设置背景图像是否重复，以及如何重复</td></tr><tr><td>background-size</td><td>设置背景的大小（兼容性）（css3）</td></tr></tbody></table><a id="more"></a><h3 id="1、background-position-：默认图片主要从左上角方向偏移"><a href="#1、background-position-：默认图片主要从左上角方向偏移" class="headerlink" title="1、background-position ：默认图片主要从左上角方向偏移"></a>1、<code>background-position</code> ：默认图片主要从左上角方向偏移</h3><ul><li><code>x y</code></li><li><code>x% y%</code></li><li><code>[top | center | bottom] [left | center | right]</code></li></ul><h3 id="2、background-repeat：背景图像是否重复或如何重复"><a href="#2、background-repeat：背景图像是否重复或如何重复" class="headerlink" title="2、background-repeat：背景图像是否重复或如何重复"></a>2、<code>background-repeat</code>：背景图像是否重复或如何重复</h3><ul><li><code>no-repeat</code>：背景图片在规定位置</li><li><code>repeat-x</code>：图片横向重复</li><li><code>repeat-y</code>：图片纵向重复</li><li><code>repeat</code>：全部重复</li></ul><h3 id="3、background-size：背景图片大小的设置，用来拉伸、缩放"><a href="#3、background-size：背景图片大小的设置，用来拉伸、缩放" class="headerlink" title="3、background-size：背景图片大小的设置，用来拉伸、缩放"></a>3、<code>background-size</code>：背景图片大小的设置，用来拉伸、缩放</h3><ul><li><code>100px 100px</code></li><li><code>contain</code></li><li><code>cover</code></li></ul><h3 id="4、关于background相关元素的属性，代码如下："><a href="#4、关于background相关元素的属性，代码如下：" class="headerlink" title="4、关于background相关元素的属性，代码如下："></a>4、关于<code>background</code>相关元素的属性，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*背景色和背景图片使用场景 */</span><br><span class="line">场景1：两元素适用于页面大、背景图片小</span><br><span class="line">场景2：背景图为.png格式的图片*/</span><br><span class="line">background-color: #f00; background-image:  url(background.gif);  background-repeat: no-repeat;  background-attachment: fixed;  background-position: 0 0;</span><br><span class="line">/*背景位置与页面窗口的宽、高成正相关*/</span><br></pre></td></tr></table></figure><p>可缩写为一句：<br><code>background: #f00 url(background.gif) no-repeat fixed 0 0;</code><br>如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa906408f2f?w=600&amp;h=296&amp;f=jpeg&amp;s=34786" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa906408f2f?w=600&amp;h=296&amp;f=jpeg&amp;s=34786" alt="background-size：contain；"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9016afbae?w=600&amp;h=245&amp;f=jpeg&amp;s=30208" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9016afbae?w=600&amp;h=245&amp;f=jpeg&amp;s=30208" alt="background-size：cover；"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9063adf16?w=600&amp;h=280&amp;f=jpeg&amp;s=33427" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9063adf16?w=600&amp;h=280&amp;f=jpeg&amp;s=33427" alt="display：inline-block"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9065d3265?w=600&amp;h=166&amp;f=jpeg&amp;s=23961" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9065d3265?w=600&amp;h=166&amp;f=jpeg&amp;s=23961" alt="display：block"></a></p><blockquote><p>注：使用<code>background-color</code>和<code>background-image</code>，需要注意：<br>（1）将该页面撑开<br>（2）注意<code>background-size</code>使用</p></blockquote><h1 id="二、CSS-Sprite"><a href="#二、CSS-Sprite" class="headerlink" title="二、CSS Sprite"></a>二、CSS Sprite</h1><h5 id="1、俗称“雪碧图”或“精灵图”指将不同的图片、图标合并在一张图上。"><a href="#1、俗称“雪碧图”或“精灵图”指将不同的图片、图标合并在一张图上。" class="headerlink" title="1、俗称“雪碧图”或“精灵图”指将不同的图片、图标合并在一张图上。"></a>1、俗称“雪碧图”或“精灵图”指将不同的图片、图标合并在一张图上。</h5><h5 id="2、作用：使用CSS-Sprite-可以减少网络请求（如每一张小icon图片都会产生加载时间），提高网页加载性能。"><a href="#2、作用：使用CSS-Sprite-可以减少网络请求（如每一张小icon图片都会产生加载时间），提高网页加载性能。" class="headerlink" title="2、作用：使用CSS Sprite 可以减少网络请求（如每一张小icon图片都会产生加载时间），提高网页加载性能。"></a>2、作用：使用CSS Sprite 可以减少网络请求（如每一张小icon图片都会产生加载时间），提高网页加载性能。</h5><h5 id="3、使用：利用background-position，对图标进行位置偏移"><a href="#3、使用：利用background-position，对图标进行位置偏移" class="headerlink" title="3、使用：利用background-position，对图标进行位置偏移"></a>3、使用：利用<code>background-position</code>，对图标进行位置偏移</h5><h1 id="三、隐藏or透明"><a href="#三、隐藏or透明" class="headerlink" title="三、隐藏or透明"></a>三、隐藏or透明</h1><ul><li><code>opacity: 0;</code> ：透明度为0，整体（透明度0-1，0.5为半透明）</li><li><code>visibility: hidden;</code> : 即元素看不见，但存在。 和opacity：0；类似</li><li><code>display：none；</code> : 消失，不占位置（页面上渲染的其他元素都察觉不到）</li><li><code>background-color</code> ：<code>rgba（0，0，0，0.2）</code> 只是背景色透明</li></ul><h1 id="四、inline-block"><a href="#四、inline-block" class="headerlink" title="四、inline-block"></a>四、<code>inline-block</code></h1><h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p>既呈现<code>inline</code>特性（不占据一整行，宽度由内容宽度决定），又呈现block特性（可设置宽高，内外边距）<br><strong>注：</strong> <code>display:block;</code>的布局下，块级元素的宽度是一个可忽视的问题<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9064182b9?w=600&amp;h=163&amp;f=jpeg&amp;s=13261" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9064182b9?w=600&amp;h=163&amp;f=jpeg&amp;s=13261" alt="1"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa90662aeca?w=600&amp;h=298&amp;f=jpeg&amp;s=27213" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa90662aeca?w=600&amp;h=298&amp;f=jpeg&amp;s=27213" alt="2"></a><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa92a9482c0?w=600&amp;h=283&amp;f=jpeg&amp;s=27525" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa92a9482c0?w=600&amp;h=283&amp;f=jpeg&amp;s=27525" alt="3"></a></p><h3 id="2、缝隙问题："><a href="#2、缝隙问题：" class="headerlink" title="2、缝隙问题："></a>2、缝隙问题：</h3><p>如图：<a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa94f4e6e01?w=600&amp;h=366&amp;f=jpeg&amp;s=34526" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa94f4e6e01?w=600&amp;h=366&amp;f=jpeg&amp;s=34526" alt="image"></a></p><h3 id="3、行内元素对齐问题："><a href="#3、行内元素对齐问题：" class="headerlink" title="3、行内元素对齐问题："></a>3、行内元素对齐问题：</h3><p>如图：在<code>inline-block</code>的布局下，可以看成文字对齐。默认情况下，行内元素对齐是以里面内容的底部为基线对齐（至少两个元素进行对比），其他则设置<code>vertical-align：top(bottom、middle)</code>等）进行基线对齐（在表格中使用尤为明显）<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa95111520e?w=600&amp;h=507&amp;f=jpeg&amp;s=42488" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa95111520e?w=600&amp;h=507&amp;f=jpeg&amp;s=42488" alt="image"></a></p><h1 id="五、line-height"><a href="#五、line-height" class="headerlink" title="五、line-height"></a>五、<code>line-height</code></h1><h3 id="1、定义：-1"><a href="#1、定义：-1" class="headerlink" title="1、定义："></a>1、定义：</h3><p>用于设置单行文本的行高。</p><h3 id="2、几个问题："><a href="#2、几个问题：" class="headerlink" title="2、几个问题："></a>2、几个问题：</h3><p>（1）了解<code>line-height</code>和<code>margin</code>、<code>padding</code>在使用上的一个区别</p><ul><li><code>line-height: 2</code>，所占据的行高是本身文字高度的2倍。</li><li><code>margin</code>是外边距，</li><li><code>padding</code>则是内边距<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa967d6612e?w=600&amp;h=292&amp;f=jpeg&amp;s=24379" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa967d6612e?w=600&amp;h=292&amp;f=jpeg&amp;s=24379" alt="image"></a></li></ul><p>（2）<code>line-height</code>的用法，数字和百分比的区别</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; line-height：2`VS `line-height： 100%</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><code>line-height</code>具有继承性。<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa973f92bc2?w=600&amp;h=284&amp;f=jpeg&amp;s=21556" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa973f92bc2?w=600&amp;h=284&amp;f=jpeg&amp;s=21556" alt="image"></a></p><ul><li><code>line-height:2</code>，所占据的行高是本身文字高度的2倍。想要页面每个元素都拥有几倍的行高，则设置为数字。</li><li><code>line-height: 200%</code> ，是其父元素文字高度的2倍。（注：百分比有一定的相对性，如本身无设置和设置百分比，便可看出差别）<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa974504933?w=600&amp;h=470&amp;f=jpeg&amp;s=46210" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa974504933?w=600&amp;h=470&amp;f=jpeg&amp;s=46210" alt="image"></a></li></ul><h3 id="3、height-line-heihgt"><a href="#3、height-line-heihgt" class="headerlink" title="3、height=line-heihgt"></a>3、<code>height=line-heihgt</code></h3><p>设置垂直居中单行文本，如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa99955bf8f?w=600&amp;h=449&amp;f=jpeg&amp;s=42602" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa99955bf8f?w=600&amp;h=449&amp;f=jpeg&amp;s=42602" alt="image"></a></p><h1 id="六、盒模型"><a href="#六、盒模型" class="headerlink" title="六、盒模型"></a>六、盒模型</h1><h3 id="1、IE-盒模型"><a href="#1、IE-盒模型" class="headerlink" title="1、IE 盒模型"></a>1、IE 盒模型</h3><p>IE 盒模型的width包括：<code>content尺寸</code>+<code>padding</code>+<code>border</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa97bada688?w=467&amp;h=274&amp;f=jpeg&amp;s=18075" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa97bada688?w=467&amp;h=274&amp;f=jpeg&amp;s=18075" alt="image"></a><br>（如IE678怪异模式，不添加<code>doctype</code>，使用ie盒模型，宽度=边框+padding+内容宽度），如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa98a616092?w=600&amp;h=353&amp;f=jpeg&amp;s=30640" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa98a616092?w=600&amp;h=353&amp;f=jpeg&amp;s=30640" alt="image"></a></p><h3 id="2、W3C标准下的盒模型"><a href="#2、W3C标准下的盒模型" class="headerlink" title="2、W3C标准下的盒模型"></a>2、W3C标准下的盒模型</h3><p>W3C标准下的盒模型<code>padding</code>、<code>border</code>所占的空间不在<code>width</code>、<code>height</code>范围内，content宽度即是<code>width</code><br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa97b274f60?w=444&amp;h=270&amp;f=jpeg&amp;s=17106" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa97b274f60?w=444&amp;h=270&amp;f=jpeg&amp;s=17106" alt="image"></a><br>（如chrome，ie9+,ie678，添加<code>doctype</code>，使用标准盒模型，<strong>宽度=内容宽度</strong>），如图：<br><a href="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9937d9d65?w=600&amp;h=357&amp;f=jpeg&amp;s=31522" target="_blank" rel="noopener"><img src="https://user-gold-cdn.xitu.io/2018/8/14/16537fa9937d9d65?w=600&amp;h=357&amp;f=jpeg&amp;s=31522" alt="image"></a></p><h3 id="3、box-sizing（css3新样式）"><a href="#3、box-sizing（css3新样式）" class="headerlink" title="3、box-sizing（css3新样式）"></a>3、<code>box-sizing</code>（css3新样式）</h3><p>为了使用方便，可以用IE盒模型计算宽度的方法，将<strong>width=border+padding+内容宽度</strong><br>A、W3C标准的盒模型：<code>box-sizing： content-box</code><br>B、IE盒模型：<code>box-sizing：border-box</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;height:200px;  width:200px;  border:solid  10px #333;  padding:100px&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="七、字体图标的实现"><a href="#七、字体图标的实现" class="headerlink" title="七、字体图标的实现"></a>七、字体图标的实现</h1><h3 id="1、字体图标的原理："><a href="#1、字体图标的原理：" class="headerlink" title="1、字体图标的原理："></a>1、字体图标的原理：</h3><p>当你写完带有字体的html文件时，在浏览器打开页面时，浏览器会读取 HTML 文件进行解析渲染。当读到「饥饿」两个字时会转换成对应的 unicode码（一种识别字体的特定编号）。再根据HTML里设置的<code>font-family</code>（如果没设置则使用浏览器默认设置）去查找电脑里（如果有自定义字体<code>@font-face</code> ，则加载对应字体文件）对应字体的字体文件。找到文件后根据 unicode 码去查找绘制外形，找到后绘制到页面上。 所以对于第二个范例， <code>「&amp;#9965」</code>是「饥」的unicede码，所以用户最终也能看到serf字体样式的「饥」字。</p><h3 id="2、实现步骤："><a href="#2、实现步骤：" class="headerlink" title="2、实现步骤："></a>2、实现步骤：</h3><p><strong>第一步：</strong><br>进入<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont-阿里巴巴矢量图标库</a>——选一个喜欢的图标——添加至购物车——添加至项目——复制Unicode码<br><strong>第二步：</strong><br>进入代码——并未展示图标（说明系统中没有能体现字体图标的该Unicode码，浏览器也未能识别Unicode码）——复制该图标自动生成的css代码（用<code>@font-face</code>来定义一个字体，该字体名可以随便取，这里为：XXX）——定义该字体图标，并设置它css样式如<code>font-family：XXX；</code>等样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;JS Bin&lt;/title&gt;</span><br><span class="line">  &lt;style&gt; @font-face &#123;</span><br><span class="line">      font-family: &apos;iconfont&apos;;  /* project id 645342  */</span><br><span class="line">      src: url(&apos;//at.alicdn.com/t/font_645342_wae7ml0d77am7vi.eot&apos;);</span><br><span class="line">      src: url(&apos;//at.alicdn.com/t/font_645342_wae7ml0d77am7vi.eot?#iefix&apos;) format(&apos;embedded- opentype&apos;),</span><br><span class="line">      url(&apos;//at.alicdn.com/t/font_645342_wae7ml0d77am7vi.woff&apos;) format(&apos;woff&apos;),</span><br><span class="line">      url(&apos;//at.alicdn.com/t/font_645342_wae7ml0d77am7vi.ttf&apos;) format(&apos;truetype&apos;),</span><br><span class="line">      url(&apos;//at.alicdn.com/t/font_645342_wae7ml0d77am7vi.svg#iconfont&apos;) format(&apos;svg&apos;);</span><br><span class="line">     &#125;</span><br><span class="line">     p&#123;</span><br><span class="line">      font-family:  iconfont;</span><br><span class="line">      font-size: 40px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">     &lt;p&gt;&amp;#xe618;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><p><em>让一个元素”看不见”有几种方式？有什么区别?</em></p><h3 id="1、display-none"><a href="#1、display-none" class="headerlink" title="1、display: none;"></a>1、<code>display: none;</code></h3><p>给元素设置<code>display:none;</code>后，元素会从页面中彻底消失，它原本占据的空间会被其他元素占有，会造成浏览器的回流与重绘。</p><h3 id="2、visibility-hidden"><a href="#2、visibility-hidden" class="headerlink" title="2、visibility: hidden;"></a>2、<code>visibility: hidden;</code></h3><p>给元素设置<code>visibility:hidden;</code>后，元素会从页面中消失，它原本占据的空间会被保留，会造成浏览器的重绘，适用于希望元素隐藏又不影响页面布局的场景。</p><h3 id="3、opacity-0"><a href="#3、opacity-0" class="headerlink" title="3、opacity: 0;"></a>3、<code>opacity: 0;</code></h3><p>给元素设置<code>opacity:0;</code>后，元素变成透明的我们肉眼就看不到了，所以原本占据的空间还在。</p><h3 id="4、设置盒模型属性为0"><a href="#4、设置盒模型属性为0" class="headerlink" title="4、设置盒模型属性为0"></a>4、设置盒模型属性为0</h3><p>将<code>height</code>、<code>width</code>、<code>padding</code>、<code>border</code>、<code>margin</code>等盒模型属性的值全设为0，如果元素內还有子元素或内容，还应<code>overflow: hidden;</code>来隐藏子元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    border: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    overflow:</span><br><span class="line">    hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、设置元素绝对定位与top、right、bottom、left等将元素移出屏幕"><a href="#5、设置元素绝对定位与top、right、bottom、left等将元素移出屏幕" class="headerlink" title="5、设置元素绝对定位与top、right、bottom、left等将元素移出屏幕"></a>5、设置元素绝对定位与<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>等将元素移出屏幕</h3><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.box1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 100%;</span><br><span class="line">&#125;</span><br><span class="line">/*或*/</span><br><span class="line">.box1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、设置元素的绝对定位与z-index，将z-index设置成尽量小的负数。"><a href="#6、设置元素的绝对定位与z-index，将z-index设置成尽量小的负数。" class="headerlink" title="6、设置元素的绝对定位与z-index，将z-index设置成尽量小的负数。"></a>6、设置元素的绝对定位与z-index，将z-index设置成尽量小的负数。</h3><p>但z-index是相对而言的，用z-index就要设置其他元素的z-index值，且如果元素本身占据空间很大就不一定会被z-index值比它大的元素完全覆盖，所以不推荐这种方法。 如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: -100;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;background&lt;/td&gt;
&lt;td&gt;简写属性，将背景属性设置在一个生命中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-attachment&lt;/td&gt;
&lt;td&gt;背景图像是否固定或者随着页面的其余部分滚动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-color&lt;/td&gt;
&lt;td&gt;可设置元素的背景颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-image&lt;/td&gt;
&lt;td&gt;可把图像设置为背景&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-position&lt;/td&gt;
&lt;td&gt;设置背景图像的起始位置（常用于图标在页面上的设置）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-repeat&lt;/td&gt;
&lt;td&gt;设置背景图像是否重复，以及如何重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-size&lt;/td&gt;
&lt;td&gt;设置背景的大小（兼容性）（css3）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
